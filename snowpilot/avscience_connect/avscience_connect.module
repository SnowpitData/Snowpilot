<?php


include_once('includes/populate_layers_table.php');
include_once('includes/populate_shear_tests_table.php');
include_once('includes/populate_XML_field.php');
include_once('includes/populate_pit_fields.php');
include_once( DRUPAL_ROOT . '/sites/all/libraries/ForceUTF8/Encoding.php');
use \ForceUTF8\Encoding;

error_reporting(E_ALL);




function avscience_connect_menu(){

	$items['snowpilot/avscience_connect'] = array(
		'title' => 'Review differences between the kc and live avscience dbs',
		'page callback' => array('snowpilot_connect_page'),
		//'page arguments' => array('snowpilot_connect_form'),
		'access callback' => TRUE, // for some reason, user_has_role doesn't work here, nor does snowpilot_user_has_role. Imlementing in the called page form function
		'access_arguments' => 'administrator',
		'type' => MENU_CALLBACK,		
	);
	$items['snowpilot-query-feed.xml'] = array(
		'title' => 'query feed page',
		'page callback' => 'snowpilot_query_xml',
		'access callback' => TRUE,
	//	'access_arguments' => 'administrator',
		'type' => MENU_CALLBACK,	
	);
	$items['avscience-query-feed.xml'] = array(
		'title' => 'avscience query feed page',
		'page callback' => 'avscience_query_xml',
		'access callback' => TRUE,
	//	'access_arguments' => 'administrator',
		'type' => MENU_CALLBACK,	
	);
	$items['avscience-query'] = array(
		'title' => 'Advanced Snowpit query page',
		'page callback' => array('avscience_query_page'),
		'access callback' => TRUE,
		'access_arguments' => 'administrator',
		'type' => MENU_NORMAL_ITEM,	
	);
	$items['snowpilot-query'] = array(
		'title' => 'Recent Online Snowpits query page',
		'page callback' => array('snowpilot_query_page'),
		'access callback' => TRUE,
		'access_arguments' => 'administrator',
		'type' => MENU_NORMAL_ITEM,	
	);
	
	return $items;
}

function avscience_query_title(){
	return "Avscience Query MegaPage";
}

function snowpilot_query_page(){
	drupal_set_title('Online Snowpits query page');
	$output = 'This page is intended for snow scientists to query the snowpits that have been added to the online database. 
		This page does not query for snowpits entered via the installed application, for that go to the <a href ="/avscience-query">AvScience Query page</a> '.
	'<p>After finding parameters acceptable for your uses, you may use the XML Feed link at the bottom of this page to subscribe to a feed.';
	return $output . snowpilot_query_output() ;
}

function avscience_query_page(){
	
	$output = avscience_query_output();
	return t($output);
}






function snowpilot_connect_page (){
	$output = 'Introductory text';
	$new_pits_list = array();
	$new_pits_list = snowpilot_avscience_fetch_new_pits();
	dsm($new_pits_list);

	
	//dsm(drupal_get_form(snowpilot_connect_form($form, $form_state)));
	$default = implode( array_keys($new_pits_list['new_pits'] ), ',');
	$form_output = drupal_get_form('snowpilot_connect_form',$default);
	$output .= drupal_render($form_output);
	return $output;
}

function snowpilot_connect_form($form, &$form_state, $default){
	$form['snowpilot_connect_single'] = array(
		'#type' => 'textfield',
		'#size' => 120,
		'#title' => t('SERIAL of snowpit to convert'  ),
		'#description' => t('A comma separated list of SERIAL IDs to convert. Is automatically populated with this from diff between last week\'s avscience db and this week.' ),	
		'#weight' => '15',
		'#default_value' => $default,
		'#required' => TRUE,
		'#maxlength' => 8000,
	);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Convert Snowpits',
		'#weight' => '25',
	);
	
	return $form;
}
function snowpilot_connect_form_submit($form, &$form_state){
	error_reporting(E_ALL);
	$serial_ids = $form_state['values']['snowpilot_connect_single'];
			watchdog('avscience_connect', "Avscience connect form submission.".var_export($form_state['values']['snowpilot_connect_single'], TRUE));
			snowpilot_connect_convert_multi($serial_ids);
	return $form;
}

function avscience_connect_form_alter($form, &$form_state, $form_id){
	if ( $form_id == 'snowpilot_connect_single'){
		
	}
		return $form;
}

function snowpilot_connect_convert_multi($serial_ids){
	$current_snowpits_link = new mysqli();
	$current_snowpits_link->connect("localhost","jimurl","dRkV5iWqM3a54e5Z","jimurl_snowpilot_app") ;
	
	$snowpilot_avscience = new mysqli();
	$snowpilot_avscience->connect("localhost","jimurl","dRkV5iWqM3a54e5Z","jimurl_snowpilot_avscience") ;
	
	$query1 = "SELECT * FROM PIT_TABLE WHERE SERIAL IN (".$serial_ids.") ";
	$new_pits = $current_snowpits_link->query($query1);
	while ( $new_pit = $new_pits->fetch_array(MYSQLI_ASSOC) ){
		$result_codes = array();
		$critical = FALSE;
		unset($new_pit['PIT_DATA']);
		unset($new_pit['RANGE']);
		$keys = array_keys($new_pit);
		$keys_string = "(".implode(",", $keys )  . ")";

		$values_string = "('" . implode("','", $new_pit ). "')";
		$query2 = "INSERT INTO PIT_TABLE ".$keys_string." VALUES ".$values_string;
		if ( $snowpilot_avscience->query($query2) ){;
		  watchdog('avscience_connect', "Successfully added: ".$new_pit['SERIAL'] . " to the avscience db.");
		}else{
		  watchdog('avscience_connect', "Unable to add: ".$new_pit['SERIAL'] . " to the avscience db.", array() , WATCHDOG_WARNING);
			$critical = TRUE;
			$result_codes[] = array( 'continue' => TRUE, 'first' => $new_pit['SERIAL'].' could not be added to the avscience db.: '.$query2);
		}
// 		//		We keep adding the other functions to populate avscience here:

		if ( !$critical  ){		
			$xml_result_code = snowpilot_avscience_populate_xml($new_pit['SERIAL']);
			if ( $xml_result_code['continue'] ) {
				$result_codes[] = $xml_result_code;
				watchdog('avscience_connect', $xml_result_code['message'] );
			}else { 
				$critical = TRUE; watchdog('avscience_connect', $xml_result_code['message'] , array() , WATCHDOG_WARNING);
			}
		}		
		
		if ( !$critical ){	
			$image_result_code = populate_snowpit_image($new_pit['SERIAL']);
			if ( $image_result_code['continue'] ) {
				$result_codes[] = $image_result_code;
				watchdog('avscience_connect', $image_result_code['message'] );
			}	else{
				$critical = TRUE; watchdog('avscience_connect', $image_result_code['message'] , array() , WATCHDOG_WARNING);
			}
		}
	
// /*		
		if ( !$critical ){		
			$pit_fields_result_code = snowpilot_avscience_populate_pit_fields($new_pit['SERIAL']);
			if ( $pit_fields_result_code['continue'] ) {
				$result_codes[] = $pit_fields_result_code;
				watchdog('avscience_connect', $pit_fields_result_code['message'] );
			}else { 
				$critical = TRUE; watchdog('avscience_connect', $pit_fields_result_code['message'] , array() , WATCHDOG_WARNING);
			}
		}		
		
		if ( !$critical ){
		  $layers_result_code = populate_layers_table($new_pit['SERIAL']);
			if ( $layers_result_code['continue']){
				$result_codes[] = $layers_result_code;
				watchdog('avscience_connect', $layers_result_code['message'] );			
			}else{
				$critical = TRUE; watchdog('avscience_connect', $layers_result_code['message'] , array() , WATCHDOG_WARNING);
			}
		}
		if ( !$critical){
			$tests_result_code = populate_shear_tests_table($new_pit['SERIAL']);
			if ($tests_result_code['continue']){
				$result_codes[] = $tests_result_code;
				watchdog('avscience_connect', $tests_result_code['message'] );			
			}else{
				$critical = TRUE; watchdog('avscience_connect', $tests_result_code['message'] , array() , WATCHDOG_WARNING);
			}  
		}
//		*/
		if ( $critical ) dsm( $result_codes);
		
		///
		
	}
	return $result_codes;
}


//
// Tests to see if the pit was generated by drupal or not
//  if so, it returns the nid of the pit with said serial.
// the SERIAL in this case is the avscience serial number
// could technically work again any of the avscience dbs, but here it is 
// the main avscience db
function avscience_is_drupal_pit($SERIAL){
  include_once (DRUPAL_ROOT.'/sites/default/db_settings.php' );
	Database::addConnectionInfo('avscience_db', 'default', $test_db );// $avsci_db_info

	db_set_active('avscience_db');
  $query = 'SELECT LOCAL_SERIAL FROM PIT_TABLE WHERE SERIAL = '.$SERIAL;
  $local_serial = db_query($query)->fetchField();
  db_set_active();
	if ( $local_serial ){ 
		preg_match( '/drupal-nid-(\d*)/' , $local_serial, $match);
		return $match[1] ;
	}else{
		return 0;
	}
}


function populate_snowpit_image($SERIAL){
	$critical = FALSE; 

	$message = 'default image message';
	
	$img_url = '/sites/default/files/avscience-profiles/graph-serial-'.$SERIAL. '.jpg';
	if( !file_exists( DRUPAL_ROOT. $img_url )){	
    $node_id = avscience_is_drupal_pit( $SERIAL ) ;
	  if ( $node_id > 0 ){  // it is a drupal-genrated snowpit, copy over the existing image
			$orig_img_url = '/sites/default/files/snowpit-profiles/graph-'.$node_id. '.jpg';
			//$node = node_load( $match[1] );
			$_image = fopen( DRUPAL_ROOT.$orig_img_url , 'rb');
	  	$img_src = fread( $_image, filesize(DRUPAL_ROOT.$orig_img_url));
			fclose($_image);
			
	  }else{  // not a drupal snowpit, get the image from kc server
			$kc_serial = avscience_connect_fetch_kc_serial($SERIAL);
			
			// temporarily commenting this out so that we don't ping the kc server for images too much
			//$img_src = file_get_contents( "http://www.kahrlconsulting.com:8084/avscience/PitServlet?TYPE=PITIMAGE&SERIAL=".$kc_serial );
			$img_src = '';
		}
		
		$local_image = fopen( DRUPAL_ROOT.$img_url , 'w');
		if ( $local_image ){ 
			fwrite($local_image, $img_src);
		  sleep(1);
			
		  fclose($local_image);
		}else{
			$critical = TRUE; 
			$message = 'Could not open connection to kahlrconsulting server for SERIAL: '.$SERIAL;
		}
		if ( !$critical ){
			$pre_img = imagecreatefromjpeg( DRUPAL_ROOT.$img_url);
			$new_img = imagecreatetruecolor(466,613);
			$result = imagecopy($new_img, $pre_img, 0,0, 14,140,466,613 );
			$success = imagejpeg( $new_img , DRUPAL_ROOT. '/sites/default/files/avscience-profiles/layers/layers-serial-'.$SERIAL. '.jpg');
			if ( $success ) $message = 'All images created successfully for '.$SERIAL;
		}
		
	}
	return array( 'continue' => !($critical) , 'message' => $message );
}

function snowpilot_avscience_fetch_new_pits(){
  $older_snowpits_link = new mysqli();
	$current_snowpits_link = new mysqli();
  $snowpilot_avscience = new mysqli();

	$older_snowpits_link->connect("localhost","jimurl","dRkV5iWqM3a54e5Z","jimurl_snowpilot_app_old") ;
	$current_snowpits_link->connect("localhost","jimurl","dRkV5iWqM3a54e5Z","jimurl_snowpilot_app") ;
	$snowpilot_avscience->connect("localhost","jimurl","dRkV5iWqM3a54e5Z","jimurl_snowpilot_avscience") ;
	
	$query1 = 'SELECT MAX(`SERIAL`) FROM `PIT_TABLE`';
	
	$first_results = $older_snowpits_link->query($query1)->fetch_row()[0];

	$query2 = 'SELECT `SERIAL`, `LOCAL_SERIAL`, `OBS_DATE` from `PIT_TABLE` where `SERIAL` > '. $first_results. '' ; //' AND OBS_DATE > "'. date( 'Y-m-d' , time() - 60*60*24*7*4).'"' ; // thereby only fetching new pits in the last four weeks, I want to avoid giant regurgitation!
	
	// Temproarily include all pits no matter the obs date, so to include the drupal nodes 
	$new_pits_result = $current_snowpits_link->query($query2);
	//dsm($new_pits_result);
	
	while ( $new_pit = $new_pits_result->fetch_array(MYSQLI_ASSOC) ){
    $all_pits_list[$new_pit['SERIAL']] = $new_pit;
		//  This query looks for existing pits in the final avscience db with the same local serial as this pit
		// unless the pit is originally from drupal database, then we allow updating it. 
		$query3 = "SELECT COUNT(`SERIAL`) FROM `PIT_TABLE` WHERE `LOCAL_SERIAL` = '". $new_pit['LOCAL_SERIAL']."'";  
		
		$existing_pit_check = $snowpilot_avscience->query($query3) or die(mysqli_error());
		$existing_pit = $existing_pit_check->fetch_row()[0];
		
		if (  $existing_pit == 0){
			//echo "Genuinely new pit: ". " : ". $new_pit['LOCAL_SERIAL']. " : ".$new_pit['OBS_DATE'] ."<br />";
			$new_pits[$new_pit['SERIAL']] = $new_pit;
		}else{

			//echo $existing_pit['SERIAL'] . " : ". $new_pit['LOCAL_SERIAL']. " : ".$new_pit['OBS_DATE'] ."<br />";
			$dupe_pits[$new_pit['SERIAL']] = $new_pit;
		}
		//mysqli_free_result($existing_pit_check);
		
	}
		//
	
	
	return array( 'all_pits' => $all_pits_list, 'dupe_pits' => $dupe_pits, 'new_pits' => $new_pits);
}

/*
//  This function submits to the avscience database  based on the node information passed to it. should be compliant with the snowpilot datamodel.
//
//
*/
function snowpilot_node_avscience_save_pit($node){
	$xml_filename = '/sites/default/files/snowpit-xml/node-'.$node->nid.'.xml';
	
	if ( !file_exists(DRUPAL_ROOT. $xml_filename)){
		watchdog('snowpilot', "Snowpit values list is being prepared");
		$values_list = array();
		
		//  $values_list[] =  ." = '" . str_replace( "'" , "''", $attr_val). "' ";
		$snowpilot_xmldoc = new DOMDocument('1.0', 'UTF-8');
		$snowpilot_PitCore = $snowpilot_xmldoc->createElement("Pit_Observation"); $snowpilot_xmldoc->appendChild($snowpilot_PitCore);
		$snowpilot_User = $snowpilot_xmldoc->createElement("User"); $snowpilot_PitCore->appendChild($snowpilot_User);
		$snowpilot_Location = $snowpilot_xmldoc->createElement("Location"); $snowpilot_PitCore->appendChild($snowpilot_Location);
		// ...but we have multiple layers
	  // Likewise, multiple shear test results
		$snowpilot_Density = $snowpilot_xmldoc->createElement("Density_Profile");
		$snowpilot_Temp = $snowpilot_xmldoc->createElement("Temperature_Profile");
	
		//PitCore Attributes: activities, aviLoc,iLayerNumber, bld, stability,avipit,incline,winDir,skiAreaPit ,bcPit, testPit,windspeed,aspect,skiBoot,measureFrom,sky,sufacePen, windloading,heightOfSnowpack,precip , serial, version,pitNotes,crownObs,timestamp,iDepth
			
	  $values_list[] =  " ACTIVITIES = '" . _generate_specifics_string($node). "' ";
		//aviLoc - or 'Pit is near avalanche at what point?'
		$values_list[] = " aviLoc = ". isset($node->field_near_avalanche['und'][0]['value']) ? "'".$node->field_near_avalanche['und'][0]['value']."'" : "''" ;
		
		// iLayerNumber
		// this implementation assumes that the layers are in numerical order from top down; item_id is a unique id in field collections, can't use it.
		$ids = array();
		foreach ($node->field_layer['und'] as $lay ){ $ids[] = $lay['value']; }
		$all_layers = field_collection_item_load_multiple($ids);
		$iLayerNumber_value = 1;	
		foreach($all_layers as $x => $layer){
			if ($layer->field_this_is_my_layer_of_greate['und'][0]['value'] == '1') { 
			
				$values_list[] =  " iDepth = '" . ($layer->field_concern['und'][0]['value'] == 'top') ? $layer->field_height['und'][0]['value'] : $node->field_bottom_depth['und'][0]['value'] . "' " ;
			  $values_list[] =  " iLayerNumber = '" . $iLayerNumber_value. "' ";
				break; 
			}else{
				$iLayerNumber_value++;
			}
		}

		//
		//PLATFORM is the database term for build number from the snowpilot desktop app. for this case, we will use drupal version 7.x
		
		$values_list[] =  " PLATFORM = '" . VERSION. "' ";
		//
		// stability

		$similar_stability = field_view_field('node', $node, 'field_stability_on_similar_slope');
		$values_list[] =  " STABILITY = '" . isset($node->field_stability_on_similar_slope['und'][0]['value']) ? $similar_stability[0]['#markup'] : "" . "' ";

		//
		// aviPit
		//
		$AviPit_value = (isset($node->field_adjacent_to_avy['und'][0]['value'] ) && $node->field_adjacent_to_avy['und'][0]['value'] == 1  ) ? '1' : '0';
		$values_list[] =  " aviPit = '" . $AviPit_value. "' ";
		//$values_list[] =  " crownObs = '" . $AviPit_value. "' ";
		$values_list[] =  " CROWN_OBS = '" . $AviPit_value. "' ";
		

	  // CrownObs is a synonym for aviPit in the avscience_db
		//
		//
		//  aviLoc - location of pit relative to the Avalanche: crown, flank, none ( unlike desktop app, this will only be populated in the case of aviPit == true )
		//
		if (isset($node->field_adjacent_to_avy['und'][0]['value']) && ($node->field_adjacent_to_avy['und'][0]['value'] == 1) && isset($node->field_near_avalanche['und'][0]['value'] ) ){
			$values_list[] =  " aviLoc = '" . $node->field_near_avalanche['und'][0]['value']. "' ";
		}
	
		// incline
		if ( isset($node->field_slope_angle['und'][0]['value']) ){
		  $values_list[] =  " INCLINE = '" . $node->field_slope_angle['und'][0]['value'] . "' ";
		}
		//
		// winDir
		if ( isset($node->field_wind_direction['und'][0]['value']) ){
		  $values_list[] =  " WIND_DIR = '" . $node->field_wind_direction['und'][0]['value']. "' ";
		}
		//
		//skiAreaPit
		if (isset($node->field_pit_dug_in_a_ski_area['und'][0]['value']) && $node->field_pit_dug_in_a_ski_area['und'][0]['value'] == 1 ) {
			$values_list[] =  " skiAreaPit = '" . $node->field_pit_dug_in_a_ski_area['und'][0]['value']. "' ";
			
		}
		//
		//
		// bcPit        Trinary: true , false ,or '' unset
		// we leavre unset if the 'skiAreaPit' variable is unset, or false
	
		if ( !isset($node->field_pit_is_representative_of_b['und'][0]['value']) || !isset($node->field_pit_dug_in_a_ski_area['und'][0]['value']) || $node->field_pit_dug_in_a_ski_area['und'][0]['value'] == 0){
			
		}elseif($node->field_pit_is_representative_of_b['und'][0]['value'] == '1' ){
			$values_list[] = " bcPit = '1' ";
		}else{
			$values_list[] = " bcPit = '0' ";
		}
		//
		// testpit
		//
		$values_list[] =  " TEST_PIT = '" . (	isset($node->field_practice_pit['und'][0]['value']) && $node->field_practice_pit['und'][0]['value'] == 1  ) ? '1' : '0' . "' ";
		//
		//windspeed
		$wind_speed = field_view_field('node', $node, 'field_wind_speed');
		$values_list[] = " WIND_SPEED = '". isset($node->field_wind_speed['und'][0]['value'])  ? $wind_speed[0]['#markup'] : ''. "'" ;
		//
		// aspect
/*		$aspect = $snowpilot_xmldoc->createAttribute("aspect");
		$aspect->value = isset($node->field_aspect['und'][0]['value']) ?  $node->field_aspect['und'][0]['value'] : '' ;
		$snowpilot_PitCore->appendChild($aspect);
		//
		// skiBoot   - Surface Penetration  
		// set whether dki or boot penetration is used; and identify the value of each
		$skiBoot = $snowpilot_xmldoc->createAttribute("skiBoot");
		$surfacePen = $snowpilot_xmldoc->createAttribute("surfacePen");
		if ( !isset($node->field_surface_penetration['und'][0]['value']) ){
			$skiBoot->value = '';
		}elseif($node->field_surface_penetration['und'][0]['value'] == 'boot' ){
			$skiBoot->value = 'boot';
			$surfacePen->value = isset($node->field_boot_penetration_depth['und'][0]['value']  ) ?
				$node->field_boot_penetration_depth['und'][0]['value'] : '' ;
		}else{
			$skiBoot->value = 'ski';
			$surfacePen->value = isset($node->field_ski_penetration['und'][0]['value']  ) ?
				$node->field_ski_penetration['und'][0]['value'] : '' ;
		}
		$snowpilot_PitCore->appendChild($skiBoot);
		$snowpilot_PitCore->appendChild($surfacePen);
		//
		//  measureFrom
		$measureFrom = $snowpilot_xmldoc->createAttribute("measureFrom");
		$measureFrom->value = (isset($node->field_depth_0_from['und'][0]['value']) && $node->field_depth_0_from['und'][0]['value'] == 'top' ) ? 'top' : 'bottom' ; 
		$snowpilot_PitCore->appendChild($measureFrom);
		//
		// Sky coverage
		//
		$skyCoverage = $snowpilot_xmldoc->createAttribute('sky');
		if (isset($node->field_sky_cover['und'])){
			$sky_cover = field_view_field('node', $node, 'field_sky_cover'); 
			$skyCoverage->value = $sky_cover[0]['#markup'];
		}
		$snowpilot_PitCore->appendChild($skyCoverage);
		//
		//  Wind Loading
		//
		$windLoading = $snowpilot_xmldoc->createAttribute('windLoading');
		if (isset ( $node->field_wind_loading['und'][0]['value'])){
			$windLoading->value = $node->field_wind_loading['und'][0]['value'];
		}
		$snowpilot_PitCore->appendChild($windLoading);
		//
		//  heightof Snowpack
		//
		$HoSnowpack = $snowpilot_xmldoc->createAttribute('heightOfSnowpack');
		if (isset ( $node->field_total_height_of_snowpack['und'][0]['value'])){
			$HoSnowpack->value = $node->field_total_height_of_snowpack['und'][0]['value'];
		}
		$snowpilot_PitCore->appendChild($HoSnowpack);
		//
		//  Precipitation
		//
		$precipitation = $snowpilot_xmldoc->createAttribute('precip');
		if ( isset ( $node->field_precipitation['und'][0]['value']) ){
			$precipitation->value = $node->field_precipitation['und'][0]['value'];
		}
		$snowpilot_PitCore->appendChild($precipitation);

		//
		//  Serial number - must be unique to this pit
		//  To maintain continuity with the desktop app, it should be username + timestamp ( unix, w/ milliseconds) of posting the item
		//  php microtime won't work here; we jsut use a millisecond timestamp padded with 0
		//
		$serial_num = $snowpilot_xmldoc->createAttribute('serial');
		$account = user_load($node->uid);
		$serial_num->value = 'drupal'.$account->name . $node->created . '000';
		$snowpilot_PitCore->appendChild($serial_num);
		//
		//  version - this will include drupal bld number ( starting at 7.5x ) and then also include the snowpilot.module version, and the browser type and version (similar to desktop app)
		//  I don't think browser type is directly supported within drupal, need browsecap module (?)
		//
		$web_version = $snowpilot_xmldoc->createAttribute('version');
		$snowpilot_version = '0.1'; // this will need to be read from the module version eventually
		$web_version->value = VERSION.'-'.$snowpilot_version ; // and then we'll need to append the browser and OS if we can.
		$snowpilot_PitCore->appendChild($web_version);
		//
		// Pit Notes- a potentially long text field, with wierd foregin characters and illegal characters
		//
		$pit_notes = $snowpilot_xmldoc->createAttribute('pitNotes');
		if ( isset( $node->body['und'])){
			$pit_notes->value = $node->body['und'][0]['safe_value'];
		}
		$snowpilot_PitCore->appendChild($pit_notes);
		//
		//  timestamp
		//
		$timestamp=$snowpilot_xmldoc->createAttribute('timestamp');
		$timestamp->value = $node->created . '000';
		$snowpilot_PitCore->appendChild($timestamp);
		//
		// Snowpilot name: User; drupal object: account
		//
		$username = $snowpilot_xmldoc->createAttribute('username'); // this doesn't actually exist in the snowpilot data model, but seems good to include
		$username->value = $account->name;
		$snowpilot_User->appendChild($username);
	
		$unit_prefs = snowpilot_unit_prefs_get($node, 'node');
	
		$preferences = array();
		foreach ( $unit_prefs as $key => $pref){
			if (substr( $key, 0 ,6 ) != 'field_'){	 
			 
		  	$preferences[$key] = $snowpilot_xmldoc->createAttribute( $key );
		  	$preferences[$key]->value = $pref;
		  	$snowpilot_User->appendChild($preferences[$key]);
		  }
		}
		//$snowpilot_User->removeChild('range');

		//
		//  useSymbols (?)
		//
		$useSymbols = $snowpilot_xmldoc->createAttribute( 'useSymbols');
		$useSymbols->value = 'true';
		$snowpilot_User->appendChild($useSymbols);
	
		//
		// full name
		//
		$fullName = $snowpilot_xmldoc->createAttribute('name');
		$firstName = $snowpilot_xmldoc->createAttribute('first');
		$lastName = $snowpilot_xmldoc->createAttribute('last');
		$firstName->value = isset($account->field_first_name['und']) ? $account->field_first_name['und'][0]['safe_value'] : '' ;
		$lastName->value = isset( $account->field_last_name['und'] ) ? $account->field_last_name['und'][0]['safe_value'] : '' ;
		$space = ($firstName->value <> '' && $lastName->value <> '') ? ' ' : '';
		$fullName->value = $firstName->value . $space . $account->field_last_name['und'][0]['safe_value'];
	
	
		$snowpilot_User->appendChild($firstName);
		$snowpilot_User->appendChild($lastName);
		$snowpilot_User->appendChild($fullName);
	
	
		//
		//  share
		//   this needs to become trinary, not just boolean
		$pitShare = $snowpilot_xmldoc->createAttribute('share');
		$pitShare->value = ($node->field_snowpit_visibility['und'][0]['value'] == 'public') ? 'true' : $node->field_snowpit_visibility['und'][0]['value'];
		$snowpilot_User->appendChild($pitShare);
		//
		//  phone of submitter
		//
		$userPhone = $snowpilot_xmldoc->createAttribute('phone');
		$userPhone->value = $account->field_phone['und'][0]['value'];
		$snowpilot_User->appendChild($userPhone);
	
		//
		// prof - professional checkbox
		//
		$userProf = $snowpilot_xmldoc->createAttribute('prof');
		$userProf->value = (isset( $account->field_professional['und'][0]['value'] ) && $account->field_professional['und'][0]['value'] == '1') ? 'true' : 'false';
		$snowpilot_User->appendChild($userProf);
	
		//
		// email
		//
		$userEmail = $snowpilot_xmldoc->createAttribute('email');
		$userEmail->value = $account->mail;
		$snowpilot_User->appendChild($userEmail);
	
		//
		// affil - Affilliation
		//
		$profAffil = $snowpilot_xmldoc->createAttribute('affil');
		$profAffil->value = isset ($account->field_professional_affiliation['und'][0]['tid']) ? taxonomy_term_load($account->field_professional_affiliation['und'][0]['tid'])->name : '';
		$snowpilot_User->appendChild($profAffil);
		//
		//  Location Element
		//
	
		// ID is required, even if blank
		//
		$id = $snowpilot_xmldoc->createAttribute('id');
		$snowpilot_Location->appendChild($id);
		// Coordinate type: UTM or Lat / Long
		//
	
		$coordType = $snowpilot_xmldoc->createAttribute('type');
		$coordType->value = ($unit_prefs['coordType'] == 'UTM' ) ? 'UTM' : 'LATLONG';
		$snowpilot_Location->appendChild($coordType);
	
	
		//zone
		$UTMzone = $snowpilot_xmldoc->createAttribute('zone');
		$UTMzone->value = $unit_prefs['zone'];
		$snowpilot_Location->appendChild($UTMzone);
	
		//
		// whether Lat long is measure N or S of equator; E or W of 0 degrees
		$nstype = $snowpilot_xmldoc->createAttribute('ns');
		$nstype->value = $unit_prefs['latType'];
		$snowpilot_Location->appendChild($nstype);
	
		$ewtype = $snowpilot_xmldoc->createAttribute('ew');
		$ewtype->value = $unit_prefs['longType'];
		$snowpilot_Location->appendChild($ewtype);
	
		//
		//  East and North values for utm coordtype
		//
		$location_east = $snowpilot_xmldoc->createAttribute('east');
		$location_east->value = $unit_prefs['field_east'];
		$snowpilot_Location->appendChild($location_east);
	
		$location_north = $snowpilot_xmldoc->createAttribute('north');
		$location_north->value = $unit_prefs['field_north'];
		$snowpilot_Location->appendChild($location_north);
	
	
	
		//
		// Latitude
		$latitude = $snowpilot_xmldoc->createAttribute('lat');
		$latitude->value = $unit_prefs['field_latitude'];
		$snowpilot_Location->appendChild($latitude);
		//
		// Longitude
		$longitude = $snowpilot_xmldoc->createAttribute('longitude');
		$longitude->value =  $unit_prefs['field_longitude'];
		$snowpilot_Location->appendChild($longitude);
		//
		// Elevation
		$elevation = $snowpilot_xmldoc->createAttribute('elv');
		$elevation->value = isset($node->field_elevation['und'][0]['value']) ? $node->field_elevation['und'][0]['value'] : '';
		$snowpilot_Location->appendChild($elevation);
		//
		// State
	  $location_state = $snowpilot_xmldoc->createAttribute('state');
		$location_state->value = $unit_prefs['state'];
		$snowpilot_Location->appendChild($location_state);
		//
		// Range
		$location_range = $snowpilot_xmldoc->createAttribute('range');
		$location_range->value = $unit_prefs['range'];
		$snowpilot_Location->appendChild($location_range);
		//
		// Name
		$location_name = $snowpilot_xmldoc->createAttribute('name');
		$location_name->value = $node->title;
		$snowpilot_Location->appendChild($location_name);
	
		//	
		$counter = 1;
	  foreach($all_layers as $x => $layer){
			$snowpilot_Layer = $snowpilot_xmldoc->createElement("Layer"); 
		
			// grain size units
		  $gsu1 = $snowpilot_xmldoc->createAttribute('grainSizeUnits1');
		  $gsu2 = $snowpilot_xmldoc->createAttribute('grainSizeUnits2');
		
			$gsu2->value = $gsu1->value = 'mm';
			$snowpilot_Layer->appendChild($gsu1);
			$snowpilot_Layer->appendChild($gsu2);
			//
			//  grain size
			$gs1 = $snowpilot_xmldoc->createAttribute('grainSize');
			$gs2 = $snowpilot_xmldoc->createAttribute('grainSize1');	
			$gs1->value = isset($layer->field_grain_size['und'][0]['value']) ? $layer->field_grain_size['und'][0]['value'] : '';
			$gs2->value = isset($layer->field_grain_size_max['und'][0]['value']) ? $layer->field_grain_size_max['und'][0]['value'] : '';
			$snowpilot_Layer->appendChild($gs1);
			$snowpilot_Layer->appendChild($gs2);	
			//
			// grain type
			$gt1 = $snowpilot_xmldoc->createAttribute('grainType');
			$gt2 =  $snowpilot_xmldoc->createAttribute('grainType1');
			$gt1->value = isset($layer->field_grain_type['und'][0]['tid']) ? htmlentities(taxonomy_term_load($layer->field_grain_type['und'][0]['tid'])->name ): '';
			$gt2->value = isset($layer->field_grain_type_secondary['und'][0]['tid']) ? htmlentities(taxonomy_term_load($layer->field_grain_type_secondary['und'][0]['tid'])->name) : '';
			$snowpilot_Layer->appendChild($gt1);
			$snowpilot_Layer->appendChild($gt2);
			//
			// hardness
			$hness1 = $snowpilot_xmldoc->createAttribute('hardness1');
			$hness2 = $snowpilot_xmldoc->createAttribute('hardness2');
			$hness1->value = isset($layer->field_hardness['und'][0]['value']) ? $layer->field_hardness['und'][0]['value'] : '';
			$hness2->value = isset($layer->field_hardness2['und'][0]['value']) ? $layer->field_hardness2['und'][0]['value'] : '';
		
			$snowpilot_Layer->appendChild($hness1);
			$snowpilot_Layer->appendChild($hness2);
			//
			// LayerNumber
			$layer_num = $snowpilot_xmldoc->createAttribute('layerNumber');
			$layer_num->value = $counter;
		
			$snowpilot_Layer->appendChild($layer_num);
			//
			// water content
			$waterContent = $snowpilot_xmldoc->createAttribute('waterContent');
			$waterContent->value = isset($layer->field_water_content['und'][0]['value']) ? $layer->field_water_content['und'][0]['value'] : '';
			$snowpilot_Layer->appendChild($waterContent);
		
			//
			//startDepth
			$startDepth = $snowpilot_xmldoc->createAttribute('startDepth');
			$startDepth->value = isset($layer->field_height['und'][0]['value']) ? $layer->field_height['und'][0]['value'] : '';
			$snowpilot_Layer->appendChild($startDepth);
			//
			//endDepth
			$endDepth = $snowpilot_xmldoc->createAttribute('endDepth');
			$endDepth->value = isset($layer->field_bottom_depth['und'][0]['value']) ? $layer->field_bottom_depth['und'][0]['value'] : '';
			$snowpilot_Layer->appendChild($endDepth);
			//
			// multiples ...
			// We make a little array and loop through it so this is easier.
			$multiples = array ('multipleHardness' => 'field_use_multiple_hardnesses' ,
			  'multipleGrainType' => 'field_use_multiple_grain_type',
			  'multipleGrainSize' => 'field_use_multiple_grain_size');
			foreach ( $multiples as $key => $multiple ){
				$multi_val[$multiple] = $snowpilot_xmldoc->createAttribute($key);
				$layer_multiple = $layer->$multiple;
				//dsm($layer_multiple['und']);
				$multi_val[$multiple]->value =  ( isset( $layer_multiple['und'][0]['value'] ) && $layer_multiple['und'][0]['value'] == 1 ) ? 'true' : 'false';
				$snowpilot_Layer->appendChild($multi_val[$multiple]);
			}
		
		
			$snowpilot_PitCore->appendChild($snowpilot_Layer);
			//
			$counter++;
		}
		$ids = array();
		if ( isset( $node->field_test['und'] ) ){
		  foreach ($node->field_test['und'] as $test ){ $ids[] = $test['value']; }
		  $shear_tests = field_collection_item_load_multiple($ids);
	  }
		if ( count($shear_tests) ){
			foreach ( $shear_tests as $shear_test ){
				$snowpilot_ShearTest = $snowpilot_xmldoc->createElement("Shear_Test_Result");
				//
				// code
				$test_code = $snowpilot_xmldoc->createAttribute('code');
				$test_code->value = $shear_test->field_stability_test_type['und'][0]['value'];
				$snowpilot_ShearTest->appendChild($test_code);
				//
				// sdepth
				$sdepth = $snowpilot_xmldoc->createAttribute('sdepth');
				$sdepth->value = isset($shear_test->field_depth['und'][0]['value']) ? $shear_test->field_depth['und'][0]['value'] : '';
				$snowpilot_ShearTest->appendChild($sdepth);
				//
				//
				//depthUnits
				$depthUnits = $snowpilot_xmldoc->createAttribute('depthUnits');
				$depthUnits->value = $unit_prefs['depthUnits'];
				$snowpilot_ShearTest->appendChild($depthUnits);
				//
				// score
				$test_score = $snowpilot_xmldoc->createAttribute('score');
				$test_score->value = isset($shear_test->field_stability_test_score['und'][0]['value']) ? $shear_test->field_stability_test_score['und'][0]['value'] : '';
				$snowpilot_ShearTest->appendChild($test_score);
		
				//
				// ecScore
				$ecScore = $snowpilot_xmldoc->createAttribute('ecScore');
				$ecScore->value = isset($shear_test->field_ec_score['und'][0]['value']) ? $shear_test->field_ec_score['und'][0]['value'] : '';
				$snowpilot_ShearTest->appendChild($ecScore);
		
				//
				// quality
				$shear_quality = $snowpilot_xmldoc->createAttribute('quality');
				$shear_quality->value  = isset($shear_test->field_shear_quality['und'][0]['value']) ? $shear_test->field_shear_quality['und'][0]['value'] : '';
				$snowpilot_ShearTest->appendChild($shear_quality);
		
				//
				// dateSTring
				$dateString = $snowpilot_xmldoc->createAttribute('dateString');
				$dateString->value = 	isset($node->field_date_time['und'][0]['value']) ? date( 'm/d/Y' , strtotime($node->field_date_time['und'][0]['value'])) : '';
				$snowpilot_ShearTest->appendChild($dateString);
		
				//
				// numberOfTaps
				$numTaps = $snowpilot_xmldoc->createAttribute('numberOfTaps');
		
				if ( ($shear_test->field_stability_test_type['und'][0]['value'] == 'ECT')){
				  $numTaps->value = $ecScore->value ;
			  }elseif ($shear_test->field_stability_test_type['und'][0]['value'] == 'CT' ){
					$numTaps->value = isset($shear_test->field_ct_score['und'][0]['value'] ) ? $shear_test->field_ct_score['und'][0]['value']  : '';
				}else{ $numTaps->value = ''; }
				$snowpilot_ShearTest->appendChild($numTaps);
		
		
				// fractureCat
				$fractureCat = $snowpilot_xmldoc->createAttribute('fractureCat');
				$fractureCat->value = $unit_prefs['fractureCat'];
				$snowpilot_ShearTest->appendChild($fractureCat);
		
				//
				// fractureCharacter
				$test_character = $snowpilot_xmldoc->createAttribute('character');
				$test_character->value =  ($unit_prefs['fractureCat'] == 'fracture_character') && isset($shear_test->field_fracture_character['und'][0]['value']) ? $shear_test->field_fracture_character['und'][0]['value'] : '' ;
				$snowpilot_ShearTest->appendChild($test_character);
				//
				// comments
				$comments = $snowpilot_xmldoc->createAttribute('comments');
				$comments->value = isset($shear_test->field_stability_comments['und'][0]['value']) ? $shear_test->field_stability_comments['und'][0]['value'] : '';
		
				// s="ECTP Q1 5 11/30/2014.15:39:6"
				//
				//s
				$date_part = date( 'm/d/Y.H:i:s:0' , strtotime($node->field_date_time['und'][0]['value']));
				$test_s = $snowpilot_xmldoc->createAttribute('s');
				$test_s->value =  $test_score->value.' '.$shear_quality->value.$test_character->value.' '. $sdepth->value. ' ' . $date_part;
				$snowpilot_ShearTest->appendChild($test_s);
				//
				// lengthOfCut
				$lengthOfCut = $snowpilot_xmldoc->createAttribute('lengthOfCut');
				$lengthOfCut->value = isset($shear_test->field_length_of_saw_cut['und'][0]['value']) ? $shear_test->field_length_of_saw_cut['und'][0]['value'] : '' ;
				$snowpilot_ShearTest->appendChild($lengthOfCut);
				//
				// lengthOfColumn
				$lengthOfColumn = $snowpilot_xmldoc->createAttribute('lengthOfColumn');
				$lengthOfColumn->value = isset($shear_test->field_length_of_isolated_col_pst['und'][0]['value']) ? $shear_test->field_length_of_isolated_col_pst['und'][0]['value'] : '' ;
				$snowpilot_ShearTest->appendChild($lengthOfColumn);		
		
				//
				// releaseType
				$releaseType = $snowpilot_xmldoc->createAttribute('releaseType');
				$releaseType->value =  ($shear_test->field_stability_test_type['und'][0]['value'] == 'RB') && isset($shear_test->field_release_type['und'][0]['value']) ? $shear_test->field_release_type['und'][0]['value'] : '' ;
				$snowpilot_ShearTest->appendChild($releaseType);		
		
				//
				// dataCode
				// this is not actually anywhere in the snowpilot data model specs, but needs to be.
				$dataCode = $snowpilot_xmldoc->createAttribute('dataCode');
				$dataCode->value = ($shear_test->field_stability_test_type['und'][0]['value'] == 'PST') && isset($shear_test->field_data_code_pst['und'][0]['value']) ? $shear_test->field_data_code_pst['und'][0]['value'] : '' ;
				$snowpilot_ShearTest->appendChild($dataCode);				
		
				$snowpilot_PitCore->appendChild($snowpilot_ShearTest);
		
			}
		}
		$ids = array();
		$profile = array();
	
		//dsm($node->field_density_profile);
		if ( isset($node->field_density_profile['und']) && (count( $node->field_density_profile['und']) > 0)){
	  	foreach ($node->field_density_profile['und'] as $density ){ $ids[] = $density['value']; }
	  	$densitys = field_collection_item_load_multiple($ids);

		  foreach ( $densitys as $density ){
		    $profile[] = $density->field_depth['und'][0]['value'] . '_' . $density->field_density_top['und'][0]['value'];
	    }
		}

		$snowpilot_Density = $snowpilot_xmldoc->createElement('Density_Profile');
		//
		// profile
		$density_prof = $snowpilot_xmldoc->createAttribute('profile');
		$density_prof->value = implode( '?', $profile );
		$snowpilot_Density->appendChild($density_prof);
	
		//
		// depthUnits
		$depthUnits = $snowpilot_xmldoc->createAttribute('depthUnits');
		$depthUnits->value =  $unit_prefs['depthUnits'];
		$snowpilot_Density->appendChild($depthUnits);
	
		//
		//densityUnits
	
		$densityUnits = $snowpilot_xmldoc->createAttribute('densityUnits');
		$densityUnits->value =  _density_unit_fix($unit_prefs['rhoUnits']);
		$snowpilot_Density->appendChild($densityUnits);
		
		$snowpilot_PitCore->appendChild($snowpilot_Density);
		
	
		$outXML = $snowpilot_xmldoc->saveXML();
		$formatted_xml = new DOMDocument('1.0', 'UTF-8');
		$formatted_xml->preserveWhiteSpace = false;
		$formatted_xml->formatOutput = true;
		$formatted_xml->loadXML($outXML);
		$final_xml = $formatted_xml->saveXML();
		//dsm($final_xml);
		$xml_filehandle = fopen(DRUPAL_ROOT.$xml_filename, 'w');
		$value = fwrite($xml_filehandle, $final_xml );
		fclose($xml_filehandle);
		watchdog('snowpilot', "Snowpit $node->nid fwrite results: ". $value);
		
		dsm($final_xml);
		return $final_xml;
		*/
		dsm($values_list);
	}else{
		watchdog('snowpilot', "Snowpit $node->nid file exists: ". $xml_filename);
		
		$xml_filehandle = fopen(DRUPAL_ROOT.$xml_filename, 'r');
		$xmlvalues = fread($xml_filehandle,8192);
		fclose($xml_filehandle);
		return $xmlvalues;
	}
}

function avscience_query_output(){

	include_once (DRUPAL_ROOT.'/sites/default/db_settings.php' );
	global $user;
		Database::addConnectionInfo('avscience_db', 'default', $test_db );// $avsci_db_info
	
		db_set_active('avscience_db');
	$query = "SELECT LOC_NAME, OBS_DATE, USERNAME, STATE, MTN_RANGE, SERIAL FROM `PIT_TABLE` WHERE SERIAL > 0  ";
	$query_args = array();
	$where_clause = '';
	$output = '';
		
	
	$state = ''; $mtn_range = ''; $obsdatemin = '' ; $obsdatemax = ''; $username = ''; $loc_name = ''; $serial =''; $state_options = ''; $region_options = ''; $test_pit_checked = ''; $affil = ''; $adv_where_query = '';
	
	if (isset( $_GET['STATE']) && $_GET['STATE'] <> ''  ){
	    $where_clause .=  " AND STATE = :STATE " ; $query_args[':STATE'] = $_GET['STATE']; 
	    $state = $_GET['STATE'];
	}
	// States dropdown list
	$unique_states = "SELECT distinct ( STATE ) FROM `PIT_TABLE` ORDER BY length(STATE) , STATE"; 
	$states_list = db_query($unique_states);
	while ( $states = $states_list->fetch() )	{
		$selected = ($states->STATE == $state) ? ' selected' : '';
	  $state_options .=  "<option value ='" . $states->STATE . "'". $selected ."  > ". $states->STATE ."</option>
			" ;
	}


	if (isset( $_GET['MTN_RANGE']) && count( $_GET['MTN_RANGE'] )  ){
	
	    $where_clause .=  " AND ( ";
	    foreach ($_GET['MTN_RANGE'] as $key => $range ){
	    	$where_clause .= " MTN_RANGE = :MTN_RANGE" .  $key." OR" ;
			  $query_args[':MTN_RANGE'.$key ] = $range;
	    }
			$where_clause = substr($where_clause, 0, -3 );
			$where_clause .= " ) ";
	}

	$unique_regions = "SELECT distinct ( MTN_RANGE ) FROM `PIT_TABLE` ORDER BY MTN_RANGE ASC "; 
	$regions_list = db_query($unique_regions);

	while ( $region = $regions_list->fetch() )	{
		$range_selected = (   isset($_GET['MTN_RANGE']) && in_array( $region->MTN_RANGE , $_GET['MTN_RANGE'] ) && isset($_GET['MTN_RANGE'])) ? ' selected' : '';
	  $region_options .=  "<option value ='" . $region->MTN_RANGE . "' ".$range_selected." >".$region->MTN_RANGE."</option>
			"  ;
	}

	if (isset( $_GET['OBS_DATE_MIN']) && $_GET['OBS_DATE_MIN'] <> ''  ){
	    $where_clause .=  " AND OBS_DATE > :OBS_DATE_MIN " ; $query_args[':OBS_DATE_MIN'] = $_GET['OBS_DATE_MIN'];
			$obsdatemin = $_GET['OBS_DATE_MIN'];
	}


	if (isset( $_GET['OBS_DATE_MAX']) && $_GET['OBS_DATE_MAX'] <> ''  ){
	    $where_clause .=  " AND OBS_DATE < :OBS_DATE_MAX " ; $query_args[':OBS_DATE_MAX'] = $_GET['OBS_DATE_MAX'];
			$obsdatemax = $_GET['OBS_DATE_MAX'];
	}


	if (isset( $_GET['USERNAME']) && $_GET['USERNAME'] <> ''  ){
	    $where_clause .=  " AND USERNAME LIKE :USERNAME " ;
			$query_args[':USERNAME'] = $username = '%'.$_GET['USERNAME'].'%';
	}


	if (isset( $_GET['LOC_NAME']) && $_GET['LOC_NAME'] <> ''  ){
	    $where_clause .=  " AND LOC_NAME LIKE :LOC_NAME " ;
			$query_args[':LOC_NAME'] = $loc_name = $_GET['LOC_NAME'];
	}

	if ( !isset($_GET['testpit']) || $_GET['testpit'] <> '1'  ){
	    $where_clause .=  " AND TEST_PIT != 1 " ;
			
	}else{
		$test_pit_checked = ' checked';
	}

	if (isset( $_GET['SERIAL']) && $_GET['SERIAL'] <> ''  ){
	    $where_clause .=  " AND SERIAL = :SERIAL" ;
			$query_args[':SERIAL'] = $serial = $_GET['SERIAL'];
	}

	if (isset( $_GET['AFFIL']) && $_GET['AFFIL'] <> ''  ){
	    $where_clause .=  " AND PIT_DATA LIKE :AFFIL" ;
			$query_args[':AFFIL'] = "%affil~1" .  $_GET['AFFIL']."%" ; $affil = $_GET['AFFIL'];
	}

	if ( isset( $_GET['ADV_WHERE_QUERY']) && $_GET['ADV_WHERE_QUERY'] <>''){
		$where_clause .=  " AND :ADV_WHERE_QUERY ";
		$query_args[':ADV_WHERE_QUERY'] = $adv_where_query = $_GET['ADV_WHERE_QUERY'];
	}

	$output .='
	<div class = "view-snowpit-list">
		<div class= "views-exposed-form">
	<form action = "/avscience-query" method = "get" class = "form-item">
	<div class = "geo-selection">
		  <div style = "display: inline-block; width : 160px; vertical-align: top;">
		  	Location/Snowpit Name<br /><input type = "text" name = "LOC_NAME" value= "' .$loc_name. '" />
	  		<div class = "description">Uses \'contains\'. You need only partial match of the name.</div>
	  	</div>
	    <div style = "display: inline-block; width : 160px; vertical-align: top;">
	  	State/Province/Country<br />
		  <select type = "select" name = "STATE" id = "STATE" value ="'. $state .'">
	  	  '.$state_options.'
	    </select>
	    </div>
		  <div style = "display: inline-block;" >
		  	Range/Region: <br/>
	  	<select name ="MTN_RANGE[]" id = "MTN_RANGE" multiple  style = "height: 140px;">
		  	' .$region_options. '
		  </select>
	    </div>
			<div class = "date-selection" style = "display: inline-block; vertical-align: top; " >
				Observation Date<br />
			  <div style ="display: inline-block;">minimum: <br /><input type = "date" name = "OBS_DATE_MIN" value= "' .$obsdatemin .'" /> </div>
			  <div style ="display: inline-block;">maximum: <br /><input type = "date" name = "OBS_DATE_MAX" value= "'. $obsdatemax .'" /> </div>
			</div>
			<div class = "users-orgs-selection"  style = "display: inline-block; vertical-align: top;" >
				<div >Username \'contains\': <br /><input type = "text" name = "USERNAME" value= "'. $username. '" /> </div>
			  <div >Affiliation \'contains\' : <br /><input type = "text" name = "AFFIL" value= "'. $affil. '" /> </div>
			</div>
	  </div>
		<div class = "researcher-query">
	';		
	
			if ( in_array('administrator' , $user->roles ) || in_array('researcher' , $user->roles ) ){
			 $output .= ' 	<div style ="display: inline-block;">Advanced WHERE query : <input type = "text" name = "ADV_WHERE_QUERY" value= "' . $adv_where_query . '" /></div>';
			}
$output .=
		'</div>
		<div class = "tests-button">
			<div style ="display: inline-block;"><input type = "submit" name = "submit" value = "Get Pits" /></div>
		  <div style ="display: inline-block;">Include test Pits?<input type = "checkbox" name = "testpit" value = "1" '. $test_pit_checked .'/></div>
	  </div>
	<br />

	</form>
	</div>';

	  $per_page = 10;
		$where_clause .= " AND SHARE = '1' ";

		//
		$page_num = isset ($_GET['page']) ? $_GET['page'] : '0' ;
		$query = "SELECT LOC_NAME, OBS_DATE, USERNAME, STATE, MTN_RANGE, SERIAL, LOCAL_SERIAL FROM `PIT_TABLE` WHERE SERIAL > 0  ". $where_clause . " ORDER BY OBS_DATE DESC LIMIT " . $page_num * $per_page ."," . $per_page;
		
		$query2 = "SELECT count(SERIAL) FROM `PIT_TABLE` WHERE SERIAL > 0  ". $where_clause ;

	  $results = db_query($query,$query_args);
		$count_results = db_query($query2,$query_args)->fetchField(); 
		db_set_active();
	
		//$records = array();
		$rows = array();
	  while ( $record = $results->fetch() )	{
			$x = 1;
			$pre_img_url = '/sites/default/files/avscience-profiles/graph-serial-'.$record->SERIAL. '.jpg';
			$layers_image = '/sites/default/files/avscience-profiles/layers/layers-serial-'.$record->SERIAL. '.jpg';
		
			if( !file_exists( DRUPAL_ROOT.'/sites/default/files/avscience-profiles/layers/layers-serial-'.$record->SERIAL. '.jpg' )){
				if( !file_exists( DRUPAL_ROOT.'/sites/default/files/avscience-profiles/graph-serial-'.$record->SERIAL. '.jpg' )){
				
					$kc_img_src = file_get_contents( "http://www.kahrlconsulting.com:8084/avscience/PitServlet?TYPE=PITIMAGE&SERIAL=".$record->SERIAL );
					$local_image = fopen( DRUPAL_ROOT.'/sites/default/files/avscience-profiles/graph-serial-'.$record->SERIAL. '.jpg' , 'w');
					fwrite($local_image, $kc_img_src);
					fclose($local_image);
					sleep(1);
				}
				$pre_img = imagecreatefromjpeg( DRUPAL_ROOT.$pre_img_url);
				$new_img = imagecreatetruecolor(466,613);
				$result = imagecopy($new_img, $pre_img, 0,0, 14,140,466,613 );
						
				imagejpeg( $new_img , DRUPAL_ROOT. $layers_image );
			
			}
		
			//
			//
			//  
			  $links = array();
			  $links[] = array('title' => t('JPG'), 'href' => '/sites/default/files/avscience-profiles/graph-serial-'. $record->SERIAL .'.jpg');
			  $links[] = array('title' => t('SnowPilot XML'), 'href' => '/sites/default/files/snowpit-xml/node-'.$record->SERIAL. '.xml');
			
				$this_item = '
	              <div class = "item-wrapper">
				  <div class="views-field views-field-title">' . $record->LOC_NAME . '</div>  
				  <div class="field-content views-graph-image"><a href="' . $pre_img_url  . '"><img src="'. $layers_image .'"></a></div>    
				  <div class="field-content views-field-field-date-time"><span class="views-snowpit-region-range">'.$record->STATE . ' » '.$record->MTN_RANGE . '</span>
				<br>
				<span class="views-user-name">'. $record->USERNAME . '</span>
				<br>
				<span class="date-display-single" property="dc:date"  >'. $record->OBS_DATE .' </span>
				<span>'. theme('ctools_dropdown', array('title' => t('Download Snowpit'), 'links' => $links)) .'</span>
				</div> </div>';
		
		
		
				$rows[$x][1] .= $this_item ;
		
		
			$img_url = '<img src = "' .$layers_image . '" /> ';
 		
	  }


	$header = array( '' , '' , '',  '' , '' );
	$attributes = array();  
	$caption = 'Snowpit query results';
	$colgroups = array();
	$sticky = FALSE;
	$empty = "No Rows!";

															//
															//  Set up the pager
															// 
															// Initialize the pager
															$current_page = pager_default_initialize($count_results, $per_page);
															// Display the counts per page
															$display_per_page = $per_page < $count_results ? $per_page : $count_results;
															$begining = $per_page * $page_num + 1; $ending = $per_page * $page_num + $per_page;
															$output .= t('<h2>Showing results '. $begining  . ' through ' . $ending  . ' of total: '. $count_results.'</h2>');
															// Split your list into page sized chunks
															$chunks = array_chunk($rows, $per_page, TRUE);
															// Show the appropriate items from the list
															$output .= '<div class = "view-content">' . theme('table', array('header' => $header, 'rows' => $rows /*$chunks[$current_page]*/ ));
															// Show the pager
															$output .= theme('pager', array('quantity',$count_results)). '</div></div>';
				
	
														
														$output .= avscience_xml_link('avscience-query-feed.xml') . '</div>' ;
														
															return $output;
		
}

function snowpilot_pit_xml_doc($array_of_nids){
	$data ='';
	foreach ( $array_of_nids as $nid){
		$node = node_load($nid);
		$data .= substr(snowpilot_node_write_pitxml($node), 39);
	}
  return '<?xml version="1.0" encoding="UTF-8"?>
<Pit_Data>
'.$data.'
</Pit_Data>';

}

function avscience_pit_xml_doc($serials ){
	include_once (DRUPAL_ROOT.'/sites/default/db_settings.php' );
	global $user;
	Database::addConnectionInfo('avscience_db', 'default', $test_db );// $avsci_db_info
	$data = '';
	db_set_active('avscience_db');
	foreach ( $serials as $serial ){
	  $query = "SELECT PIT_XML FROM `PIT_TABLE` WHERE SERIAL = :SERIAL   " ;
  	$results = db_query($query , array( ':SERIAL' =>  $serial) ) ; 
    while ( $record = $results->fetch() )	{
		  $data .= substr($record->PIT_XML, 39);	
	  }
	}
	
	db_set_active();
  return '<?xml version="1.0" encoding="UTF-8"?>'.$data;
}

function snowpilot_query_output(){
	global $user;
	
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
	  ->entityCondition('bundle', 'snowpit_profile')
	  ->propertyCondition('status', NODE_PUBLISHED);
	
  // See the comment about != NULL above.
	if( isset( $_GET['STATE']) && count($_GET['STATE']) > 0){
		$state = $_GET['STATE'];
    $query->fieldCondition('field_loaction', 'tid', $state, 'IN');
	}
  $query->addTag('debug');
	
  $state_options = '<option value ="">Any</option>';
	
	$regions_list = get_optgroup_by_taxonomy('geographical_location');
	
	foreach( $regions_list as $key=>$region){
		$selected = '';
		$state_term = taxonomy_get_term_by_name($key);
		
		foreach($state_term as $state_key=>$array_values ){ 
			if ( $state == $state_key) $selected = ' selected = "selected" ';
			$state_options .= '<optgroup label ="'.$key .'" />';
			if ( !count ( $region )){
	  	  $state_options .= '<option value ="'.$state_key. '" '. $selected .'>'.$key.'</option>';
		  }
	  }
		foreach ( $region as $key2=>$location){
			$selected = '';
			
			if ( in_array( $key2, $state )) $selected = ' selected = "selected" ';
			
			$state_options .= '<option value ="'.$key2.'" '. $selected .'>'.$location.'</option>';
		}
	}
	

	


	if (isset( $_GET['OBS_DATE_MIN']) && $_GET['OBS_DATE_MIN'] <> ''  ){
			$obsdatemin = $_GET['OBS_DATE_MIN'];
		  $query->fieldCondition('field_date_time', 'value', $obsdatemin, '>');
			
	}


	if (isset( $_GET['OBS_DATE_MAX']) && $_GET['OBS_DATE_MAX'] <> ''  ){
			$obsdatemax = $_GET['OBS_DATE_MAX'];
		  $query->fieldCondition('field_date_time', 'value', $obsdatemax, '<');
	}


	if (isset( $_GET['USERNAME']) && $_GET['USERNAME'] <> ''  ){
			$username = $_GET['USERNAME'];
			
		  $query->propertyCondition('uid',  $username , '='); // Equal to 
	}


	if (isset( $_GET['LOC_NAME']) && $_GET['LOC_NAME'] <> ''  ){
			$loc_name = $_GET['LOC_NAME'];
			$query->propertyCondition('title', '%'.$loc_name.'%' , 'like');
	}

	if ( !isset($_GET['testpit']) || $_GET['testpit'] <> '1'  ){
		$query->fieldCondition('field_practice_pit', 'value', '0' , '=');
		
	}elseif ( isset($_GET['testpit']) && $_GET['testpit'] == '1') {
		$test_pit_checked = ' checked';
	}

	if (isset( $_GET['AFFIL']) && $_GET['AFFIL'] <> ''  ){
			$affil = $_GET['AFFIL'];
			$query->fieldCondition('field_org_ownership', 'tid', $affil  ,'=');
	}
	
	$affil_list = get_optgroup_by_taxonomy('professional_affiliation');
	$affil_options = '<option value = "">Any</option>';
	foreach( $affil_list as $affil_key=>$affil_group){
		$selected = '';
		$affil_group_term = taxonomy_get_term_by_name($affil_key);
		
		foreach($affil_group_term as $affil_key2=>$affil_array_values ){ 
			if ( $affil == $affil_key) $selected = ' selected = "selected" ';
			$affil_options .= '<optgroup label ="'.$affil_key .'" />';
			if ( !count ( $affil_array_values )){
	  	  $affil_options .= '<option value ="'.$affil_key. '" '. $selected .'>'.$affil_key.'</option>';
		  }
	  }
		foreach ( $affil_group as $affil_key3=>$minor_affil){
			$selected = '';
			
			if ( $affil == $affil_key3) $selected = ' selected = "selected" ';
			
			$affil_options .= '<option value ="'.$affil_key3.'" '. $selected .'>'.$minor_affil.'</option>';
		}
	}
	
	$per_page = (isset($_GET['per_page']) && $_GET['per_page'] > 0) ? $_GET['per_page'] : 10 ; // default per_page is 10
  if ( $per_page > 100 ) $per_page = 100; // limiting to select 100 items
	$page_num = isset ($_GET['page']) ? $_GET['page'] : '0' ;
	
	
	$output .='
	<div class = "view-snowpit-list">
		<div class= "views-exposed-form">
	<form action = "/snowpilot-query" method = "get" class = "form-item">
	<div class = "geo-selection">
		  <div style = "display: inline-block; width : 160px; vertical-align: top;">
		  	Location/Snowpit Name<br /><input type = "text" name = "LOC_NAME" value= "' .$loc_name. '" />
	  		<div class = "description">Uses \'contains\'. You need only partial match of the name.</div>
	  	</div>
	    <div style = "display: inline-block; width : 160px; vertical-align: top;">
	  	State/Province/Country<br />
		  <select type = "select" name = "STATE[]" id = "STATE" multiple = "multiple" >
	  	  '.$state_options.'
	    </select>
	    </div>

			<div class = "date-selection" style = "display: inline-block; vertical-align: top; " >
				Observation Date<br />
			  <div style ="display: inline-block;">minimum: <br /><input type = "date" name = "OBS_DATE_MIN" value= "' .$obsdatemin .'" /> </div>
			  <div style ="display: inline-block;">maximum: <br /><input type = "date" name = "OBS_DATE_MAX" value= "'. $obsdatemax .'" /> </div>
			</div>
			<div class = "users-orgs-selection"  style = "display: inline-block; vertical-align: top;" >
				<div >User ID: <br /><input type = "text" name = "USERNAME" value= "'. $username. '" /> </div> 
			  <div ><select name = "AFFIL" id = "AFFIL" /> 
				'. $affil_options . '
				</select></div>
				
			</div>
	  </div>

		<div class = "tests-button">
			<div style ="display: inline-block; margin-right: 25px;">
			Number of records to return: <select type = "select" name = "per_page" value = "10">';
			
			$num_options = array(1,5,10,50,100);
			foreach ( $num_options as $num_option){
				$selected = ($per_page == $num_option) ? ' selected = "selected" ' : '' ;
				$output .= '<option value  = "'.$num_option.'" '. $selected .'>'. $num_option .'</option>';
				
			}

				
$output .='</select></div>
		  <div style ="display: inline-block; margin-right: 25px;">Include test Pits?<input type = "checkbox" name = "testpit" value = "1" '. $test_pit_checked .'/></div>
			<div style ="display: inline-block;"><input type = "submit" name = "submit" value = "Get Pits" /></div>
			
	  </div>
	<br />

	</form>
	</div>';

	  $query->fieldCondition('field_snowpit_visibility', 'value', 'public' ,'=');
	//

    $query_count = $query;

		$query->range($per_page * $page_num, $per_page);
		$query->fieldOrderBy('field_date_time', 'value', 'DESC' );


		$result = $query->execute();
		
		$query_count->range(0,100000);
		$count_results = $query_count->count()->execute(); 
		
		if (isset($result['node'])) {
		  $snowpit_nids = array_keys($result['node']);
		  $snowpits = entity_load('node', $snowpit_nids);
		} 
	

		$rows = array();

		
	  foreach ( $snowpits as $snowpit )	{

		 // $records[] = $record;
	 

			$x = 1;
			$pre_img_url = '/sites/default/files/snowpit-profiles/graph-'.$snowpit->nid. '.jpg';
			$layers_image = '/sites/default/files/snowpit-profiles/layers-'.$snowpit->nid. '.png';
		
			  $links = array();
			  $links[] = array('title' => t('JPG'), 'href' => '/sites/default/files/snowpit-profiles/graph-'. $snowpit->nid .'.jpg');
			  $links[] = array('title' => t('SnowPilot XML'), 'href' => 'snowpit/' . $snowpit->nid. '/download/xml');
			
				$this_item = '
	              <div class = "item-wrapper">
				  <div class="views-field views-field-title">' . $snowpit->title . '</div>  
				  <div class="field-content views-graph-image"><a href="/node/' . $snowpit->nid  . '"><img src="'. $layers_image .'"></a></div>    
				  <div class="field-content views-field-field-date-time"><span class="views-snowpit-region-range">'.
					taxonomy_term_load($snowpit->field_loaction['und'][0]['tid'])->name . " >> ".taxonomy_term_load($snowpit->field_loaction['und'][1]['tid'])->name
					.'</span>
				<br>
				<span class="views-user-name">'. $snowpit->name . '</span>
				<br>
				<span class="date-display-single"  >'. $snowpit->field_date_time['und'][0]['value'] .' </span>
				<span>'. theme('ctools_dropdown', array('title' => t('Download Snowpit'), 'links' => $links)) .'</span>
				</div> </div>';

				$rows[$x][1] .= $this_item ;
		
		
			$img_url = '<img src = "' .$layers_image . '" /> ';
    
		
	  }

	$header = array( '' , '' , '',  '' , '' );
	$attributes = array();  
	$caption = 'Snowpit query results';
	$colgroups = array();
	$sticky = FALSE;
	$empty = "No Rows!";

															//  Set up the pager
															// 
															// Initialize the pager
															$current_page = pager_default_initialize($count_results, $per_page);
															// Split your list into page sized chunks
															$chunks = array_chunk($rows, $per_page, TRUE);
															// Show the appropriate items from the list
															$output .= '<div class = "view-content">' . theme('table', array('header' => $header, 'rows' => $rows /*$chunks[$current_page]*/ ));
															// Show the pager
															$output .= theme('pager', array('quantity',$count_results)). '</div></div>';
				
															$display_per_page = $per_page < $count_results ? $per_page : $count_results;
															$begining = $per_page * $page_num + 1; $ending = $per_page * $page_num + $per_page < $count_results ? $per_page * $page_num + $per_page : $count_results;
															$output .= t('<h2>Showing results '. $begining  . ' through ' . $ending  . ' of total: '. $count_results.'</h2>');
														
														  $output .= avscience_xml_link('snowpilot-query-feed.xml') . '</div>';
														
														 return $output;
		
}

function  avscience_xml_link($url)  {
	$query_array = array();
	unset($_GET['q']);
	unset($_GET['page']);
	
		foreach ($_GET as $key => $var ){
		  if ( is_array($var)){ 
				
				foreach( $var as $ind_region){
					$query_array[] = $key.'[]='.$ind_region;
				}
			}else{
			  $query_array[] = $key.'='. $var ;
      }
		}
	$query_string = '?' . implode($query_array , '&' );
	return  '<div style = "text-align:center;"><a href ="/'.$url.$query_string.'" style ="color: #00f;"><img src="/misc/feed.png"  /> XML feed link</a>';
}
	
function snowpilot_query_xml(){
	
	header('Content-type: application/xml');
  //header('Content-Disposition: attachment; filename="query-results.xml"');
	
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
	  ->entityCondition('bundle', 'snowpit_profile')
	  ->propertyCondition('status', NODE_PUBLISHED);
	if( isset( $_GET['STATE']) && count($_GET['STATE'] ) > 0 ){
		$state = $_GET['STATE'];
		//dsm($state);
    $query->fieldCondition('field_loaction', 'tid', $state, 'IN');
	}

	if (isset( $_GET['OBS_DATE_MIN']) && $_GET['OBS_DATE_MIN'] <> ''  ){
			$obsdatemin = $_GET['OBS_DATE_MIN'];
		  $query->fieldCondition('field_date_time', 'value', $obsdatemin, '>');
			
	}


	if (isset( $_GET['OBS_DATE_MAX']) && $_GET['OBS_DATE_MAX'] <> ''  ){
			$obsdatemax = $_GET['OBS_DATE_MAX'];
		  $query->fieldCondition('field_date_time', 'value', $obsdatemax, '<');
	}


	if (isset( $_GET['USERNAME']) && $_GET['USERNAME'] <> ''  ){
			$username = $_GET['USERNAME'];
			
		  $query->propertyCondition('uid', $username , '='); // Equal to "contains"
	}


	if (isset( $_GET['LOC_NAME']) && $_GET['LOC_NAME'] <> ''  ){
			$loc_name = $_GET['LOC_NAME'];
			$query->propertyCondition('title', '%'.$loc_name.'%' , 'like');
	}

	if ( !isset($_GET['testpit']) || $_GET['testpit'] <> '1'  ){
		$query->fieldCondition('field_practice_pit', 'value', '0' , '=');
		
	}elseif ( isset($_GET['testpit']) && $_GET['testpit'] == '1') {
		$test_pit_checked = ' checked';
	}

	if (isset( $_GET['AFFIL']) && $_GET['AFFIL'] <> ''  ){
			$affil = $_GET['AFFIL'];
			$query->fieldCondition('field_org_ownership', 'tid', $affil  ,'=');
	}
	$query->fieldCondition('field_snowpit_visibility', 'value', 'public' ,'=');
	
	$per_page = (isset($_GET['per_page']) && $_GET['per_page'] > 0) ? $_GET['per_page'] : 10 ;
	if ( $per_page > 100 ) $per_page = 100; // limiting to select 100 items
	
	$page_num = isset ($_GET['page']) ? $_GET['page'] : '0' ;

	$query->range($per_page * $page_num, $per_page);
	$query->fieldOrderBy('field_date_time', 'value', 'DESC' );

  $ids = array();
	$result = $query->execute();

//dsm( $query_count->__toString() );
	
	if (isset($result['node'])) {
	  $snowpit_nids = array_keys($result['node']);
		//dsm(snowpilot_pit_xml_doc($snowpit_nids ));
	  $output =  snowpilot_pit_xml_doc($snowpit_nids );
		//dsm($output);
		print_r( $output );
		exit();
		return ;
	} 
	return "no data";
}

function avscience_query_xml(){
	header('Content-type: application/xml');
  //header('Content-Disposition: attachment; filename="avscience-query-results.xml"');
	
	include_once (DRUPAL_ROOT.'/sites/default/db_settings.php' );
	global $user;
		Database::addConnectionInfo('avscience_db', 'default', $test_db );// $avsci_db_info
	
		db_set_active('avscience_db');
	$query = "SELECT LOC_NAME, OBS_DATE, USERNAME, STATE, MTN_RANGE, SERIAL FROM `PIT_TABLE` WHERE SERIAL > 0  ";
	$query_args = array();
	$where_clause = '';
	$output = '';
		
	
	$state = ''; $mtn_range = ''; $obsdatemin = '' ; $obsdatemax = ''; $username = ''; $loc_name = ''; $serial =''; $state_options = ''; $region_options = ''; $test_pit_checked = ''; $affil = ''; $adv_where_query = '';
	
	if (isset( $_GET['STATE']) && $_GET['STATE'] <> ''  ){
	    $where_clause .=  " AND STATE = :STATE " ; $query_args[':STATE'] = $_GET['STATE']; 
	    $state = $_GET['STATE'];
	}
	// States dropdown list
	$unique_states = "SELECT distinct ( STATE ) FROM `PIT_TABLE` ORDER BY length(STATE) , STATE"; 
	$states_list = db_query($unique_states);
	while ( $states = $states_list->fetch() )	{
		$selected = ($states->STATE == $state) ? ' selected' : '';
	  $state_options .=  "<option value ='" . $states->STATE . "'". $selected ."  > ". $states->STATE ."</option>
			" ;
	}


	if (isset( $_GET['MTN_RANGE']) && count( $_GET['MTN_RANGE'] )  ){
	
	    $where_clause .=  " AND ( ";
	    foreach ($_GET['MTN_RANGE'] as $key => $range ){
	    	$where_clause .= " MTN_RANGE = :MTN_RANGE" .  $key." OR" ;
			  $query_args[':MTN_RANGE'.$key ] = $range;
	    }
			$where_clause = substr($where_clause, 0, -3 );
			$where_clause .= " ) ";
	}

	$unique_regions = "SELECT distinct ( MTN_RANGE ) FROM `PIT_TABLE` ORDER BY MTN_RANGE ASC "; 
	$regions_list = db_query($unique_regions);

	while ( $region = $regions_list->fetch() )	{
		$range_selected = (   isset($_GET['MTN_RANGE']) && in_array( $region->MTN_RANGE , $_GET['MTN_RANGE'] ) && isset($_GET['MTN_RANGE'])) ? ' selected' : '';
	  $region_options .=  "<option value ='" . $region->MTN_RANGE . "' ".$range_selected." >".$region->MTN_RANGE."</option>
			"  ;
	}

	if (isset( $_GET['OBS_DATE_MIN']) && $_GET['OBS_DATE_MIN'] <> ''  ){
	    $where_clause .=  " AND OBS_DATE > :OBS_DATE_MIN " ; $query_args[':OBS_DATE_MIN'] = $_GET['OBS_DATE_MIN'];
			$obsdatemin = $_GET['OBS_DATE_MIN'];
	}


	if (isset( $_GET['OBS_DATE_MAX']) && $_GET['OBS_DATE_MAX'] <> ''  ){
	    $where_clause .=  " AND OBS_DATE < :OBS_DATE_MAX " ; $query_args[':OBS_DATE_MAX'] = $_GET['OBS_DATE_MAX'];
			$obsdatemax = $_GET['OBS_DATE_MAX'];
	}


	if (isset( $_GET['USERNAME']) && $_GET['USERNAME'] <> ''  ){
	    $where_clause .=  " AND USERNAME LIKE :USERNAME " ;
			$query_args[':USERNAME'] = $username = '%'.$_GET['USERNAME'].'%';
	}


	if (isset( $_GET['LOC_NAME']) && $_GET['LOC_NAME'] <> ''  ){
	    $where_clause .=  " AND LOC_NAME LIKE :LOC_NAME " ;
			$query_args[':LOC_NAME'] = $loc_name = $_GET['LOC_NAME'];
	}

	if ( !isset($_GET['testpit']) || $_GET['testpit'] <> '1'  ){
	    $where_clause .=  " AND TEST_PIT != 1 " ;
			
	}else{
		$test_pit_checked = ' checked';
	}

	if (isset( $_GET['SERIAL']) && $_GET['SERIAL'] <> ''  ){
	    $where_clause .=  " AND SERIAL = :SERIAL" ;
			$query_args[':SERIAL'] = $serial = $_GET['SERIAL'];
	}

	if (isset( $_GET['AFFIL']) && $_GET['AFFIL'] <> ''  ){
	    $where_clause .=  " AND PIT_DATA LIKE :AFFIL" ;
			$query_args[':AFFIL'] = "%affil~1" .  $_GET['AFFIL']."%" ; $affil = $_GET['AFFIL'];
	}

	if ( isset( $_GET['ADV_WHERE_QUERY']) && $_GET['ADV_WHERE_QUERY'] <>''){
		$where_clause .=  " AND :ADV_WHERE_QUERY ";
		$query_args[':ADV_WHERE_QUERY'] = $adv_where_query = $_GET['ADV_WHERE_QUERY'];
	}
	
	$per_page = (isset($_GET['per_page']) && $_GET['per_page'] > 0) ? $_GET['per_page'] : 10 ;
	if ( $per_page > 100 ) $per_page = 100; // limiting to select 100 items

		$where_clause .= " AND SHARE = '1' ";

		//
		$page_num = isset ($_GET['page']) ? $_GET['page'] : '0' ;
		$query = "SELECT LOC_NAME, OBS_DATE, USERNAME, STATE, MTN_RANGE, SERIAL FROM `PIT_TABLE` WHERE SERIAL > 0  ". $where_clause . " ORDER BY OBS_DATE DESC LIMIT " . $page_num * $per_page ."," . $per_page;
		
		$query2 = "SELECT count(SERIAL) FROM `PIT_TABLE` WHERE SERIAL > 0  ". $where_clause ;

	  $results = db_query($query,$query_args);
		$count_results = db_query($query2,$query_args)->fetchField(); 
		db_set_active();
	
		//$records = array();
		$rows = array();
	  while ( $record = $results->fetch() )	{
	  	$serials[] = $record->SERIAL;			
	  }
	 print_r(avscience_pit_xml_doc($serials ));
	 exit();
	return ;
}	

