<?php

include_once('includes/populate_XML_field.php');
include_once('includes/populate_pit_fields.php');
include_once( DRUPAL_ROOT . '/sites/all/libraries/ForceUTF8/Encoding.php');

use \ForceUTF8\Encoding;

error_reporting(E_ALL);




function avscience_connect_menu(){

	$items['snowpilot/avscience_connect'] = array(
		'title' => 'Review differences between the kc and live avscience dbs',
		'page callback' => array('snowpilot_connect_page'),
		//'page arguments' => array('snowpilot_connect_form'),
		'access callback' =>  'snowpilot_user_has_role',
		'access arguments' => 'administrator',
		'type' => MENU_CALLBACK,		
	);
	$items['snowpilot-query-feed.xml'] = array(
		'title' => 'query feed page',
		'page callback' => 'snowpilot_query_xml',
		'access callback' => TRUE, //'snowpilot_user_has_role',
	//	'access arguments' => array('administrator', 'researcher','anonymous', 'authenticated'),
		'type' => MENU_CALLBACK,	
	);
	$items['avscience-query-feed.xml'] = array(
		'title' => 'avscience query feed page',
		'page callback' => 'avscience_query_xml',
		'access callback' => 'snowpilot_user_has_role',
		'access arguments' => array('administrator', 'researcher'),
		'type' => MENU_CALLBACK,	
	);
	$items['avscience-query'] = array(
		'title' => 'Advanced Snowpit query page',
		'page callback' => array('avscience_query_page'),
		'access callback' => 'snowpilot_user_has_role',
		'access arguments' => array('administrator', 'researcher'),
		'type' => MENU_NORMAL_ITEM,	
	);
	$items['snowpilot-query'] = array(
		'title' => 'Recent Online Snowpits query page',
		'page callback' => array('snowpilot_query_page'),
		'access callback' => TRUE, //'snowpilot_user_has_role',
	//	'access arguments' => array('researcher', 'administrator','anonymous', 'authenticated'),
		'type' => MENU_NORMAL_ITEM,	
	);
	
	return $items;
}

function avscience_query_title(){
	return "Avscience Query MegaPage";
}

function snowpilot_query_page(){
	global $user;
	$account = user_load($user->uid);
	
//	if ( !(user_has_role( 3, $account )) && !(user_has_role( 5, $account ) )){ 
//		return MENU_ACCESS_DENIED;
//	}
	drupal_set_title('Online Snowpits query page');
	$output = 'This page is intended for snow scientists to query the snowpits that have been added to the online database. 
		This page does not query for snowpits entered via the installed application, for that go to the <a href ="/avscience-query">AvScience Query page</a> '.
	'<p>After finding parameters acceptable for your uses, you may use the XML Feed link at the bottom of this page to subscribe to a feed.';
	
	$form_output = drupal_get_form('snowpilot_query_form');
	$output .= drupal_render($form_output);
	return $output;
	
	
}

function avscience_query_page(){
	global $user;
	$account = user_load($user->uid);
	
	if ( !(user_has_role( 3, $account )) && !(user_has_role( 5, $account ) )){ 
		return MENU_ACCESS_DENIED;
	}
	$output = avscience_query_output();
	return t($output);
}






function snowpilot_connect_page (){
	global $user;
	$account = user_load($user->uid);
	
	if ( !(user_has_role( 3, $account ))){ return MENU_ACCESS_DENIED ;}
	$output = 'Introductory text';
	$new_pits_list = array();
	$new_pits_list = snowpilot_avscience_fetch_new_pits();
	dsm($new_pits_list);

	
	//dsm(drupal_get_form(snowpilot_connect_form($form, $form_state)));
	$default = implode( array_keys($new_pits_list['new_pits'] ), ',');
	$form_output = drupal_get_form('snowpilot_connect_form',$default);
	$output .= drupal_render($form_output);
	return $output;
}

function snowpilot_connect_form($form, &$form_state, $default){
	$form['snowpilot_connect_single'] = array(
		'#type' => 'textfield',
		'#size' => 120,
		'#title' => t('SERIAL of snowpit to convert'  ),
		'#description' => t('A comma separated list of SERIAL IDs to convert. Is automatically populated with this from diff between last week\'s avscience db and this week.' ),	
		'#weight' => '15',
		'#default_value' => $default,
		'#required' => TRUE,
		'#maxlength' => 8000,
	);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Convert Snowpits',
		'#weight' => '25',
	);
	
	return $form;
}


function snowpilot_connect_form_submit($form, &$form_state){
	error_reporting(E_ALL);
	$serial_ids = $form_state['values']['snowpilot_connect_single'];
			watchdog('avscience_connect', "Avscience connect form submission.".var_export($form_state['values']['snowpilot_connect_single'], TRUE));
			snowpilot_connect_convert_multi($serial_ids);
	return $form;
}

function avscience_connect_form_alter($form, &$form_state, $form_id){
	if ( $form_id == 'snowpilot_connect_single'){
		
	}
		return $form;
}

function snowpilot_connect_convert_multi($serial_ids){
  include_once(DRUPAL_ROOT . '/sites/default/avscience_connect_db_settings');

	$query1 = "SELECT * FROM PIT_TABLE WHERE SERIAL IN (".$serial_ids.") ";
	$new_pits = $current_snowpits_link->query($query1);
	while ( $new_pit = $new_pits->fetch_array(MYSQLI_ASSOC) ){
		$result_codes = array();
		$critical = FALSE;
		unset($new_pit['PIT_DATA']);
		unset($new_pit['RANGE']);
		$keys = array_keys($new_pit);
		$keys_string = "(".implode(",", $keys )  . ")";

		$values_string = "('" . implode("','", $new_pit ). "')";
		$query2 = "INSERT INTO PIT_TABLE ".$keys_string." VALUES ".$values_string;
		if ( $snowpilot_avscience->query($query2) ){;
		  watchdog('avscience_connect', "Successfully added: ".$new_pit['SERIAL'] . " to the avscience db.");
		}else{
		  watchdog('avscience_connect', "Unable to add: ".$new_pit['SERIAL'] . " to the avscience db.", array() , WATCHDOG_WARNING);
			$critical = TRUE;
			$result_codes[] = array( 'continue' => TRUE, 'first' => $new_pit['SERIAL'].' could not be added to the avscience db.: '.$query2);
		}
// 		//		We keep adding the other functions to populate avscience here:

		if ( !$critical  ){		
			$xml_result_code = snowpilot_avscience_populate_xml($new_pit['SERIAL']);
			if ( $xml_result_code['continue'] ) {
				$result_codes[] = $xml_result_code;
				watchdog('avscience_connect', $xml_result_code['message'] );
			}else { 
				$critical = TRUE; watchdog('avscience_connect', $xml_result_code['message'] , array() , WATCHDOG_WARNING);
			}
		}		
		
		if ( !$critical ){	
			$image_result_code = populate_snowpit_image($new_pit['SERIAL']);
			if ( $image_result_code['continue'] ) {
				$result_codes[] = $image_result_code;
				watchdog('avscience_connect', $image_result_code['message'] );
			}	else{
				$critical = TRUE; watchdog('avscience_connect', $image_result_code['message'] , array() , WATCHDOG_WARNING);
			}
		}
	
// /*		
		if ( !$critical ){		
			$pit_fields_result_code = snowpilot_avscience_populate_pit_fields($new_pit['SERIAL']);
			if ( $pit_fields_result_code['continue'] ) {
				$result_codes[] = $pit_fields_result_code;
				watchdog('avscience_connect', $pit_fields_result_code['message'] );
			}else { 
				$critical = TRUE; watchdog('avscience_connect', $pit_fields_result_code['message'] , array() , WATCHDOG_WARNING);
			}
		}		
		
		if ( !$critical ){
		  $layers_result_code = populate_layers_table($new_pit['SERIAL']);
			if ( $layers_result_code['continue']){
				$result_codes[] = $layers_result_code;
				watchdog('avscience_connect', $layers_result_code['message'] );			
			}else{
				$critical = TRUE; watchdog('avscience_connect', $layers_result_code['message'] , array() , WATCHDOG_WARNING);
			}
		}
		if ( !$critical){
			$tests_result_code = populate_shear_tests_table($new_pit['SERIAL']);
			if ($tests_result_code['continue']){
				$result_codes[] = $tests_result_code;
				watchdog('avscience_connect', $tests_result_code['message'] );			
			}else{
				$critical = TRUE; watchdog('avscience_connect', $tests_result_code['message'] , array() , WATCHDOG_WARNING);
			}  
		}
//		*/
		if ( $critical ) dsm( $result_codes);
		
		///
		
	}
	return $result_codes;
}

function snowpilot_query_form( $form, &$form_state){

	$regions_list = get_optgroup_by_taxonomy('geographical_location');
	$affil_options = get_optgroup_by_taxonomy('professional_affiliation');
	$affil_options = array_reverse($affil_options);
	$affil_options['none'] = 'Any';
	$affil_options = array_reverse($affil_options);
	
	
	$form['PIT_NAME'] = array(
		'#type' => 'textfield',
		'#size' => 22,
		'#title' => t('Snowpit Name/ Location'  ),
		'#description' => t('Uses \'contains\'. Only Partial match needed.' ),	
		'#weight' => '15',
		'#default_value' => $form_state['values']['PIT_NAME'],
	);
	$form['STATE'] = array(
		'#type' => 'select',
		'#multiple' => TRUE,
		'#options' => $regions_list,
		'#title' => t('State/Province/Country'  ),
		'#description' => t('Multi select' ),	
		'#weight' => '17',
		'#size' => 12,
		'#default_value' => $form_state['values']['STATE'],
	);
	$form['min_max_dates'] = array(
	      '#type' => 'fieldset',
	      '#title' => t('Filter by Date Range'),
	      '#weight' => 20,
	      '#collapsible' => TRUE,
	    );
	$form['min_max_dates']['OBS_DATE_MIN'] = array(
		'#type' => 'date_popup',
		'#title' => t('Obs Date, MIN'  ),
		'#description' => t('format Y-m-d' ),	
		'#date_format' => 'Y-m-d',
		'#date_timezone' => 'America/Chicago',
		'#date_label_position' => 'within',
		'#date_year_range' => '2015:+1',
		'#weight' => '21',
		'#default_value' => $form_state['values']['OBS_DATE_MIN'],
	);
	$form['min_max_dates']['OBS_DATE_MAX'] = array(
		'#type' => 'date_popup',
		'#title' => t('Obs Date, MAX'  ),
		'#description' => t('format Y-m-d' ),	
		'#date_format' => 'Y-m-d',
		'#date_timezone' => 'America/Chicago',
		'#date_label_position' => 'within',
		'#date_year_range' => '2015:+1',
		'#weight' => '23',
		'#default_value' => $form_state['values']['OBS_DATE_MAX'],
	);
	$form['USERNAME'] = array(
		'#type' => 'textfield',
		'#title' => t('Observer'),
		'#size' => 30,
		'#autocomplete_path' => 'user/autocomplete',
		'#weight' => '25',
		'#default_value' => $form_state['values']['USERNAME'],
	);
	$form['AFFIL'] = array(
		'#type' => 'select',
		//'#multiple' => TRUE,
		'#options' => $affil_options,
		'#title' => t('Group'),
	//	'#size' => 12,
		'#weight' => '27',
		'#default_value' => $form_state['values']['AFFIL'],
		//'#autocomplete_path' => 'taxonomy/autocomplete/professional_affiliation',
		
	);
	$form['testpit'] = array(
		'#type' => 'checkbox',
		'#title' => t('Include Test Pits?'),
		'#weight' => '29',
		'#default_value' => $form_state['values']['test_pit'],
	);
	$form['per_page'] = array ( 
	'#type' => 'select',
	'#title' => t('Snowpits per page'),
	'#options' => array( 5 => '5', 10 => '10', 50 => '50', 100 => '100', 500 => '500'),
	'#weight' => '31',
	'#default_value' => isset($form_state['values']['per_page']) ? $form_state['values']['per_page'] : 10 ,
  );
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Query Snowpits',
		'#weight' => '33',
	);
	$form['xml_feed'] = array(
		'#type' => 'submit',
		'#value' => 'XML Feed Output',
		'#weight' => '34',
	);
	

	
         // not shown - use $selected_value to do whatever it was you were
         // previously doing in your submit function
			 	$query = new EntityFieldQuery();
			 	$query->entityCondition('entity_type', 'node')
			 	  ->entityCondition('bundle', 'snowpit_profile')
			 	  ->propertyCondition('status', NODE_PUBLISHED);
					
			 	if ( isset( $form_state['values']['OBS_DATE_MIN'] ) )$query->fieldCondition('field_date_time', 'value', $form_state['values']['OBS_DATE_MIN'], '>');
			 	if ( isset( $form_state['values']['OBS_DATE_MAX'])) $query->fieldCondition('field_date_time', 'value', $form_state['values']['OBS_DATE_MAX'], '<');
			 	//$query->propertyCondition('uid',  $form_state['values']['USERNAME'] , '='); // Equal to 

			 	if ( isset ( $form_state['values']['PIT_NAME']))  $query->propertyCondition('title', '%'.$form_state['values']['PIT_NAME'].'%' , 'like');
				if ( isset ( $form_state['values']['USERNAME'] ) &&  $form_state['values']['USERNAME'] <> '') {
					$account = user_load_by_name ($form_state['values']['USERNAME']);
					$query->propertyCondition('uid', $account->uid);
				}
				
			 	if ( !isset($form_state['values']['testpit']) || (isset($form_state['values']['testpit']) && ( $form_state['values']['testpit'] <> 1 ))	) $query->fieldCondition('field_practice_pit', 'value', '0' , '=');			
			 	
				if ( count($form_state['values']['AFFIL']) && $form_state['values']['AFFIL'] <> 'none' )  $query->fieldCondition('field_org_ownership', 'tid', $form_state['values']['AFFIL']  ,'=');

			  if ( isset($form_state['values']['STATE']) && count( $form_state['values']['STATE'])) $query->fieldCondition('field_loaction', 'tid', $form_state['values']['STATE'], 'IN');
			 	$query->fieldOrderBy('field_date_time', 'value', 'DESC' );
				
				global $user;
				if ($user->uid <> 1 ){
					
				$query->fieldCondition('field_snowpit_visibility', 'value', 'public' ,'=');}
				
        $per_page = isset($form_state['values']['per_page']) ? $form_state['values']['per_page'] : 10 ;
				$page_num = isset ($_GET['page']) ? $_GET['page'] : '0' ;

				$query->range($per_page * $page_num, $per_page);
				$count_query = $query;
				$result = $query->execute();
				
				
				$count_query->range(0, 1000000);
				$output = snowpilot_query_theme_output(array_keys($result['node']));
				 
				$count_results = $count_query->count()->execute(); 
			
				$display_per_page = $per_page < $count_results ? $per_page : $count_results;
				$begining = $per_page * $page_num + 1; $ending = $per_page * $page_num + $per_page < $count_results ? $per_page * $page_num + $per_page : $count_results;
				$output .= t('<h2>Showing results '. $begining  . ' through ' . $ending  . ' of total: '. $count_results.'</h2>');
			
			//  $output .= avscience_xml_link('snowpilot-query-feed.xml') . '</div>';
			

         // split array into page sized chunks
     
         
				 
			 	$form['results'] = array(
			 		'#type' => 'markup',
					'#markup' => $output,
					'#weight' => 35,
		
			 	);
				$current_page = pager_default_initialize($count_results, $per_page);
				
        $form['pager'] = array
        (
          '#theme' => 'pager',
					'#weight' => 36,
					
        );
	
	return $form;
	
}

function snowpilot_query_form_submit( $form, &$form_state){

	if ( $form_state['clicked_button']['#value'] == 'XML Feed Output'){
		//dsm($form_state['values']);
		$form_state['redirect'] = array('snowpilot-query-feed.xml', array( 'query' => snowpilot_xml_link($form_state['values'])));
	}else{
		$form_state['redirect'] = current_path() . '/' . $form_state['values']['snowpilot_query_form'];
		$form_state['rebuild'] = TRUE;
		
	}
  
	
	
	return ;
}

function snowpilot_query_theme_output($snowpits_nids){
	$output = '';
	
  foreach ( $snowpits_nids as $snowpits )	{
	  // $records[] = $record;
    $snowpit = node_load($snowpits);

		$x = 1;
		$pre_img_url = '/sites/default/files/snowpit-profiles/'. substr($snowpit->nid, 0, -3 ).'/graph/graph-'.$snowpit->nid. '.jpg';
		$layers_image = '/sites/default/files/snowpit-profiles/'. substr($snowpit->nid, 0, -3 ).'/layers/layers-'.$snowpit->nid. '.png';
	
		  $links = array();
		  $links[] = array('title' => t('JPG'), 'href' => '/sites/default/files/snowpit-profiles/'. substr($snowpit->nid, 0, -3 ).'/graph/graph-'. $snowpit->nid .'.jpg');
		  $links[] = array('title' => t('SnowPilot XML'), 'href' => 'snowpit/' . $snowpit->nid. '/download/xml');
		
			$this_item = '
              <div class = "item-wrapper">
			  <div class="views-field views-field-title">' . $snowpit->title . '</div>  
			  <div class="field-content views-graph-image"><a href="/node/' . $snowpit->nid  . '"><img src="'. $layers_image .'"></a></div>    
			  <div class="field-content views-field-field-date-time"><span class="views-snowpit-region-range">'.
				taxonomy_term_load($snowpit->field_loaction['und'][0]['tid'])->name . " >> ".taxonomy_term_load($snowpit->field_loaction['und'][1]['tid'])->name
				.'</span>
			<br>
			<span class="views-user-name">'. $snowpit->name . '</span>
			<br>
			<span class="date-display-single"  >'. $snowpit->field_date_time['und'][0]['value'] .' </span>
			<span>'. theme('ctools_dropdown', array('title' => t('Download Snowpit'), 'links' => $links)) .'</span>
			</div> </div>';

			$output .= $this_item ;    
	
  }

							
	return '<div class = "view-snowpit-list">' . $output .' </div>';
	
	
}
//
// Tests to see if the pit was generated by drupal or not
//  if so, it returns the nid of the pit with said serial.
// the SERIAL in this case is the avscience serial number
// could technically work again any of the avscience dbs, but here it is 
// the main avscience db
function avscience_is_drupal_pit($SERIAL){
  include_once (DRUPAL_ROOT.'/sites/default/db_settings.php' );
	Database::addConnectionInfo('avscience_db', 'default', $test_db );// $avsci_db_info

	db_set_active('avscience_db');
  $query = 'SELECT LOCAL_SERIAL FROM PIT_TABLE WHERE SERIAL = '.$SERIAL;
  $local_serial = db_query($query)->fetchField();
  db_set_active();
	if ( $local_serial ){ 
		preg_match( '/drupal-nid-(\d*)/' , $local_serial, $match);
		return $match[1] ;
	}else{
		return 0;
	}
}

function snowpilot_avscience_fetch_new_pits(){
  include_once(DRUPAL_ROOT . '/sites/default/avscience_connect_db_settings');
	
	$query1 = 'SELECT MAX(`SERIAL`) FROM `PIT_TABLE`';
	
	$first_results = $older_snowpits_link->query($query1)->fetch_row()[0];

	$query2 = 'SELECT `SERIAL`, `LOCAL_SERIAL`, `OBS_DATE` from `PIT_TABLE` where `SERIAL` > '. $first_results. '' ; //' AND OBS_DATE > "'. date( 'Y-m-d' , time() - 60*60*24*7*4).'"' ; // thereby only fetching new pits in the last four weeks, I want to avoid giant regurgitation!
	
	// Temporarily include all pits no matter the obs date, so to include the drupal nodes 
	$new_pits_result = $current_snowpits_link->query($query2);
	//dsm($new_pits_result);
	
	while ( $new_pit = $new_pits_result->fetch_array(MYSQLI_ASSOC) ){
    $all_pits_list[$new_pit['SERIAL']] = $new_pit;
		//  This query looks for existing pits in the final avscience db with the same local serial as this pit
		// unless the pit is originally from drupal database, then we allow updating it. 
		$query3 = "SELECT COUNT(`SERIAL`) FROM `PIT_TABLE` WHERE `LOCAL_SERIAL` = '". $new_pit['LOCAL_SERIAL']."'";  
		
		$existing_pit_check = $snowpilot_avscience->query($query3) or die(mysqli_error());
		$existing_pit = $existing_pit_check->fetch_row()[0];
		
		if (  $existing_pit == 0){
			//echo "Genuinely new pit: ". " : ". $new_pit['LOCAL_SERIAL']. " : ".$new_pit['OBS_DATE'] ."<br />";
			$new_pits[$new_pit['SERIAL']] = $new_pit;
		}else{

			//echo $existing_pit['SERIAL'] . " : ". $new_pit['LOCAL_SERIAL']. " : ".$new_pit['OBS_DATE'] ."<br />";
			$dupe_pits[$new_pit['SERIAL']] = $new_pit;
		}
		//mysqli_free_result($existing_pit_check);
		
	}
		//
	
	
	return array( 'all_pits' => $all_pits_list, 'dupe_pits' => $dupe_pits, 'new_pits' => $new_pits);
}



function avscience_query_output(){
	global $user;
	$account = user_load($user->uid);
	
	if ( !(user_has_role( 3, $account )) && !(user_has_role( 5, $account ) )){ 
		return MENU_ACCESS_DENIED;
	}
	include_once (DRUPAL_ROOT.'/sites/default/db_settings.php' );
	
		Database::addConnectionInfo('avscience_db', 'default', $test_db );// $avsci_db_info
	
		db_set_active('avscience_db');
	$query = "SELECT PIT_NAME, OBS_DATE, USERNAME, STATE, MTN_RANGE, SERIAL FROM `PIT_TABLE` WHERE SERIAL > 0  ";
	$query_args = array();
	$where_clause = '';
	$output = '';
		
	
	$state = ''; $mtn_range = ''; $obsdatemin = '' ; $obsdatemax = ''; $username = ''; $loc_name = ''; $serial =''; $state_options = ''; $region_options = ''; $test_pit_checked = ''; $affil = ''; $adv_where_query = '';
	
	if (isset( $_GET['STATE']) && $_GET['STATE'] <> ''  ){
	    $where_clause .=  " AND STATE = :STATE " ; $query_args[':STATE'] = $_GET['STATE']; 
	    $state = $_GET['STATE'];
	}
	// States dropdown list
	$unique_states = "SELECT distinct ( STATE ) FROM `PIT_TABLE` ORDER BY length(STATE) , STATE"; 
	$states_list = db_query($unique_states);
	while ( $states = $states_list->fetch() )	{
		$selected = ($states->STATE == $state) ? ' selected' : '';
	  $state_options .=  "<option value ='" . $states->STATE . "'". $selected ."  > ". $states->STATE ."</option>
			" ;
	}

	if (isset( $_GET['MTN_RANGE']) && count( $_GET['MTN_RANGE'] )  ){
	    $where_clause .=  " AND ( ";
	    foreach ($_GET['MTN_RANGE'] as $key => $range ){
	    	$where_clause .= " MTN_RANGE = :MTN_RANGE" .  $key." OR" ;
			  $query_args[':MTN_RANGE'.$key ] = $range;
	    }
			$where_clause = substr($where_clause, 0, -3 );
			$where_clause .= " ) ";
	}

	$unique_regions = "SELECT distinct ( MTN_RANGE ) FROM `PIT_TABLE` ORDER BY MTN_RANGE ASC "; 
	$regions_list = db_query($unique_regions);

	while ( $region = $regions_list->fetch() )	{
		$range_selected = (   isset($_GET['MTN_RANGE']) && in_array( $region->MTN_RANGE , $_GET['MTN_RANGE'] ) && isset($_GET['MTN_RANGE'])) ? ' selected' : '';
	  $region_options .=  "<option value ='" . $region->MTN_RANGE . "' ".$range_selected." >".$region->MTN_RANGE."</option>
			"  ;
	}

	if (isset( $_GET['OBS_DATE_MIN']) && $_GET['OBS_DATE_MIN'] <> ''  ){
	    $where_clause .=  " AND OBS_DATE > :OBS_DATE_MIN " ; $query_args[':OBS_DATE_MIN'] = $_GET['OBS_DATE_MIN'];
			$obsdatemin = $_GET['OBS_DATE_MIN'];
	}


	if (isset( $_GET['OBS_DATE_MAX']) && $_GET['OBS_DATE_MAX'] <> ''  ){
	    $where_clause .=  " AND OBS_DATE < :OBS_DATE_MAX " ; $query_args[':OBS_DATE_MAX'] = $_GET['OBS_DATE_MAX'];
			$obsdatemax = $_GET['OBS_DATE_MAX'];
	}


	if (isset( $_GET['USERNAME']) && $_GET['USERNAME'] <> ''  ){
	    $where_clause .=  " AND USERNAME LIKE :USERNAME " ;
			$query_args[':USERNAME'] = $username = '%'.$_GET['USERNAME'].'%';
	}


	if (isset( $_GET['PIT_NAME']) && $_GET['PIT_NAME'] <> ''  ){
	    $where_clause .=  " AND PIT_NAME LIKE :PIT_NAME " ;
			$query_args[':PIT_NAME'] = $loc_name = $_GET['PIT_NAME'];
	}

	if ( !isset($_GET['testpit']) || $_GET['testpit'] <> '1'  ){
	    $where_clause .=  " AND TEST_PIT != 1 " ;
			
	}else{
		$test_pit_checked = ' checked';
	}

	if (isset( $_GET['SERIAL']) && $_GET['SERIAL'] <> ''  ){
	    $where_clause .=  " AND SERIAL = :SERIAL" ;
			$query_args[':SERIAL'] = $serial = $_GET['SERIAL'];
	}

	if (isset( $_GET['AFFIL']) && $_GET['AFFIL'] <> ''  ){
	    $where_clause .=  " AND PIT_DATA LIKE :AFFIL" ;
			$query_args[':AFFIL'] = "%affil~1" .  $_GET['AFFIL']."%" ; $affil = $_GET['AFFIL'];
	}

/*	if ( isset( $_GET['ADV_WHERE_QUERY']) && $_GET['ADV_WHERE_QUERY'] <>''){
		$where_clause .=  " AND :ADV_WHERE_QUERY ";
		$query_args[':ADV_WHERE_QUERY'] = $adv_where_query = $_GET['ADV_WHERE_QUERY'];
	}
*/
	$output .='
	<div class = "view-snowpit-list">
		<div class= "views-exposed-form">
	<form action = "/avscience-query" method = "get" class = "form-item">
	<div class = "geo-selection">
		  <div style = "display: inline-block; width : 160px; vertical-align: top;">
		  	Location/Snowpit Name<br /><input type = "text" name = "PIT_NAME" value= "' .$loc_name. '" />
	  		<div class = "description">Uses \'contains\'. You need only partial match of the name.</div>
	  	</div>
	    <div style = "display: inline-block; width : 160px; vertical-align: top;">
	  	State/Province/Country<br />
		  <select type = "select" name = "STATE" id = "STATE" value ="'. $state .'">
	  	  '.$state_options.'
	    </select>
	    </div>
		  <div style = "display: inline-block;" >
		  	Range/Region: <br/>
	  	<select name ="MTN_RANGE[]" id = "MTN_RANGE" multiple  style = "height: 140px;">
		  	' .$region_options. '
		  </select>
	    </div>
			<div class = "date-selection" style = "display: inline-block; vertical-align: top; " >
				Observation Date<br />
			  <div style ="display: inline-block;">minimum: <br /><input type = "date" name = "OBS_DATE_MIN" value= "' .$obsdatemin .'" /> </div>
			  <div style ="display: inline-block;">maximum: <br /><input type = "date" name = "OBS_DATE_MAX" value= "'. $obsdatemax .'" /> </div>
			</div>
			<div class = "users-orgs-selection"  style = "display: inline-block; vertical-align: top;" >
				<div >Username \'contains\': <br /><input type = "text" name = "USERNAME" value= "'. $username. '" /> </div>
			  <div >Affiliation \'contains\' : <br /><input type = "text" name = "AFFIL" value= "'. $affil. '" /> </div>
			</div>
	  </div>
		<div class = "researcher-query">
	';		
	
		/*	if ( in_array('administrator' , $user->roles ) || in_array('researcher' , $user->roles ) ){
			 $output .= ' 	<div style ="display: inline-block;">Advanced WHERE query : <input type = "text" name = "ADV_WHERE_QUERY" value= "' . $adv_where_query . '" /></div>';
			}*/
$output .=
		'</div>
		<div class = "tests-button">
			<div style ="display: inline-block;"><input type = "submit" name = "submit" value = "Get Pits" /></div>
		  <div style ="display: inline-block;">Include test Pits?<input type = "checkbox" name = "testpit" value = "1" '. $test_pit_checked .'/></div>
	  </div>
	<br />

	</form>
	</div>';

	  $per_page = 10;
		$where_clause .= " AND SHARE = '1' ";

		//
		$page_num = isset ($_GET['page']) ? $_GET['page'] : '0' ;
		$query = "SELECT PIT_NAME, OBS_DATE, USERNAME, STATE, MTN_RANGE, SERIAL, LOCAL_SERIAL FROM `PIT_TABLE` WHERE SERIAL > 0  ". $where_clause . " ORDER BY OBS_DATE DESC LIMIT " . $page_num * $per_page ."," . $per_page;
		$query2 = "SELECT count(SERIAL) FROM `PIT_TABLE` WHERE SERIAL > 0  ". $where_clause ;

	  $results = db_query($query,$query_args);
		$count_results = db_query($query2,$query_args)->fetchField(); 
		db_set_active();
	
		//$records = array();
		$rows = array();
	  while ( $record = $results->fetch() )	{
			$x = 1;
			$pre_img_url = '/sites/default/files/avscience-profiles/graph-serial-'.$record->SERIAL. '.jpg';
			$layers_image = '/sites/default/files/avscience-profiles/layers/layers-serial-'.$record->SERIAL. '.jpg';
		
			if( !file_exists( DRUPAL_ROOT.'/sites/default/files/avscience-profiles/layers/layers-serial-'.$record->SERIAL. '.jpg' )){
				if( !file_exists( DRUPAL_ROOT.'/sites/default/files/avscience-profiles/graph-serial-'.$record->SERIAL. '.jpg' )){
				
					$kc_img_src = file_get_contents( "http://www.kahrlconsulting.com:8084/avscience/PitServlet?TYPE=PITIMAGE&SERIAL=".$record->SERIAL );
					$local_image = fopen( DRUPAL_ROOT.'/sites/default/files/avscience-profiles/graph-serial-'.$record->SERIAL. '.jpg' , 'w');
					fwrite($local_image, $kc_img_src);
					fclose($local_image);
					sleep(1);
				}
				$pre_img = imagecreatefromjpeg( DRUPAL_ROOT.$pre_img_url);
				$new_img = imagecreatetruecolor(466,613);
				$result = imagecopy($new_img, $pre_img, 0,0, 14,140,466,613 );
						
				imagejpeg( $new_img , DRUPAL_ROOT. $layers_image );
			
			}
		
			//
			//
			//  
			  $links = array();
			  $links[] = array('title' => t('JPG'), 'href' => '/sites/default/files/avscience-profiles/graph-serial-'. $record->SERIAL .'.jpg');
			  $links[] = array('title' => t('SnowPilot XML'), 'href' => '/sites/default/files/snowpit-xml/node-'.$record->SERIAL. '.xml');
			
				$this_item = '
	              <div class = "item-wrapper">
				  <div class="views-field views-field-title">' . $record->PIT_NAME . '</div>  
				  <div class="field-content views-graph-image"><a href="' . $pre_img_url  . '"><img src="'. $layers_image .'"></a></div>    
				  <div class="field-content views-field-field-date-time"><span class="views-snowpit-region-range">'.$record->STATE . ' » '.$record->MTN_RANGE . '</span>
				<br>
				<span class="views-user-name">'. $record->USERNAME . '</span>
				<br>
				<span class="date-display-single" property="dc:date"  >'. $record->OBS_DATE .' </span>
				<span>'. theme('ctools_dropdown', array('title' => t('Download Snowpit'), 'links' => $links)) .'</span>
				</div> </div>';
		
		
		
				$rows[$x][1] .= $this_item ;
		
		
			$img_url = '<img src = "' .$layers_image . '" /> ';
 		
	  }


	$header = array( '' , '' , '',  '' , '' );
	$attributes = array();  
	$caption = 'Snowpit query results';
	$colgroups = array();
	$sticky = FALSE;
	$empty = "No Rows!";

															//
															//  Set up the pager
															// 
															// Initialize the pager
															$current_page = pager_default_initialize($count_results, $per_page);
															// Display the counts per page
															$display_per_page = $per_page < $count_results ? $per_page : $count_results;
															$begining = $per_page * $page_num + 1; $ending = $per_page * $page_num + $per_page;
															$output .= t('<h2>Showing results '. $begining  . ' through ' . $ending  . ' of total: '. $count_results.'</h2>');
															// Split your list into page sized chunks
															$chunks = array_chunk($rows, $per_page, TRUE);
															// Show the appropriate items from the list
															$output .= '<div class = "view-content">' . theme('table', array('header' => $header, 'rows' => $rows /*$chunks[$current_page]*/ ));
															// Show the pager
															$output .= theme('pager', array('quantity',$count_results)). '</div></div>';
				
	
														
														$output .= avscience_xml_link('avscience-query-feed.xml') . '</div>' ;
														
															return $output;
		
}

function snowpilot_pit_xml_doc($array_of_nids){
	$data ='';
	foreach ( $array_of_nids as $nid){
		$node = node_load($nid);
		$data .= substr(snowpilot_node_write_pitxml($node), 39);
	}
  return '<?xml version="1.0" encoding="UTF-8"?>
<Pit_Data>
'.$data.'
</Pit_Data>';

}

function avscience_pit_xml_doc($serials ){
	include_once (DRUPAL_ROOT.'/sites/default/db_settings.php' );
	global $user;
	Database::addConnectionInfo('avscience_db', 'default', $test_db );// $avsci_db_info
	$data = '';
	db_set_active('avscience_db');
	foreach ( $serials as $serial ){
	  $query = "SELECT PIT_XML FROM `PIT_TABLE` WHERE SERIAL = :SERIAL   " ;
  	$results = db_query($query , array( ':SERIAL' =>  $serial) ) ; 
    while ( $record = $results->fetch() )	{
		  $data .= substr($record->PIT_XML, 39);	
	  }
	}
	
	db_set_active();
  return '<?xml version="1.0" encoding="UTF-8"?>
	<Pit_Data>
  '.$data.'
  </Pit_Data>';
}
//
//  Returns an array based on form_state[$values];
//
function snowpilot_xml_link($form_state_values){
	$return_array = array();
	foreach( $form_state_values as $key => $value ){
		if ( !in_array( $key, array( 'xml_feed', 'form_token', 'form_id', 'submit', 'op', 'form_build_id')  ) ){
		  $return_array[$key] = $value;			
		}
	}
	return $return_array;
}

function  avscience_xml_link($url)  {
	$query_array = array();
	//unset($_GET['q']);
	//unset($_GET['page']);
	
		foreach ($_GET as $key => $var ){
		  if ( is_array($var)){ 
				
				foreach( $var as $ind_region){
					$query_array[] = $key.'[]='.$ind_region;
				}
			}elseif ( $key <> 'q' && $key <> 'page'){
			  $query_array[] = $key.'='. $var ;
      }
		}
	$query_string = '?' . implode($query_array , '&' );
	return  '<div style = "text-align:center;"><a href ="/'.$url.$query_string.'" style ="color: #00f;"><img src="/misc/feed.png"  /> XML feed link</a>';
}
	
function snowpilot_query_xml(){
	global $user;
	$account = user_load($user->uid);
	
	//if ( !(user_has_role( 3, $account )) && !(user_has_role( 5, $account ) )){ return MENU_ACCESS_DENIED; }
	
	header('Content-type: application/xml');
	
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
	  ->entityCondition('bundle', 'snowpit_profile')
	  ->propertyCondition('status', NODE_PUBLISHED);
	if( isset( $_GET['STATE']) && count($_GET['STATE'] ) > 0 ){
		$state = $_GET['STATE'];
		//dsm($state);
    $query->fieldCondition('field_loaction', 'tid', $state, 'IN');
	}

	if (isset( $_GET['OBS_DATE_MIN']) && $_GET['OBS_DATE_MIN'] <> ''  ){
			$obsdatemin = $_GET['OBS_DATE_MIN'];
		  $query->fieldCondition('field_date_time', 'value', $obsdatemin, '>');
	}

	if (isset( $_GET['OBS_DATE_MAX']) && $_GET['OBS_DATE_MAX'] <> ''  ){
			$obsdatemax = $_GET['OBS_DATE_MAX'];
		  $query->fieldCondition('field_date_time', 'value', $obsdatemax, '<');
	}

	if ( isset ( $_GET['USERNAME'] ) &&  $_GET['USERNAME'] <> '') {
		$account = user_load_by_name ($_GET['USERNAME']);
		$query->propertyCondition('uid', $account->uid);
	}

	if (isset( $_GET['PIT_NAME']) && $_GET['PIT_NAME'] <> ''  ){
		$loc_name = $_GET['PIT_NAME'];
		$query->propertyCondition('title', '%'.$loc_name.'%' , 'like');
	}

	if ( !isset($_GET['testpit']) || $_GET['testpit'] <> '1'  ){
		$query->fieldCondition('field_practice_pit', 'value', '0' , '=');
		
	}elseif ( isset($_GET['testpit']) && $_GET['testpit'] == '1') {
		$test_pit_checked = ' checked';
	}

	if (isset( $_GET['AFFIL']) && $_GET['AFFIL'] <> '' && $_GET['AFFIL'] <> 'none' ){
			$affil = $_GET['AFFIL'];
			$query->fieldCondition('field_org_ownership', 'tid', $affil  ,'=');
	}
	$query->fieldCondition('field_snowpit_visibility', 'value', 'public' ,'=');
	
	$per_page = (isset($_GET['per_page']) && $_GET['per_page'] > 0) ? $_GET['per_page'] : 10 ;
	if ( $per_page > 500 ) $per_page = 500; // limiting to select 100 items
	$page_num = isset ($_GET['page']) ? $_GET['page'] : '0' ;

	$query->range($per_page * $page_num, $per_page);
	$query->fieldOrderBy('field_date_time', 'value', 'DESC' );

	$result = $query->execute();
	//dsm( $query_count->__toString() );
	
	if (isset($result['node'])) {
	  $snowpit_nids = array_keys($result['node']);
		//dsm(snowpilot_pit_xml_doc($snowpit_nids ));
	  $output =  snowpilot_pit_xml_doc($snowpit_nids );
		//dsm($output);
		print_r( $output );
		exit();
		return;
	} 
	return "<h2>No Data was returned by the query</h2>";
}

function avscience_query_xml(){
	global $user;
	$account = user_load($user->uid);
	
	if ( !(user_has_role( 3, $account )) && !(user_has_role( 5, $account ) ) ){ return MENU_ACCESS_DENIED ;}
	header('Content-type: application/xml');
  //header('Content-Disposition: attachment; filename="avscience-query-results.xml"');
	
	include_once (DRUPAL_ROOT.'/sites/default/db_settings.php' );
	global $user;
		Database::addConnectionInfo('avscience_db', 'default', $test_db );// $avsci_db_info
	
		db_set_active('avscience_db');
	$query = "SELECT PIT_NAME, OBS_DATE, USERNAME, STATE, MTN_RANGE, SERIAL FROM `PIT_TABLE` WHERE SERIAL > 0  ";
	$query_args = array();
	$where_clause = '';
	$output = '';
		
	
	$state = ''; $mtn_range = ''; $obsdatemin = '' ; $obsdatemax = ''; $username = ''; $loc_name = ''; $serial =''; $state_options = ''; $region_options = ''; $test_pit_checked = ''; $affil = ''; $adv_where_query = '';
	
	if (isset( $_GET['STATE']) && $_GET['STATE'] <> ''  ){
	    $where_clause .=  " AND STATE = :STATE " ; $query_args[':STATE'] = $_GET['STATE']; 
	    $state = $_GET['STATE'];
	}
	// States dropdown list
	$unique_states = "SELECT distinct ( STATE ) FROM `PIT_TABLE` ORDER BY length(STATE) , STATE"; 
	$states_list = db_query($unique_states);
	while ( $states = $states_list->fetch() )	{
		$selected = ($states->STATE == $state) ? ' selected' : '';
	  $state_options .=  "<option value ='" . $states->STATE . "'". $selected ."  > ". $states->STATE ."</option>
			" ;
	}


	if (isset( $_GET['MTN_RANGE']) && count( $_GET['MTN_RANGE'] )  ){
	
	    $where_clause .=  " AND ( ";
	    foreach ($_GET['MTN_RANGE'] as $key => $range ){
	    	$where_clause .= " MTN_RANGE = :MTN_RANGE" .  $key." OR" ;
			  $query_args[':MTN_RANGE'.$key ] = $range;
	    }
			$where_clause = substr($where_clause, 0, -3 );
			$where_clause .= " ) ";
	}

	$unique_regions = "SELECT distinct ( MTN_RANGE ) FROM `PIT_TABLE` ORDER BY MTN_RANGE ASC "; 
	$regions_list = db_query($unique_regions);

	while ( $region = $regions_list->fetch() )	{
		$range_selected = (   isset($_GET['MTN_RANGE']) && in_array( $region->MTN_RANGE , $_GET['MTN_RANGE'] ) && isset($_GET['MTN_RANGE'])) ? ' selected' : '';
	  $region_options .=  "<option value ='" . $region->MTN_RANGE . "' ".$range_selected." >".$region->MTN_RANGE."</option>
			"  ;
	}

	if (isset( $_GET['OBS_DATE_MIN']) && $_GET['OBS_DATE_MIN'] <> ''  ){
	    $where_clause .=  " AND OBS_DATE > :OBS_DATE_MIN " ; $query_args[':OBS_DATE_MIN'] = $_GET['OBS_DATE_MIN'];
			$obsdatemin = $_GET['OBS_DATE_MIN'];
	}


	if (isset( $_GET['OBS_DATE_MAX']) && $_GET['OBS_DATE_MAX'] <> ''  ){
	    $where_clause .=  " AND OBS_DATE < :OBS_DATE_MAX " ; $query_args[':OBS_DATE_MAX'] = $_GET['OBS_DATE_MAX'];
			$obsdatemax = $_GET['OBS_DATE_MAX'];
	}


	if (isset( $_GET['USERNAME']) && $_GET['USERNAME'] <> ''  ){
	    $where_clause .=  " AND USERNAME LIKE :USERNAME " ;
			$query_args[':USERNAME'] = $username = '%'.$_GET['USERNAME'].'%';
	}


	if (isset( $_GET['PIT_NAME']) && $_GET['PIT_NAME'] <> ''  ){
	    $where_clause .=  " AND PIT_NAME LIKE :PIT_NAME " ;
			$query_args[':PIT_NAME'] = $loc_name = $_GET['PIT_NAME'];
	}

	if ( !isset($_GET['testpit']) || $_GET['testpit'] <> '1'  ){
	    $where_clause .=  " AND TEST_PIT != 1 " ;
			
	}else{
		$test_pit_checked = ' checked';
	}

	if (isset( $_GET['SERIAL']) && $_GET['SERIAL'] <> ''  ){
	    $where_clause .=  " AND SERIAL = :SERIAL" ;
			$query_args[':SERIAL'] = $serial = $_GET['SERIAL'];
	}

	if (isset( $_GET['AFFIL']) && $_GET['AFFIL'] <> ''  ){
	    $where_clause .=  " AND PIT_DATA LIKE :AFFIL" ;
			$query_args[':AFFIL'] = "%affil~1" .  $_GET['AFFIL']."%" ; $affil = $_GET['AFFIL'];
	}
	
	$per_page = (isset($_GET['per_page']) && $_GET['per_page'] > 0) ? $_GET['per_page'] : 10 ;
	if ( $per_page > 100 ) $per_page = 100; // limiting to select 100 items

		$where_clause .= " AND SHARE = '1' ";

		//
		$page_num = isset ($_GET['page']) ? $_GET['page'] : '0' ;
		$query = "SELECT PIT_NAME, OBS_DATE, USERNAME, STATE, MTN_RANGE, SERIAL FROM `PIT_TABLE` WHERE SERIAL > 0  ". $where_clause . " ORDER BY OBS_DATE DESC LIMIT " . $page_num * $per_page ."," . $per_page;
		
		$query2 = "SELECT count(SERIAL) FROM `PIT_TABLE` WHERE SERIAL > 0  ". $where_clause ;

	  $results = db_query($query,$query_args);
		$count_results = db_query($query2,$query_args)->fetchField(); 
		db_set_active();
	
		//$records = array();
		$rows = array();
	  while ( $record = $results->fetch() )	{
	  	$serials[] = $record->SERIAL;			
	  }
	 print_r(avscience_pit_xml_doc($serials ));
	 exit();
	return ;
}	

