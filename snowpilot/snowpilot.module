<?php

include_once('includes/unit_prefs.inc.php');
include_once('includes/graphing_functions.inc.php');

//function snowpilot_menu_alter(){
	//}

function snowpilot_menu(){
	$items['snowpilot/%ctools_js/login']= array(
		'title' => 'Modal Login',
		'page callback' => 'snowpilot_login',
  	'page arguments' => array(1),
 	 	'access callback' => TRUE,
 		'type' => MENU_CALLBACK,
	);
  $items['snowpilot/%ctools_js/login/%'] = array(
      'title' => 'Post-Login Action',
      'page callback' => 'snowpilot_login_success',
      'page arguments' => array(1, 3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
	$items['snowpilot/user/edit'] = array(
		'title' => 'Edit Snowpit Preferences',
		'page callback' => 'snowpilot_user_edit',
		'access callback' => 'snowpilot_user_has_role',
		'access arguments' => array (2 => 'authenticated user'),
		'type' => MENU_NORMAL_ITEM,	
		
	);
	return $items;
}

function snowpilot_init(){
	
	drupal_add_js('sites/all/modules/snowpilot/js/snowpilot.js');
	
	
	//
	//  We will pester the user on all pages if preferences aren't set
	//
	global $user;
	if($user->uid <> 0){ 

			snowpilot_user_unit_prefs_check($user->uid,FALSE);

	}
	
}
function snowpilot_form_alter(&$form, &$form_state, $form_id){
	// fields that will need to have the suffix changed according to the users prefs. 
	//	
	
	switch($form_id ){
		case 'snowpit_profile_node_form':
		$node = $form_state['node'];
    if ($node->type == 'snowpit_profile'){ // this might be rendundant for the switch/case above.
			global $user;
			$account = user_load($user->uid);
			$snowpit_unit_prefs = snowpilot_unit_prefs_get($account);  
			
			if( !isset($node->nid) || isset($node->is_new) ){ // a new snowpit profile node, find $unit_prefs from $user
				if ( snowpilot_user_unit_prefs_check($user->uid)){ // this check function verifies that we have a full set of unit preferences, etc, setup for this user. It redirects to the user /edit page if one or more are lacking
					// set the unit prefs on the snowpit node form.
					snowpilot_snopit_prof_unit_prefs_set($form, $snowpit_unit_prefs);	
				}
			}else{ // not a new node, but an edited one, so load the unit prefs from the existing $node. The array_merge ensures that values not set on the node ( e.g. first name or professional afilliation), ARE still available in the $unit_prefs. preference  values in the node will overwrite those in the user
				$snowpit_unit_prefs = array_merge(snowpilot_unit_prefs_get($node, 'node'), $snowpit_unit_prefs);  
				//dsm($snowpit_unit_prefs);
				
			}
			
			snowpilot_snopit_prof_set_suffices($form, $snowpit_unit_prefs);
			
			
			snowpilot_snowpit_set_layer_titles($form, $snowpit_unit_prefs);
			
			//dsm($form_state);
			snowpilot_snowpit_set_temp_coll_titles($form, $snowpit_unit_prefs);
			
			snowpilot_snowpit_set_density_titles($form, $snowpit_unit_prefs);

			snowpilot_snowpit_set_stability_test_titles($form, $snowpit_unit_prefs);
						
			snowpilot_snowpit_set_frac_cat($form, $snowpit_unit_prefs);
			
			snowpilot_set_visibility_field_options($form, $snowpit_unit_prefs);
			
			// these are one-off text changes that don't seem to require their own function
			$form['#submit'][] = 'snowpilot_snowpit_profile_node_form_submit';
			$form['#validate'][] = 'snowpilot_snowpit_profile_node_form_validate';
			$form['actions']['submit']['#value'] = 'Save and Preview';
			$form['field_density_profile']['und']['add_more']['#value'] = "Add Density";
			$form['field_temp_collection']['und']['add_more']['#value'] = "Add Temperature";
			$form['title']['#maxlength'] = 22;
			

		} // end case node->type == snowpit prof
		break;
		case 'user_login':
			$form['name']['#description'] = t('Snowpilot username, or email address');
			$form['pass']['#description'] ='';
		break;
		case 'views_exposed_form':
			if( $form['#id'] == 'views-exposed-form-snowpit-list-page'){
				$form['field_loaction_tid']['#size'] = '3';
				//dsm($form);
			}
		break;
		case 'user_profile_form':
			// this works, but needs to be expanded to include all/any fields that are not filled in, but should be.
			//$form['field_fracture_category']['#attributes']['class'][] = 'error';
			dsm($form);
		break;
					
	} // end switch
	return;
}


/**
 * A modal login callback.
 */
function snowpilot_login($js = NULL) {
  // Fall back if $js is not set.
	global $user;
  if (!$js) {
    return drupal_get_form('user_login');
  }
  ctools_include('modal');
  ctools_include('ajax');
  $form_state = array(
    'title' => t('Login'),
    'ajax' => TRUE,
  );
  $output = ctools_modal_form_wrapper('user_login', $form_state);
  if (!empty($form_state['executed'])) {
    // We'll just overwrite the form output if it was successful.
		//
		// these three functions ( .../login , .../login success , .../snowpilot_ $item - are from AJAX Sample)
    //
		//
    $output = array();
    $inplace = ctools_ajax_text_button(t('remain here'), 'snowpilot/nojs/login/inplace', t('Go to your account'));
    $output[] = ctools_modal_command_display(t('Login Success'), '<div class="modal-message">Login successful. You will be redirected in a moment.</div>');
		
		// Redirect to the user-prefs edit page if they are lacking one of the required ones.
		if (!snowpilot_user_unit_prefs_check($user->uid,FALSE)){
			$output[] = ctools_ajax_command_redirect('user/'.$user->uid.'/edit#edit-field-first-name');	
	  //	
		}else{
			$output[] = ctools_ajax_command_redirect('snowpits');	
		}
	}
	print ajax_render($output);

  exit;
}

/**
 * Post-login processor: should we go to the user account or stay in place?
 */
function snowpilot_login_success($js, $action) {
  if (!$js) {
    // we should never be here out of ajax context
    return MENU_NOT_FOUND;
  }

  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  $commands = array();
  if ($action == 'inplace') {
    // stay here
    $commands[] = ctools_ajax_command_reload();
  }
  else {
    // bounce bounce
    $commands[] = ctools_ajax_command_redirect('user');
  }
  print ajax_render($commands);
  exit;
}

function snowpilot_snowpit_set_frac_cat(&$form, $snowpit_unit_prefs){
	foreach( $form['field_test']['und'] as $delta => $test_result){
					if (is_numeric($delta)){
						// this hides or shows the shear_quality / fracture_character fields based on user prefs. 
						// Most fields, we do this through the gui admin/structure/dependencies
						// shear quality is a show or hide within the 'stability test' field collection, based on frac_category at the node level
						//dsm($form['field_fracture_category']);
						if ($form['field_fracture_category']['und']['#default_value'][0] == 'shear_quality' )  {
							$form['field_test']['und'][$delta]['field_fracture_character']['#type'] = 'hidden';
						}else{
							$form['field_test']['und'][$delta]['field_shear_quality']['#type'] = 'hidden';
						}
						// this hides the Score field, which is set by _entity_presave 
					
						$form['field_test']['und'][$delta]['field_stability_test_score']['#type'] ='hidden';
						//dsm($form['field_test']['und'][0]);
					}
				
				}
	return $form;
}

function snowpilot_set_visibility_field_options(&$form, $snowpit_unit_prefs){
	unset($form['field_snowpit_visibility']['und']['#options']['_none']);
	if (!isset($snowpit_unit_prefs['field_professional_affiliation']) || $snowpit_unit_prefs['field_professional_affiliation'] == '57'){
		unset ($form['field_snowpit_visibility']['und']['#options']['group']);
	}else{
		$group_name = taxonomy_term_load($snowpit_unit_prefs['field_professional_affiliation'])->name;
		
	  $form['field_snowpit_visibility']['und']['#options']['group'] = 'Visible only by my group: '.$group_name;
	}
	
}

function snowpilot_entity_presave($entity, $type){

	if ($type == 'field_collection_item' && $entity->field_name == 'field_test'){
		//if $entity->
		
		// this sets a specific field ( Stability test score ) when the field collection item is saved
		$entity->field_stability_test_score['und'][0]['value'] = _set_test_result_single($entity);
	}elseif ( $type == 'field_collection_item' && $entity->field_name =='field_layer' ){
		//dsm($entity);
		// we can insert other actions in here as necessary, for layers other other field collection items
		
	}
	return $entity;
}

function snowpilot_snowpit_profile_node_form_validate($form,&$form_state){
	// Add serverside validation for stability tests
	foreach( $form_state['values']['field_test']['und'] as $key => $test){
	  if (is_numeric($key) && isset($test['field_stability_test_type']['und'][0]['value']) && $test['field_stability_test_type']['und'][0]['value'] <> ''){ // 
	  	switch ($test['field_stability_test_type']['und'][0]['value']){
				case 'ECT':
				//  Stability test type == ECT , so we check for depth and score fields.
			    if ( $test['field_stability_test_score_ect']['und'][0]['value'] == ''  ) {
			  		form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_stability_test_score_ect", "Please enter an ECT Score result.");
			  	}elseif ( $test['field_stability_test_score_ect']['und'][0]['value'] <> 'ECTX' && $test['field_depth']['und'][0]['value'] == '') {
			  	  form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_depth", "Please enter a depth value for test result.");
			  	}
				break;
				case 'CT':
		      if ( !isset( $test['field_stability_test_score_ct']['und'][0]['value']  ) || ($test['field_stability_test_score_ct']['und'][0]['value'] == '' ) ){
					   	form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_stability_test_score_ct", "Please enter a CT test score result.");
					}elseif( (!isset($test['field_depth']['und'][0]['value']) || $test['field_depth']['und'][0]['value'] == '') &&  $test['field_stability_test_score_ct']['und'][0]['value'] <> 'CTN' ){ 
						form_set_error("field_test][".LANGUAGE_NONE ."][". $key ."][field_depth" , "Please enter a value for depth.");
					}elseif ( isset( $test['field_ct_score']['und'][0]['value'] )){
				    $test_score_ct = $test['field_stability_test_score_ct']['und'][0]['value'];
		        $ct_score = $test['field_ct_score']['und'][0]['value'];
						if ( $ct_score <> ''){
		      	switch ( $test['field_stability_test_score_ct']['und'][0]['value']){
		      		case 'CTE':
		        			if ( $ct_score <1 || $ct_score >10  ){
	                	form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_ct_score", t('You have a Compression Test with Stability Score of '. $test_score_ct.
					      		', which means the CT Score should be between 1 and 10 (inclusive).'));
			        	  }
			       	break;
				      case 'CTM':
				        if ( $ct_score <11 || $ct_score >20  ){
	                form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_ct_score", t('You have a Compression Test with Stability Score of '. $test_score_ct.
						      ', which means the CT Score should be between 11 and 20 (inclusive).'));
				        	}				
				      	break;
				      	case 'CTH':
				        	if ( $ct_score <21 || $ct_score >30  ){
	                	form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_ct_score", t('You have a Compression Test with Stability Score of '. $test_score_ct.
						      	', which means the CT Score should be between 21 and 30 (inclusive).'));
				        	}				
				      	break;
			      	} // end switch CT result type
						}  // end if ct score is not empty
		      } // end "if" we have full CT test results
          break;
					case 'RB':
				    if ( $test['field_stability_test_score_rb']['und'][0]['value'] == ''  ) {
				  		form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_stability_test_score_rb", "Please enter a Rutschblock test result.");
				  	}elseif ( $test['field_stability_test_score_rb']['und'][0]['value'] <> 'RB7' && $test['field_depth']['und'][0]['value'] == '') {
				  	  form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_depth", "Please enter a depth value for Rutschblock test result.");
				  	}					
					break;
					case 'ST':
			      if ( $test['field_stability_test_score_st']['und'][0]['value'] == ''  ) {
			    		form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_stability_test_score_st", "Please enter a Shovel Shear test result.");
			    	}elseif ( $test['field_stability_test_score_st']['und'][0]['value'] <> 'STN' && $test['field_depth']['und'][0]['value'] == '') {
			  	    form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_depth", "Please enter a depth value for Shovel Shear test result.");
			  	  }										
					break;
					case 'SB':
			      if ( $test['field_stability_test_score_sb']['und'][0]['value'] == ''  ) {
			  	  	form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_stability_test_score_sb", "Please enter a Stuffblock test result.");
			     	}elseif ( $test['field_stability_test_score_sb']['und'][0]['value'] <> 'SBN' && $test['field_depth']['und'][0]['value'] == '') {
			    	  form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_depth", "Please enter a depth value for Stuffblock test result.");
			    	}		
					break;
					case 'PST':
				  	if ( !isset( $test['field_depth']['und'][0]['value'] ) || $test['field_depth']['und'][0]['value'] == ''  ){ 
					    form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_depth", "Please enter a depth value for Propagation Saw test result.");
					  }
					  if ( !isset ($test['field_data_code_pst']['und'][0]['value'])){
						  form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_data_code_pst", "Please enter a Data Code value for PST result.");
					  }
					  if ( !isset ($test['field_length_of_saw_cut']['und'][0]['value']) || $test['field_length_of_saw_cut']['und'][0]['value'] == ''){
						  form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_length_of_saw_cut", "Please enter a Length of Saw Cut for PST result.");
					  }
						if (!isset( $test['field_length_of_isolated_col_pst']['und'][0]['value'] ) || $test['field_length_of_isolated_col_pst']['und'][0]['value'] == '' ){
							form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_length_of_isolated_col_pst", "Please enter a Length of Isolated column for PST result.");
						}
					
					break;
			
		    } // end swith test->type
				// this added section makes sure that Stability test type is set.
	  }elseif ( is_numeric($key) && isset($test['field_depth']['und'][0]['value']) && $test['field_depth']['und'][0]['value'] <> ''){
			form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_stability_test_type", "Please enter a Stability Test Type.");
		} // end key is_numeric and test type is not null
		
	} // end foreach test result
	
	//  validate that each layer has a top and bottom depth, at least; unless it is a 'degenerate' layer, which will get chopped off in the submit function
	//
	//  if it lacks the bottom depth, form_set_error on that field
	
	foreach($form_state['values']['field_layer']['und'] as $key=>$layer){
		if ( is_numeric($key) && isset($layer['field_height']['und'][0]['value']) && 
		(  (isset( $layer['field_bottom_depth']['und'][0]['value']) && ($layer['field_bottom_depth']['und'][0]['value'] <> ''))  || (isset($layer['field_hardness']['und'][0]['value']) && ($layer['field_hardness']['und'][0]['value'] <> '' )) || (isset($layer['field_grain_type']['und'][0]['value']) && ($layer['field_grain_type']['und'][0]['value'] <> '')) || (isset($layer['field_grain_size']['und'][0]['value']) && ($layer['field_grain_size']['und'][0]['value'] <> '')) )   ){// all of this test to see if it is a 'real' layer
			// we process through error checking and set any missing fields as needed.
			if ($layer['field_bottom_depth']['und'][0]['value'] == '' ) form_set_error("field_layer][". LANGUAGE_NONE."][" . $key . "][field_bottom_depth", t('Missing Bottom Depth value'));
		}
			
		// Poor mans layer integrity check: make sure that each field_bottom_depth is below field_height, depending on measure_from
			
		if (is_numeric($key) && $form_state['values']['field_depth_0_from']['und'][0]['value'] <> 'top' &&
			 	$layer['field_bottom_depth']['und'][0]['value'] >= $layer['field_height']['und'][0]['value']){
	        form_set_error("field_layer][". LANGUAGE_NONE."][" . $key . "][field_bottom_depth", t('The value of the Bottom Depth field should be smaller than Top Depth.'));
		}else if (is_numeric($key) && $form_state['values']['field_depth_0_from']['und'][0]['value'] == 'top' &&
			 	$layer['field_bottom_depth']['und'][0]['value'] <= $layer['field_height']['und'][0]['value']){
	        form_set_error("field_layer][". LANGUAGE_NONE."][" . $key . "][field_bottom_depth", t('The value of the Bottom Depth field should be greater than Top Depth.'));
			 	}
	}
	return;
}

function snowpilot_snowpit_profile_node_form_submit($form,&$form_state){	
	
//  If the last layer has no bottom depth set, truncate it- 'degenerative' layer
	foreach($form_state['values']['field_layer']['und'] as $key => $layer){
		// If this is a degenerative layer, (i.e. no bottom_depth and no hardness field set ) then we just delete it
		if ( is_numeric($key) && ( $layer['field_bottom_depth']['und'][0]['value'] == '' ) ){
		  unset($form_state['values']['field_layer']['und'][$key]);  // chop off this layer		
		}
	}
	// 
	// For stability tests: if the Score field is not set ( for all except PST type results ), then chop off the degenrate stability test
	foreach($form_state['values']['field_test']['und'] as $key => $test){
		if ( is_numeric($key) && !isset($test['field_stability_test_type']['und'][0]['value'])){ // in this case, we don't even have a test type indicated
			unset($form_state['values']['field_test']['und'][$key]); 		
		} elseif (is_numeric($key) && !isset( $test['field_depth']['und'][0]['value'])){
			if ( (($test['field_stability_test_type']['und'][0]['value'] == 'RB') && !isset($test['field_stability_test_score_rb']['und'][0]['value']))
				||
			(($test['field_stability_test_type']['und'][0]['value'] == 'SB') && !isset($test['field_stability_test_score_sb']['und'][0]['value']))
				||
			(($test['field_stability_test_type']['und'][0]['value'] == 'CT') && !isset($test['field_stability_test_score_ct']['und'][0]['value']))
				||
			(($test['field_stability_test_type']['und'][0]['value'] == 'ECT') && !isset($test['field_stability_test_score_ect']['und'][0]['value']))
				||
			(($test['field_stability_test_type']['und'][0]['value'] == 'ST') && !isset($test['field_stability_test_score_st']['und'][0]['value']))
				||
			(($test['field_stability_test_type']['und'][0]['value'] == 'PST') && !isset($test['	field_data_code_pst']['und'][0]['value']))

			){
				
		  unset($form_state['values']['field_test']['und'][$key]);  // chop off this layer		
			// verified that this works
		  }
		}
	}	
	return $form_state;
}

function _set_test_result_single($test_result){
	if (isset($test_result->field_stability_test_type['und'][0])){
	switch ($test_result->field_stability_test_type['und'][0]['value']){
		case 'ECT':	return $test_result->field_stability_test_score_ect['und'][0]['value'];
		break;
		case 'CT':	return $test_result->field_stability_test_score_ct['und'][0]['value'];
		
		break;
		case 'RB':	return $test_result->field_stability_test_score_rb['und'][0]['value'];
		
		break;
		case 'PST':	return '';
		
		break;
		case 'SB':	return $test_result->field_stability_test_score_sb['und'][0]['value'];
		
		break;
		case 'ST': return $test_result->field_stability_test_score_st['und'][0]['value'];
		
		break;
	}
	}
	return;
}


function snowpilot_snowpit_set_density_titles(&$form, $snowpit_unit_prefs){
	$x= 0;
	while (isset($form['field_density_profile']['und'][$x])){
		$next_layer = $x+1;
		if (isset($form['field_density_profile']['und'][$next_layer])){ $collapsed = ' collapsed'; 
		
		$form['field_density_profile']['und'][$x]['#prefix'] = "<div class='collapsible-container density_num_". $x ." '>".
			"<h3 class='collapsible-handle density-title'>Density Measurement " . $next_layer. ": ". 
				$form['field_density_profile']['und'][$x]['field_density_top']['und'][0]['value']['#default_value'] . 
					_density_unit_fix($snowpit_unit_prefs['field_density_units']).
						" @ ". $form['field_density_profile']['und'][$x]['field_depth']['und'][0]['value']['#default_value'].
						" ". $snowpit_unit_prefs['field_depth_units'].
					 "</h3>". '<div class="collapsible-content collapsed" >';
		}else{
			$form['field_density_profile']['und'][$x]['#prefix'] = "<div class='collapsible-container density_num_". $x ." '>".
				"<h3 class='collapsible-handle density-title'>Density Measurement " . $next_layer. ": </h3>"
				.'<div class="collapsible-content" >';
		
		}
		$form['field_density_profile']['und'][$x]['#suffix'] ="</div> </div>";
		$x++;
	}
	return $form;
}

function snowpilot_snowpit_set_stability_test_titles(&$form, $snowpit_unit_prefs){
	// this will be a fancy one, with compiled stab test output
	$form['field_test']['und']['add_more']['#value'] = "Add Test";
	

	$x= 0;
	while (isset($form['field_test']['und'][$x])){
		$next_layer = $x+1;
		$form['field_test']['und'][$x]['remove_button']['#value'] = "Remove Test";

		if (isset($form['field_test']['und'][$next_layer])){ 
			$form_test_shorthand = stability_test_score_shorthand_form($form['field_test']['und'][$x]);
			$depth_val =( $form['field_test']['und'][$x]['field_depth']['und'][0]['value']['#default_value'] <> '') ? 
				"Depth: ".$form['field_test']['und'][$x]['field_depth']['und'][0]['value']['#default_value']. " ". $snowpit_unit_prefs['field_depth_units'] :	'';
			
			$form['field_test']['und'][$x]['#prefix'] = "<div class='collapsible-container stability_test_num_". $x ." '>".
				"<h3 class='collapsible-handle test-title'>Stability Test " . $next_layer. ": ". $form_test_shorthand ." ".
							 $depth_val . "</h3>". '<div class="collapsible-content collapsed" >';
			
			
			
		}else { // this is the last layer, we don't need any shorthand
			$form['field_test']['und'][$x]['#prefix'] = "<div class='collapsible-container stability_test_num_". $x ." '>".
				"<h3 class='collapsible-handle test-title'>Add Stability Test Result</h3>". '<div class="collapsible-content" >';
			$form['field_test']['und'][$x]['#suffix'] ="</div> </div>";
			
		 // don't put dsm here, it will break the "add another"  functionality with AJAX errors.
	  }
		// here we will attempt to add a "Duplicate test" button and functionality

				
		$x++;
	}
  //dsm($form);

	return $form;
}


function snowpilot_snowpit_set_temp_coll_titles(&$form, $snowpit_unit_prefs){
	$x= 0;
	while (isset($form['field_temp_collection']['und'][$x])){
		$next_layer = $x+1;
		if (isset($form['field_temp_collection']['und'][$next_layer])){ 	
			$form['field_temp_collection']['und'][$x]['#prefix'] = "<div class='collapsible-container temp_num_". $x ." '>".
			"<h3 class='collapsible-handle temp-title'>Temp Point " . $next_layer. ": ". 
				$form['field_temp_collection']['und'][$x]['field_temp_temp']['und'][0]['value']['#default_value'] . "&#176;". 
					$snowpit_unit_prefs['field_temp_units'].
						" @ ". $form['field_temp_collection']['und'][$x]['field_depth']['und'][0]['value']['#default_value'].
						" ". $snowpit_unit_prefs['field_depth_units'].
					 "</h3>". '<div class="collapsible-content collapsed" >';
		}else {
			$form['field_temp_collection']['und'][$x]['#prefix'] = "<div class='collapsible-container temp_num_". $x ." '>".
			"<h3 class='collapsible-handle temp-title'>Temp Point " . $next_layer.
			": </h3>" . '<div class="collapsible-content" >';
			
		}

		$form['field_temp_collection']['und'][$x]['#suffix'] ="</div> </div>";
		$x++;
	}
	return $form;
}

function snowpilot_snowpit_set_layer_titles(&$form, $snowpit_unit_prefs){
	// Start with the overall title of the group
	$form['field_layer']['und']['#title'] = "Snowpack Layers"; // 
	// Add more button:
	$form['field_layer']['und']['add_more']['#value'] = "Add Layer";
	//dsm($form['field_layer']['und']);
	$x=0;
	//dsm($form['field_layer']['und']);
	
	while(isset($form['field_layer']['und'][$x] )){
		// Set remove button text
		$form['field_layer']['und'][$x]['remove_button']['#value'] = "Remove Layer";
		$next_layer = $x+1 ; 
		
		$collapsed = '';
		
		// The next 
		$layer_info = '';
		$this_hardness = '';
		if (isset($form['field_layer']['und'][$x]['field_height']['und'][0]['value']['#default_value']) && ( $form['field_layer']['und'][$x]['field_height']['und'][0]['value']['#default_value'] <> '')
				&& isset($form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#default_value'] ) && $form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#default_value'] <> '' ){  // if this is an existing layer , collapse the box and set the top depth ....
			$collapsed = ' collapsed';
			
			// Set the top of the next field equal to the bottom of the last one.		
			if ( isset( $form['field_layer']['und'][$next_layer])){
				$form['field_layer']['und'][$next_layer]['field_height']['und'][0]['value']['#default_value'] = 
					$form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#default_value'];
			}
			$this_hardness = (isset($form['field_layer']['und'][$x]['field_hardness']['und']['#default_value'][0]) && $form['field_layer']['und'][$x]['field_hardness']['und']['#default_value'][0] <> '') ? 
				', '.$form['field_layer']['und'][$x]['field_hardness']['und']['#default_value'][0] 
				: '' ;
			$layer_info = 	$form['field_layer']['und'][$x]['field_height']['und'][0]['value']['#default_value'].' ' . $snowpit_unit_prefs['field_depth_units'] . ' - ' .
				$form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#default_value']. ' ' . $snowpit_unit_prefs['field_depth_units']  .  $this_hardness; 
			
		}
		$form['field_layer']['und'][$x]['#prefix'] ="<div class='collapsible-container layer_num_". $x ." '>".
			"<h3 class='collapsible-handle layer-title'>Layer " . $next_layer . ": ". $layer_info . "</h3>".
				'<div class="collapsible-content'. $collapsed .'" >';

		$form['field_layer']['und'][$x]['#suffix'] ="</div> </div>";
		
		//
		// this block hides the last layer entry form where the bottom of the previous one was "zero depth"
		//

		if ( isset($form['field_layer']['und'][$x]) && ($snowpit_unit_prefs['field_depth_0_from'] <> 'top') &&
			$form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#default_value'] === '0'){
			unset ($form['field_layer']['und'][$x+1]);
			unset($form['field_layer']['und']['add_more']);
			$form['field_layer']['und'][$x]['#suffix'] = $form['field_layer']['und'][$x]['#suffix'].'<h3 class ="snowpilot-snowpit-bottom">Bottom of Snowpack</h3>';
		}
		
		//$form['field_layer']['und'][$x]['#pre_render'][] = 'snowpilot_graintypes_tweak';
		$x++;
	}
}


function snowpilot_node_view($node, $view_mode){
	if ($node->type == 'snowpit_profile'){
	snowpilot_snowpit_graph_header_write($node);	
		$prefs = snowpilot_unit_prefs_get($node, 'node'); 
		//$node->content['field_air_temp'][0]['#markup'] = $node->content['field_air_temp']['#items'][0]['value']. $prefs['field_temp_units'];
	}
	return $node;
}		

function snowpilot_graintypes_tweak($element){
	dsm($element);
	return ;
}

function snowpilot_field_widget_form_alter(&$element, &$form_state, $context) {
  // Add a css class to widget form elements for all fields of type mytype.
  if ($context['field']['type'] == 'taxonomy_term_reference' && $context['field']['field_name'] == 'field_grain_type' ) {
		//dsm($form_state);
		
		
    // Be sure not to overwrite existing attributes.
    $element['#attributes']['class'][] = 'myclass';
  }
}
		
// use a 'favorite locations' node type to store fields that should be prepopulated on the snowpit profile form.



function snowpilot_snopit_prof_set_suffices(&$form, $snowpit_unit_prefs){
	//dsm($form['field_elevation']['und'][0]);
	$form['field_air_temp']['und'][0]['value']['#field_suffix'] = 'º'.$snowpit_unit_prefs['field_temp_units'];
	$form['field_elevation']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_elevation_units'];
	$form['field_surface_penetration']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
	$form['field_boot_penetration_depth']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
	$form['field_ski_penetration']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
  $form['field_total_height_of_snowpack']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
	
	$form['field_latitude']['und'][0]['value']['#field_suffix'] = "&#176;".$snowpit_unit_prefs['field_latitude_type'];
	$form['field_longitude']['und'][0]['value']['#field_suffix'] = "&#176;".$snowpit_unit_prefs['field_longitude_type'];
	
	$form['field_north']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_latitude_type'];
	$form['field_east']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_longitude_type'];
	
	// not just a suffix, but a real form value ( in core info)
	
	$form['field_utm_zone']['und'][0]['value']['#default_value'] = $snowpit_unit_prefs['field_utm_zone'];
	
	// Repeated per layer
	$x = 0; //count($form['field_layer']['und'] );
	while ( isset($form['field_layer']['und'][$x]) ){
				
				
		$form['field_layer']['und'][$x]['field_height']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units']; //
		$form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$form['field_layer']['und'][$x]['field_density_top']['und'][0]['value']['#field_suffix'] = _density_unit_fix($snowpit_unit_prefs['field_density_units']);
		$form['field_layer']['und'][$x]['field_density_bottom']['und'][0]['value']['#field_suffix'] = _density_unit_fix($snowpit_unit_prefs['field_density_units']);
		$form['field_layer']['und'][$x]['field_grain_size']['und'][0]['value']['#field_suffix'] = 'mm';
		$x++;
	}

	// Repeated per test
	$x = 0; //count($form['field_layer']['und'] );
	while ( isset($form['field_test']['und'][$x]) ){
		$form['field_test']['und'][$x]['field_depth']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$form['field_test']['und'][$x]['field_length_of_saw_cut']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$form['field_test']['und'][$x]['field_length_of_isolated_col_pst']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$x++;
	}
	
	// REpeated per temp collection
	$x = 0;
	while (isset ($form['field_temp_collection']['und'][$x])){
		$form['field_temp_collection']['und'][$x]['field_temp_temp']['und'][0]['value']['#field_suffix'] = "&#176;". $snowpit_unit_prefs['field_temp_units'];
		$form['field_temp_collection']['und'][$x]['field_depth']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$x++;
	}
	// Repeated per density measurement
	$x = 0;
	while ( isset( $form['field_density_profile']['und'][$x])){
		$form['field_density_profile']['und'][$x]['field_depth']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$form['field_density_profile']['und'][$x]['field_density_top']['und'][0]['value']['#field_suffix'] = _density_unit_fix($snowpit_unit_prefs['field_density_units']);
		
		
		$x++;
	}
	
	return;
}

function _density_unit_fix($units){
	return ($units == 'kg_cubic_m' ? 'kg/m&#xb3;' : 'lb/ft&#xb3;');  // this should be fixed so that metric units would be the default
}


function snowpilot_cardinal_wind_dir($degrees){
	if (!is_numeric($degrees)) return;
	switch (true){
		
		case ($degrees >= 360-22.5 || $degrees < 22.5): $card = 'N'; break; 
		case ($degrees >=22.5 && $degrees < 67.5 ): $card = 'NE'; break;
		case ($degrees >=67.5 && $degrees < 112.5): $card = 'E'; break;
		case ($degrees >=112.5 && $degrees < 157.5): $card = 'SE'; break;
		case ($degrees >=157.5 && $degrees < 202.5): $card = 'S'; break;
		case ($degrees >=202.5 && $degrees < 247.5): $card = 'SW'; break;
		case ($degrees >= 247.5 && $degrees < 292.5): $card = 'W'; break;
		case ($degrees >=292.5 && $degrees < 337.5): $card ='NW'; break;
	
	
	}
	return $card;
}

function _snowpilot_find_pit_depth($node){
	if (isset($node->field_total_height_of_snowpack['und'][0]['value']) && $node->field_depth_0_from['und'][0]['value'] == 'top'){
		return $node->field_total_height_of_snowpack['und'][0]['value'];
	}else{
		$ids = array();
		$max = 0;
		foreach ($node->field_layer['und'] as $lay ){ $ids[] = $lay['value']; }
		$all_layers = field_collection_item_load_multiple($ids);
		foreach ($all_layers as $layer){
			if ($layer->field_height > $max ) $max = $layer->field_height ;
			if ($layer->field_bottom_depth > $max ) $max = $layer->field_bottom_depth ;	
		}
		return $max;
	}
	
}


function depth_val($a,$b){
	$a_depth = isset($a->field_depth['und'][0]['value']) ? $a->field_depth['und'][0]['value'] : 0; 
	$b_depth = isset($b->field_depth['und'][0]['value']) ? $b->field_depth['und'][0]['value'] : 0;
	
	switch (true){
		case $a_depth>$b_depth:
			return -1;
		break;
		case $a_depth<$b_depth:
			return 1;
		break;
		case $a_depth == $b_depth:
		  return 0;
		break;
	}	
	
}

function layer_depth_val( $a , $b){
	return ($a->y_val_top > $b->y_val_top) ? 1 : -1 ;
}


//  Returns a string when give a stability test part of a node, eg. $node->field_test['und'][$x]
//  $test is a fieldCollectionEntityObject

function stability_test_score_shorthand($test, $snowpit_unit_prefs){
	$string = '';
	//dsm($test);
	//
	// Let's calculate what the Fracture Character or shear quality part of the string will be
	//
	if ( $snowpit_unit_prefs['field_fracture_category'] == 'shear_quality' && isset($test->field_shear_quality['und'][0]['value'])){
		$fracture = ', ' . $test->field_shear_quality['und'][0]['value'];
	}elseif (isset( $test->field_fracture_character['und'][0]['value'])){
		$fracture = ', ' . $test->field_fracture_character['und'][0]['value'];
	}else{
		$fracture = '';
	}
	//
	//  
	//
	switch ($test->field_stability_test_type['und'][0]['value']){
		case 'ECT':
				$string = $test->field_stability_test_score['und'][0]['value'] . $test->field_ec_score['und'][0]['value'] . $fracture;	
		break;
		case 'PST':
		if ( isset ($test->field_length_of_saw_cut['und'][0]['value']) && 
				isset( $test->field_length_of_isolated_col_pst['und'][0]['value'] ) && 
				isset ($test->field_data_code_pst['und'][0]['value'])){
			$string = 'PST'. $test->field_length_of_saw_cut ['und'][0]['value']."/". 
				$test->field_length_of_isolated_col_pst['und'][0]['value'].
				" (". $test->field_data_code_pst['und'][0]['value']. ")". 
				$fracture;
		}else{ 
			$string = 'PST, missing data';
		}
		break;
		case 'CT':
			if (in_array($test->field_stability_test_score_ct['und'][0]['value'], array('CTE','CTM', 'CTH', 'CTN'  )) && isset($test->field_ct_score['und'][0]['value'])){
				$string = 'CT' . $test->field_ct_score['und'][0]['value'] . $fracture;
			}else{
		  	$string = $test->field_stability_test_score_ct['und'][0]['value'] . $fracture;
			}
		break;	
		case 'RB':
		case 'ST':
		case 'SB':		
			$string = $test->field_stability_test_score['und'][0]['value'] . $fracture;
		break;	
	}
	//
	// Test Multiple would be set previously, by the function that calls this
	if ( $test->multiple > 1 ){
		$string = $test->multiple.'x '.$string;
	}
	
	if ( isset($test->field_depth['und'][0]['value'])){
		$string .= " @".$test->field_depth['und'][0]['value'].$snowpit_unit_prefs['field_depth_units']; 
	}
	return $string;
}

function stability_test_score_shorthand_form($stab_test){
	$string = '';
	if ( !isset( $stab_test['field_stability_test_type']['und']['#default_value'][0] )) return '';
	$shear_quality = isset($stab_test['field_shear_quality']['und']['#default_value'][0]) ? ", ".$stab_test['field_shear_quality']['und']['#default_value'][0] : '' ;
	switch ($stab_test['field_stability_test_type']['und']['#default_value'][0]){
		case 'ECT':
		  $string = $stab_test['field_stability_test_score_ect']['und']['#default_value'][0];
			if (in_array( $stab_test['field_stability_test_score_ect']['und']['#default_value'][0], array( 'ECTP','ECTN' ) ) && isset ($stab_test['field_ec_score']['und'][0]['value']['#default_value'] )){
				$string .= " ". $stab_test['field_ec_score']['und'][0]['value']['#default_value'];		
			}
		
		break;
		case 'PST':
			$string = 'PST'. $stab_test['field_length_of_saw_cut']['und'][0]['value']['#default_value']."/". $stab_test['field_length_of_isolated_col_pst']['und'][0]['value']['#default_value']." (". $stab_test['field_data_code_pst']['und']['#default_value'][0]. ")";
		
		
		break;
		case 'CT':
	  	$string = $stab_test['field_stability_test_score_ct']['und']['#default_value'][0];
			if (in_array($stab_test['field_stability_test_score_ct']['und']['#default_value'][0], array('CTE','CTM', 'CTH', 'CTN'  )) && isset($stab_test['field_ct_score']['und'][0]['value']['#default_value'])){
				$string .= $stab_test['field_ct_score']['und'][0]['value']['#default_value']. " ". $stab_test['field_shear_quality']['und']['#default_value'][0];
			}
		break;	
		case 'RB':
	  $string = $stab_test['field_stability_test_score_rb']['und']['#default_value'][0]. $shear_quality; break;
		
		case 'ST':
	  $string = $stab_test['field_stability_test_score_st']['und']['#default_value'][0]. $shear_quality; break;
		
		case 'SB':
		  $string = $stab_test['field_stability_test_score_sb']['und']['#default_value'][0]. $shear_quality;		break;	
	}

	return $string;
	
}

function snowpilot_user_edit(){
  global $user;
  drupal_goto('user/'.$user->uid.'/edit');
	
}

function snowpilot_user_has_role($roles) {  
	global $user;	
    if (in_array($roles, $user->roles)) {
      return TRUE;
    }
 
  return FALSE; 
}

function snowpilot_graph_field_trunc(&$img,$string,$x_limit){
	
}
/*
//  This function creates a pitxml based on the node information passed to it. should be compliant with the snowpilot datamodel.
//
//
*/
function snowpilot_node_write_pitxml($node){
	$snowpilot_xmldoc = new DOMDocument('1.0', 'UTF-8');
	$snowpilot_PitCore = $snowpilot_xmldoc->createElement("Pit_Observation"); $snowpilot_xmldoc->appendChild($snowpilot_PitCore);
	$snowpilot_User = $snowpilot_xmldoc->createElement("User"); $snowpilot_PitCore->appendChild($snowpilot_User);
	$snowpilot_Location = $snowpilot_xmldoc->createElement("Location"); $snowpilot_PitCore->appendChild($snowpilot_Location);
	$snowpilot_Layer = $snowpilot_xmldoc->createElement("Layer"); // ...but we have multiple layers
	$snowpilot_ShearTest = $snowpilot_xmldoc->createElement("Shear_Test_Result"); // Likewise, multiple shear test results
	$snowpilot_Density = $snowpilot_xmldoc->createElement("Density_Profile");
	$snowpilot_Temp = $snowpilot_xmldoc->createElement("Temperature_Profile");
	
	//PitCore Attributes: activities, aviLoc,iLayerNumber, bld, stability,avipit,incline,winDir,skiAreaPit ,bcPit, testPit,windspeed,aspect,skiBoot,measureFrom,sky,sufacePen, windloading,heightOfSnowpack,precip , serial, version,pitNotes,crownObs,timestamp,iDepth
	$activities = $snowpilot_xmldoc->createAttribute("activities");
	$activities->value = _generate_specifics_string($node);
	$snowpilot_PitCore->appendChild($activities);
	
	dsm($node);
	//aviLoc - or 'Pit is near avalanche at what point?'
	$aviLoc = $snowpilot_xmldoc->createAttribute("aviLoc");
	$aviLoc->value = isset($node->field_near_avalanche['und'][0]['value']) ? $node->field_near_avalanche['und'][0]['value'] : '' ;
	$snowpilot_PitCore->appendChild($aviLoc);
	// iLayerNumber
	// this implementation assumes that the layers are in numerical order from top down; item_id is a unique id in field collections, can't use it.
	$iLayerNumber = $snowpilot_xmldoc->createAttribute("iLayerNumber");	
	$ids = array();
	foreach ($node->field_layer['und'] as $lay ){ $ids[] = $lay['value']; }
	$all_layers = field_collection_item_load_multiple($ids);
	$iLayerNumber_value = 1;	
	foreach($all_layers as $x => $layer){
		if ($layer->field_this_is_my_layer_of_greate['und'][0]['value'] == '1') { $iLayerNumber->value = $iLayerNumber_value ; }else{
			$iLayerNumber_value++;
		}
	}
  $snowpilot_PitCore->appendChild($iLayerNumber);
	//
	//bld is the build number from the snowpilot desktop app. for this case, we will use drupal version 7.xx 
	$bld = $snowpilot_xmldoc->createAttribute("bld");
	$bld->value = VERSION;
	$snowpilot_PitCore->appendChild($bld);
	//
	// stability
	$stability = $snowpilot_xmldoc->createAttribute("stability");
	$stability->value = isset($node->field_stability_on_similar_slope['und'][0]['value']) ? $node->field_stability_on_similar_slope['und'][0]['value'] : '' ;
	$snowpilot_PitCore->appendChild($stability);
	//
	// aviPit
	$aviPit = $snowpilot_xmldoc->createAttribute("aviPit");
	$aviPit->value = (isset($node->field_adjacent_to_avy['und'][0]['value'] ) && $node->field_adjacent_to_avy['und'][0]['value'] == 1  ) ? 'true' : 'false';
	$snowpilot_PitCore->appendChild($aviPit);
	//
	// incline
	$incline = $snowpilot_xmldoc->createAttribute("incline");
	$incline->value = isset($node->field_slope_angle['und'][0]['value']) ? $node->field_slope_angle['und'][0]['value'] : '' ;
	$snowpilot_PitCore->appendChild($incline);
	//
	// winDir
	$winDir = $snowpilot_xmldoc->createAttribute("winDir");
	$winDir->value = isset($node->field_wind_direction['und'][0]['value']) ? snowpilot_cardinal_wind_dir($node->field_wind_direction['und'][0]['value']) : '' ;
	$snowpilot_PitCore->appendChild($winDir);
	//
	//skiAreaPit
	$skiAreaPit = $snowpilot_xmldoc->createAttribute("skiAreaPit");
	$skiAreaPit->value = (isset($node->field_pit_dug_in_a_ski_area['und'][0]['value']) && $node->field_pit_dug_in_a_ski_area['und'][0]['value'] == 1 )? 'true' : 'false' ;
	$snowpilot_PitCore->appendChild($skiAreaPit);
	//
	//
	// bcPit        Trinary: true , false ,or '' unset
	$bcPit = $snowpilot_xmldoc->createAttribute("bcPit");
	if ( !isset($node->field_pit_is_representative_of_b['und'][0]['value']) ){
		$bcPit->value = '';
	}elseif($node->field_pit_is_representative_of_b['und'][0]['value'] == '1' ){
		$bcPit->value = 'true';
	}else{
		$bcPit->value = 'false';
	}
	$snowpilot_PitCore->appendChild($bcPit);
	//
	//
	// testpit
	$testPit = $snowpilot_xmldoc->createAttribute("testPit");
	$testPit->value = (isset($node->field_pit_dug_in_a_ski_area['und'][0]['value']) && $node->field_pit_dug_in_a_ski_area['und'][0]['value'] == 1 ) ? 'true' : 'false' ;
	$snowpilot_PitCore->appendChild($testPit);
	//
	//windspeed
	$windspeed = $snowpilot_xmldoc->createAttribute("windspeed");
	$windspeed->value = (isset($node->field_wind_speed['und'][0]['value']) ) ? $node->field_wind_speed['und'][0]['value'] : '' ;
	$snowpilot_PitCore->appendChild($windspeed);
	//
	// aspect
	$aspect = $snowpilot_xmldoc->createAttribute("aspect");
	$aspect->value = isset($node->field_aspect['und'][0]['value']) ?  $node->field_aspect['und'][0]['value'] : '' ;
	$snowpilot_PitCore->appendChild($aspect);
	//
	// skiBoot     Trinary
	$skiBoot = $snowpilot_xmldoc->createAttribute("skiBoot");
	if ( !isset($node->field_surface_penetration['und'][0]['value']) ){
		$skiBoot->value = '';
	}elseif($node->field_pit_is_penetration['und'][0]['value'] == 'boot' ){
		$skiBoot->value = 'boot';
	}else{
		$skiBoot->value = 'ski';
	}
	$snowpilot_PitCore->appendChild($skiBoot);
	//
	// surfacePen - depends on whether ski or boot penetration
	$surfacePen = $snowpilot_xmldoc->createAttribute("surfacePen");
	if ($skiBoot->value == 'boot'){
		$surfacePen->value = isset($node->field_boot_penetration_depth['und'][0]['value']  ) ?
			$node->field_boot_penetration_depth['und'][0]['value'] : '' ;
	}elseif($skiBoot->value == 'ski' ){
		$surfacePen->value = isset($node->field_ski_penetration['und'][0]['value']  ) ?
			$node->field_ski_penetration['und'][0]['value'] : '' ;
	}else{
		$surfacePen->value = '';
	}
	$snowpilot_PitCore->appendChild($surfacePen);
	//
	//  measureFrom
	$measureFrom = $snowpilot_xmldoc->createAttribute("measureFrom");
	$measureFrom->value = (isset($node->field_depth_0_from['und'][0]['value']) && $node->field_depth_0_from['und'][0]['value'] == 'top' ) ? 'top' : 'bottom' ; 
	$snowpilot_PitCore->appendChild($measureFrom);
	
	
	
	
	
	
	$outXML = $snowpilot_xmldoc->saveXML();
	$formatted_xml = new DOMDocument('1.0', 'UTF-8');
	$formatted_xml->preserveWhiteSpace = false;
	$formatted_xml->formatOutput = true;
	$formatted_xml->loadXML($outXML);
	$final_xml = $formatted_xml->saveXML();
	//dsm($final_xml);
	return $final_xml;
}

