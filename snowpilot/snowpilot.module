<?php

include_once('includes/unit_prefs.inc.php');
include_once('includes/graphing_functions.inc.php');
include_once('includes/export_xml.inc.php');
//include_once('includes/snowpilot_mapping.php');
//include_once('includes/snowpilot_mapping_view.php');


//function snowpilot_menu_alter(){
	//}

function snowpilot_menu(){
	$items['snowpilot/%ctools_js/login']= array(
		'title' => 'Modal Login',
		'page callback' => 'snowpilot_login',
  	'page arguments' => array(1),
 	 	'access callback' => TRUE,
 		'type' => MENU_CALLBACK,
	);
  $items['snowpilot/%ctools_js/login/%'] = array(
      'title' => 'Post-Login Action',
      'page callback' => 'snowpilot_login_success',
      'page arguments' => array(1, 3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
	$items['snowpilot/user/edit'] = array(
		'title' => 'Edit Snowpit Preferences',
		'page callback' => 'snowpilot_user_edit',
		'access callback' => 'snowpilot_user_has_role',
		'access arguments' => array ('authenticated user'),
		'type' => MENU_NORMAL_ITEM,	
		
	);

	$items['snowpit/%node/download'] = array(
		'title' => 'Download snowpit jpg',
		'page callback' => 'snowpilot_node_snowpit_download',
		'page arguments' => array(1),
		'access callback' => 'node_access',
		'access arguments' => array( 'view', 1),
		'type' => MENU_CALLBACK,
	);
	$items['snowpilot/%user/remove_affiliation'] = array(
		'title' => 'How is user to be removed?',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('snowpilot_remove_affiliation_form', 1),
		'access callback' => 'snowpilot_org_admin_access',
		'access arguments' => array(1),
		'type' => MENU_CALLBACK,		
	);
	
	return $items;
}

function snowpilot_permission(){
	$permission = array(
		'lock snowpit' => array(
			'title' => t('Lock Snowpit'),
			'description' => t('Lock Pit to prevent further editing.'),			
		),
	);
	return $permission;
}

function snowpilot_remove_affiliation_form($form, &$form_state, $account){
	$form['#access'] = 'snowpilot_org_admin_access';
	$form_state['storage']['account'] = $account;
	//dsm($item);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Submit',
		'#weight' => '25',
		
	);
	$form['snowpilot_remove_affiliation'] = array(
		'#type' => 'radios',
		'#title' => t('How will @theuser be removed from the group?', array( '@theuser' => $account->name)),
		'#description' => t(''),	
		'#weight' => '15',
		'#required' => TRUE,
		'#options' => array(
			'remove' => t('Remove'),
			'suspend' => t('Suspend'),
		),
	);
 
	$form['snowpilot_remove_affiliation']['remove'] = array( 
	  '#description' => t('Use this if this user should never have been a part of your group. The user\'s account and snowpits will no longer be associated with your organization.' ),
	);
	$form['snowpilot_remove_affiliation']['suspend'] = array( 
	  '#description' => t('Use this option if this forecaster has worked for your group, and has entered data which should remain associated with your group. The user will not be ble to login, but may create a new account.' ),
	);
	return $form;
	
}


function snowpilot_remove_affiliation_form_submit($form, &$form_state){
	global $user;
	$org_admin_user = entity_metadata_wrapper('user', $user);
	$org_admin_info = $org_admin_user->field_professional_affiliation->value();
	$user_wrapper = entity_metadata_wrapper( 'user' , $form_state['storage']['account']);
	if ( $user_wrapper->field_professional_affiliation->value() == $org_admin_user->field_professional_affiliation->value() ){
	  $admin_email = $user->mail;
		$user_mail = $user_wrapper->mail->value();
		$user_name = $user_wrapper->name->value();
		
  	if ($form_state['values']['snowpilot_remove_affiliation'] == 'remove'){
		  $user_wrapper->field_professional_affiliation->set( 57 );
		  $body = "<h2>The user ".$user_wrapper->label()." has been removed from ". $org_admin_user->field_professional_affiliation->label()." </h2> ";
      
  	}elseif ( $form_state['values']['snowpilot_remove_affiliation'] == 'suspend' ){
			$user_wrapper->roles->set(array('2'));
		  $body = $user_name.' has been suspended. Existing snowpits remain associated with ' . $org_admin_user->field_professional_affiliation->label();		
      
  	}
    drupal_mail('snowpilot', 
		  $form_state['values']['snowpilot_remove_affiliation'], // mail key equals the value of how to suspend/remove
			'admin@snowpilot.org,'.$user_mail ,
			 user_preferred_language($user),
			  array ( 'org_admin_user' => $org_admin_user , 'user_wrapper' => $user_wrapper), 'admin@snowpilot.org' , TRUE  );
		
		$user_wrapper->save();
		
	}else{
	  $body = "<h2>The user ".$user_wrapper->label()." is not currently part of ". $org_admin_user->field_professional_affiliation->label()." </h2> ";
  }
	drupal_set_message($body);
	return;
}

function snowpilot_mail( $key, &$message, $params){
	$org_admin_user = $params['org_admin_user'];
	$user_wrapper = $params['user_wrapper'];
	switch ($key){
		case 'removed':
	    if (isset($params['subject'])) {
	      $message['subject'] = $params['subject'];
	    } else {
	    	$message['subject'] = '[SnowPilot] User '.$user_wrapper->name->value(). ' has been removed from group '.$org_admin_user->field_professional_affiliation->label();
			}
	    $message['body'][] = 'Dear '.$user_wrapper->name->value().',
			
Thank you for using SnowPilot. Your group affiliation has changed from '. $org_admin_user->field_professional_affiliation->label() .' to "Individual / Unaffiliated" since the group\'s administrator has removed you. Your profile is still active and all your pits are still associated with you. 

If you chose the last group in error, you are free to select your correct group on your User Preferences page: 
http://snowpilot.org/user/' .$user_wrapper->uid->value(). '/edit

SnowPilot Admin Team';		
	    if (isset($params['headers']) && is_array($params['headers'])) {   
	      $message['headers'] += $params['headers'];
  	  }
		
		break;
		case 'suspend':
      if (isset($params['subject'])) {
        $message['subject'] = $params['subject'];
      } else {
      	$message['subject'] = '[SnowPilot] User '.$user_wrapper->name->value(). ' has been suspended from group '.$org_admin_user->field_professional_affiliation->label();
		  }
    $message['body'][] ='Dear '. $user_wrapper->name->value() .',

Thank you for using SnowPilot. Up until now, your profile and all your pits have been associated with the '. $org_admin_user->field_professional_affiliation->label() .' group. The group administer has suspended your account. What this means is:

    1. You can still view and download all your pits using your current username and password.
    2. If you would like to make new snowpits, create another account with a different username at http://snowpilot.org/user/register .
    3. Remember, all pits are saved in the database. Nothing is lost. 

All the best,

SnowPilot Admin Team';
		
		break;
		case 'org-admin-notify':
      if (isset($params['subject'])) {
        $message['subject'] = $params['subject'];
      } else {
      	$message['subject'] = '[SnowPilot] User '.$user_wrapper->name->value(). ' has joined group '.$org_admin_user->field_professional_affiliation->label();
		  }
			$message['body'][] = 'Dear '. $org_admin_user->name->value() .',
			
A new user '. $user_wrapper->name->value(). ' has been added to your group '.$org_admin_user->field_professional_affiliation->label().'.

You may review this user at your organization administration page:
http://snowpilot.org/organization2

Thanks,

The SnowPilot Admin Team';
		break;
	}
	return;
}

function snowpilot_user_org(&$argument){
	//dsm($argument);
	
	global $user;
	$user_wrapper = entity_metadata_wrapper( 'user' , $user);
	$user_info = $user_wrapper->field_professional_affiliation->value();
	$argument->validated_title = $user_wrapper->field_professional_affiliation->label();
	return $user_info->tid;
}

function snowpilot_org_admin_access($item){
	global $user;
	$account = user_load($user->uid);
	//dsm($item);
	// Administrators have permissions to edit all users
	// Organization Admins have permissions to edit their users
	// Everybody can edit their own account.
	if ( (in_array( 'org admin', $user->roles ) && ( $item->field_professional_affiliation['und'][0]['tid'] == $account->field_professional_affiliation['und'][0]['tid'] ) 
	  ) || user_access( 'administer users') 
			|| $item->uid == $account->uid
	  ){
		return TRUE;
		
	}else{
		return FALSE;
	}
}

function snowpilot_node_snowpit_download($node, $format = 'jpg'){
	if ( node_access('update', $node) && user_access('lock snowpit')){
		// if node is not locked for editing, and there is NOT a snowpit in the avscience db which would include the same serial #, then we cna save and lock it!
		if ( !$node->sticky && !snowpilot_avscience_pit_exists($node) ){
			// then we reset the the pit to sticky == true ( i.e. LOCKED )
			$node_wrapper = entity_metadata_wrapper('node', $node);
			$node_wrapper->sticky->set(true);
			$node_wrapper->save();
			watchdog('snowpilot', "Snowpit $node->nid set to LOCKED.");
			// and save it to the avscience db
			if ( snowpilot_avscience_pit_write($node)) {
				watchdog('snowpilot', "Snowpit $node->nid sucessfully saved to avscience db.");
			}
			//
		}
	}
	if (node_access('view', $node)){
	  $format = (isset($format) && $format <> '' ) ? $format : 'jpg';
    $snowpit_name_local = $node->title . '-' . date ('d-M', strtotime($node->field_date_time['und'][0]['value']) ).'.'.$format;
    header('Content-Disposition: attachment; filename="'. $snowpit_name_local .'"');
	 // header('Location: /node/'.$node->nid);
		switch ($format){
			case 'png':
			  header('Content-type: image/png', NULL, 0);
				imagepng(snowpilot_snowpit_graph_header_write($node, 'png'));
				break;
			case 'pdf':
			case 'jpg':
	      header('Content-type: image/jpeg');
		    imagejpeg(snowpilot_snowpit_graph_header_write($node, 'jpg'), NULL, 100);
			break;
			case 'xml':
				header('Content-type: application/xml');
				echo snowpilot_node_write_pitxml($node);
			break;
			case 'caaml':
				header('Content-type: application/xml');
				echo snowpilot_node_write_caaml($node);
			break;
			}
			//drupal_goto('node/'.$node->nid);
			
	  // drupal_goto('sites/default/files/snowpit-profiles/graph-'. $node->nid .'.jpg');
  }else{
  	drupal_access_denied();
  }
}


function snowpilot_avscience_pit_exists($node){
	include_once (DRUPAL_ROOT.'/sites/default/db_settings.php' );

	Database::addConnectionInfo('avscience_db', 'default', $test_db );// $avsci_db_info
  $account = user_load($node->uid);	
	
	db_set_active('avscience_db');
	//
	//   performing query to see if it exists under avscience:LOCAL_SERIAL
	$query = "SELECT * FROM `PIT_TABLE` WHERE LOCAL_SERIAL = '". $account->name.$node->created."000' ";
  $results = db_query($query);
	$records = array();
  while ( $record = $results->fetch() )	{
	  $records[] = $record;
  }
	db_set_active();
	if ( count( $records)){
			watchdog('snowpilot' , "snowpit serial exist:$account->name$node->created : true". var_export($records, TRUE));
			return true;
	}else{
		watchdog('snowpilot' , "snowpit serial exist:$account->name$node->created :  false");
		
		return false;
	}

}
function snowpilot_avscience_pit_write($node){
	// 
	
	return true;
}

function snowpilot_user_login(&$edit, $account){
	snowpilot_user_unit_prefs_check($account->uid, FALSE);
	return;
}

function snowpilot_init(){
	
	drupal_add_js('sites/all/modules/snowpilot/js/snowpilot.js');
	$user_agent = $_SERVER['HTTP_USER_AGENT'];
	if ( strpos($user_agent , 'Mac OS X') && ( strpos($user_agent , 'Chrome') || strpos($user_agent , 'Safari') ) ){
		if ( (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'snowpit-profile') || arg(0) == 'user' ){
			drupal_set_message("You are using Mac OSX in combination with Safari or Chrome. 
				<p>Firefox is the recommended browser for Mac OSX because the 'grain type symbols' display correctly in the dropdown list of the 'Add New Snowpit' form.
				 <p>Note that the grain types will be displayed properly in all other settings, such as the 'live profile' section, and on the final graph.
			   <p>However, for the best user experience, it is recommended that you swith to using Firefox.", 'warning');
			
		}
		
		
		
	}
	
}
function snowpilot_form_alter(&$form, &$form_state, $form_id){
	// fields that will need to have the suffix changed according to the users prefs. 
	//	
	
	global $user;
	switch($form_id ){
		case 'snowpit_profile_node_form':
		$node = $form_state['node'];
    if ($node->type == 'snowpit_profile'){ // this might be rendundant for the switch/case above.

			
			// these are one-off text changes that don't seem to require their own function
			$form['#submit'][] = 'snowpilot_snowpit_profile_node_form_submit';
			$form['#validate'][] = 'snowpilot_snowpit_profile_node_form_validate';
			$form['actions']['submit']['#value'] = 'Save and Preview';
			$form['actions']['delete']['#value'] = 'Delete Snowpit'; 
			$form['field_density_profile']['und']['add_more']['#value'] = "Add Density";
			$form['field_temp_collection']['und']['add_more']['#value'] = "Add Temperature";
			$form['title']['#maxlength'] = 22;
			$form['title']['#description'] = 'Name must be 22 characters or less.';
			$form['options']['sticky']['#title'] = 'LOCK Snowpit Profile to prevent editing';
			$form['field_precipitation']['und']['#options']['_none'] = '' ;
			// copy actions to new item
			$form['actions2'] = $form['actions'];
      $form['actions2']['submit']['#value'] = "Save Snowpit and Preview";
			$form['actions2']['#weight'] = -100;			

			if( !isset($node->nid) || isset($node->is_new) ){ // a new snowpit profile node, find $unit_prefs from $user
				if ( snowpilot_user_unit_prefs_check($user->uid)){ // this check function verifies that we have a full set of unit preferences, etc, setup for this user. It redirects to the user /edit page if one or more are lacking
					// set the unit prefs on the snowpit node form.
					$account = user_load($user->uid);
					$snowpit_unit_prefs = snowpilot_unit_prefs_get($account);  
			
					snowpilot_snopit_prof_unit_prefs_set($form, $snowpit_unit_prefs);	
					// Put a fake "delete" link above the rest of the items
						$form['actions2']['pre_delete'] 	= array( 
								'#type' => 'container',
								'#weight' => '5',
								'und' =>array(
									0 => array(
										'markup' => array( '#markup' => '<div class = "delete_pit_wrapper"><a href = "/node/add/snowpit-profile"class = "" >Delete Snowpit</a> </div>',
									  ),
									),
								),
		
							);
							$form['field_date_time']['und'][0]['#default_value']['value'] = date('Y-m-d 00:00:00');
				}
				// new pits accordian js settings
				//
				/*
				$form['#attached']['js'][] = array(
					'type' => 'file',
					'data' => drupal_get_path('module', 'snowpilot'). '/js/accordion-new-pit.js',
				);
				*/
				
			}else{ // not a new node, but an edited one, so load the unit prefs from the existing $node. The array_merge ensures that values not set on the node ( e.g. first name or professional afilliation), ARE still available in the $unit_prefs. preference  values in the node will overwrite those in the user
				$account = user_load($node->uid);
				$snowpit_unit_prefs = snowpilot_unit_prefs_get($account);  

				$snowpit_unit_prefs = array_merge( $snowpit_unit_prefs, snowpilot_unit_prefs_get($node, 'node'));  
				//
				// exisiting pits accordion js settings
				//
				/*$form['#attached']['js'][] = array(
					'type' => 'file',
					'data' => drupal_get_path('module', 'snowpilot'). '/js/accordion-existing-pit.js',
				);
				*/
				
			}
			$form['#after_build'][] = 'snowpilot_snowpit_profile_after_build';
			
			// Done wiwth new / or / existing pit logic, now we do things to all pits
			/*if ($snowpit_unit_prefs['tempUnits'] == 'C' ){
				$form['#attached']['js'][] = array(
					'type' => 'file', 
					'data' => drupal_get_path('module','snowpilot') . '/js/negative_C_degrees.js',
				);
			}
	*/
			 
			$form['field_layer']['#prefix'] = '<div>';
			$form['field_layer']['#suffix'] = '</div>';
			$form['field_loaction']['und']['#config']['level_labels']['labels'] = array( 0 => 'Region' , '1' => 'Mountain Range' );
			
			snowpilot_snopit_prof_set_suffices($form, $snowpit_unit_prefs);
			
			
			snowpilot_snowpit_set_layer_titles($form, $snowpit_unit_prefs,$form_state);
			
			//dsm($form_state);
			snowpilot_snowpit_set_temp_coll_titles($form, $snowpit_unit_prefs);
			
			snowpilot_snowpit_set_density_titles($form, $snowpit_unit_prefs);

			snowpilot_snowpit_set_stability_test_titles($form, $snowpit_unit_prefs);
						
			snowpilot_snowpit_set_frac_cat($form, $snowpit_unit_prefs);
			
			snowpilot_set_visibility_field_options($form, $snowpit_unit_prefs);
			
			snowpilot_snowpit_set_tester_fields($form);
			
		} // end case node->type == snowpit prof
		break;
		case 'user_login':
		case 'user_login_block':
			$form['name']['#description'] = ''; //t('Snowpilot username, or email address');
			$form['pass']['#description'] ='';
//			drupal_set_message(var_export( $form, TRUE));
			$form['links'] = array (
			  '#weight' => 20,
			  '#markup' => '<a href="/user/password" title="Request new password via e-mail.">Forgot Password?</a>', 
			);
			$form['actions']['#weight'] = 10;
		break;
		case 'views_exposed_form':
			if( $form['#id'] == 'views-exposed-form-snowpit-list-page'){
				//$form['field_loaction_tid']['#size'] = '3';
				$form['uid_current']['#options'] = array( 'All' => 'All Snowpits', 1 => 'Just my snowpits');
				$form['field_practice_pit_value']['#options'] = array(  0 => 'Exclude Practice Pits' ,'All' => 'Include Practice Pits');
				if ( $user->uid == 0 ){
					$form['uid_current']['#access'] = FALSE;
					
				}
				$form['#after_build'][] = 'snowpit_list_view_after_build';
			}	
		break;
		case 'user_profile_form':
			// this works, but needs to be expanded to include all/any fields that are not filled in, but should be.
			//$form['field_fracture_category']['#attributes']['class'][] = 'error';
			
			// LOCK the Professional Affiliation field after the user has selected something
			snowpilot_lock_professional_affil($form);
			//
			// Clean up the timezone list in a subsequent function, after_build
	
		  if (isset($form['#user']->timezone)) {
		      // edit timezone list
		      $form['#after_build'][] = 'snowpilot_timezone_modify';
		    }
			$form['#after_build'][] = 'snowpilot_password_field';
			$form['#validate'][] = 'snowpilot_user_profile_form_validate';	
			$form['#submit'][] = 'snowpilot_user_profile_form_submit';
			
		break;
		// change 'sticky node' to 'snowpit locked, submitted to avscience DB'
		case 'node_admin_content':
		  $form['admin']['options']['operation']['#options']['sticky'] = 'Snowpit Profile is LOCKED for editing (disallow user editing)';
		  $form['admin']['options']['operation']['#options']['unsticky'] = 'UNLOCK Snowpit Profile (allow user edit)';
		break;
		case'node_type_form':
			if($form_state['build_info']['args'][0]->type == 'snowpit_profile'){
			  $form['workflow']['node_options']['#options']['sticky']= 'LOCK Snowpit Profile after the first time user saves.';
			}
		break;
		case 'user_pass':
	  	// unset($form_state['submit']); //????
			
		  $form['#submit'][] = 'snowpilot_user_pass_submit';
		
		break;
		case 'user_register_form':
			$form['account']['notify']['#default_value'] = TRUE;
			// for some reason changing the name of this button breaks the HS dropbox form.
			$form['#validate'][] = 'snowpilot_new_user_register_validate';
			
			$form['#submit'][] = 'snowpilot_new_user_register_submit';
		break;
		case 'taxonomy_form_term':
			
			
			if ( !user_has_role( 3 ) ){ // everybody but administrators
				$form['name']['#disabled'] = TRUE;
				$form['description']['#access'] = FALSE;
				$form['relations']['#access'] = FALSE;
				//dsm($form);
			}
		
		
		break;
			

	} // end switch
	return $form;
}

function snowpilot_user_profile_form_submit($form, &$form_state){
	// get org admins for this group
	global $user;
	$org_admins = array();
	//if ( $user->uid == $form_state['values']['uid']) { // we only call this if the user is changing their own prof affil.
		if ( $form['field_professional_affiliation']['und']['#value'][0]['tid'] <> $form['field_professional_affiliation']['und']['#default_value'][0]){
			$user_wrapper = entity_metadata_wrapper( 'user', user_load($form_state['values']['uid']));
	    $tid = $form['field_professional_affiliation']['und']['#value'][0]['tid'];
	    $query = new EntityFieldQuery();
	    $query->entityCondition('entity_type', 'user')
	      ->fieldCondition('field_professional_affiliation' ,  'tid' , $tid , '=');
	    $result = $query->execute();
			$group_users = array_keys($result['user']);
			$group = user_load_multiple($group_users);
			foreach($group as $individual){
				if ( isset($individual->roles[6])){
					$org_admins[] = $individual;
					$org_admin_user = entity_metadata_wrapper( 'user', $individual);
			    drupal_mail('snowpilot', 
					  'org-admin-notify', // 
						$individual->mail ,
						 user_preferred_language($individual),
						  array ( 'org_admin_user' => $org_admin_user  , 'user_wrapper' => $user_wrapper), 'admin@snowpilot.org' , TRUE  );
				}
			}
			
			if ( !count ( $org_admins) && !in_array( $tid , array ('none', 108, 57, 59, 60, 62, 58, 61, 172) )){
		    drupal_set_message('<h3>You have joined the group '. $user_wrapper->field_professional_affiliation->label().'</h3>
					<p>If you would like to manage other users and snowpits within your group, please contact us at admin@snowpilot.org', 'warning');
			}
	  }
		//}
	
}

function snowpilot_new_user_register_validate(&$form, &$form_state){
		
	if (( $form['field_phone']['und'][0]['value']['#value'] == '%phone_short%' )
		|| ( $form['field_first_name']['und'][0]['value']['#value'] == $form['field_last_name']['und'][0]['value']['#value'])
	){
	  form_set_error('account_password', "Invalid login");
		watchdog('snowpilot', 'User creation blocked due to phone_short or double name syntax');
		drupal_goto('node/5');
  }
}

function snowpilot_user_profile_form_validate(&$form, &$form_state){
	
	if ($form['field_professional_affiliation']['und']['#value'][0]['tid'] == '226' ){
		form_set_error('field_professional_affiliation', 'Please choose a Ski Patrol, or create a new one.');
	}elseif ($form['field_professional_affiliation']['und']['#value'][0]['tid'] == '243' ){
		form_set_error('field_professional_affiliation', 'Please choose an Avalanche Center, or create a new one.');
	}elseif ($form['field_professional_affiliation']['und']['#value'][0]['tid'] == '245' ){
		form_set_error('field_professional_affiliation', 'Please choose an Education group, or create a new one.');
	}elseif ($form['field_professional_affiliation']['und']['#value'][0]['tid'] == '244' ){
		form_set_error('field_professional_affiliation', 'Please choose a Ski or Snowmobile Guide Service, or create a new one.');
	}elseif ($form['field_professional_affiliation']['und']['#value'][0]['tid'] == '246' ){
		form_set_error('field_professional_affiliation', 'Please choose a Department of Transportation, or create a new one.');
	}
	
}

function snowpilot_new_user_register_submit(){
	global $user;
	// auto set the 'forecaster' role. It gets removed if need be later.
	$user_wrapper = entity_metadata_wrapper( 'user' , $user);
	$user_wrapper->roles->set(array('2', '4'));
	$user_wrapper->save();
	
	drupal_set_message( 'Have questions or confused? Check out the <a href="/documentation">Getting Started Page</a>.', 'warning');
	drupal_goto('user/'. $user->uid .'/edit', array( 'query' => array( 'destination' => 'node/5')));
	
}

function snowpilot_snowpit_profile_after_build($form, &$form_state){
  drupal_add_library('system', 'ui.accordion');
	//
	// add the js to make lat and long negative if they should be.
	$snowpit_unit_prefs = snowpilot_unit_prefs_get($form_state['node'],'node');  
	
 if ( $form['field_latitude_type']['und']['#default_value'][0] == 'S' )	{
	 $form['#attached']['js'][] = array(
	    'type' => 'file',
	    'data' => drupal_get_path('module','snowpilot') . '/js/negative_latitude.js',
	  );}
 if ( $form['field_longitude_type']['und']['#default_value'][0] == 'W' ){
	 $form['#attached']['js'][] = array(
	    'type' => 'file',
	    'data' => drupal_get_path('module','snowpilot') . '/js/negative_longitude.js',
	  );}
		
		$form['#attached']['js'][] = array(
			'type' => 'file',
			'data' => drupal_get_path('module', 'snowpilot'). '/js/accordion-existing-pit.js',
		);
	return $form;
}

function snowpilot_user_snowpits_count($uid = FALSE ){
	$query = new EntityFieldQuery();
	
	$query->entityCondition('entity_type', 'node')
	  ->entityCondition('bundle', 'snowpit_profile')
	  ->propertyCondition('uid', $uid);
	$result = $query->count()->execute();
	
	return $result;
	
}
//
//

/**
 * Generate structured (optgrouped) options from taxonomy.
 * Use output as Form API #options array.
 * @param string $taxonomy_name
 * @return array
 */
function get_optgroup_by_taxonomy($taxonomy_name) {
  $options = array();
  $vocabulary = taxonomy_vocabulary_machine_name_load($taxonomy_name);
  $vid = $vocabulary->vid;
  $top_level = taxonomy_get_tree($vid, $parent = 0, $max_depth = NULL);
  foreach ($top_level as $id => $term) {
    $tid = $term->tid;
    $children = taxonomy_get_children($tid);
    $parents = taxonomy_get_parents($tid);
    if (!empty($children)) {
      //PARENT
      $options[$term->name] = array();
      foreach ($children as $child) {
        $options[$term->name][$child->tid] = $child->name;
      }
    }
    elseif (empty($parents)) {
      //PARENT WITH NO CHILDREN - LONELY PARENT
      $options[$term->name] = array();
    }
  }
  return $options;
}

function snowpit_list_view_after_build($form, &$form_state){
	//
	$form['field_professional_affiliation_tid']['#options'] = get_optgroup_by_taxonomy('professional_affiliation');
	
	$form['field_professional_affiliation_tid']['#options'] = array_reverse($form['field_professional_affiliation_tid']['#options']);
	$form['field_professional_affiliation_tid']['#options']['All'] = 'All Snowpits';
	$form['field_professional_affiliation_tid']['#options'] = array_reverse($form['field_professional_affiliation_tid']['#options']);
	$form['field_practice_pit_value']['#default_value'] = '0';
	
	return $form;
}


function snowpilot_user_pass_submit($form, &$form_state){
	  global $language;
	  drupal_set_message( t("<b>Please check your SPAM folder!</b> If you add <a href = 'mailto:admin@snowpilot.org'>admin@snowpilot.org</a> to your contacts or whitelist, your spam filter is less likely to flag these emails from Snowpilot. <br />" ) );
	  return;
}

/**
 * A modal login callback.
 */
function snowpilot_login($js = NULL) {
  // Fall back if $js is not set.
	global $user;
  if (!$js) {
    return drupal_get_form('user_login');
  }
  ctools_include('modal');
  ctools_include('ajax');
  $form_state = array(
    'title' => t('Login'),
    'ajax' => TRUE,
  );
  $output = ctools_modal_form_wrapper('user_login', $form_state);
  if (!empty($form_state['executed'])) {
    // We'll just overwrite the form output if it was successful.
		//
		// these three functions ( .../login , .../login success , .../snowpilot_ $item - are from AJAX Sample)
    //
		//
    $output = array();
    $inplace = ctools_ajax_text_button(t('remain here'), 'snowpilot/nojs/login/inplace', t('Go to your account'));
    $output[] = ctools_modal_command_display(t('Login Success'), '<div class="modal-message">Login successful. You will be redirected in a moment.</div>');
		
		// Redirect to the user-prefs edit page if they are lacking one of the required ones.
		if (!snowpilot_user_unit_prefs_check($user->uid,FALSE)){
			$output[] = ctools_ajax_command_redirect('user/'.$user->uid.'/edit#edit-field-first-name');	
	  //	
		}else{
			$output[] = ctools_ajax_command_redirect('snowpits');	
		}
	}
	print ajax_render($output);

  exit;
}

/**
 * Post-login processor: should we go to the user account or stay in place?
 */
function snowpilot_login_success($js, $action) {
  if (!$js) {
    // we should never be here out of ajax context
    return MENU_NOT_FOUND;
  }

  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  $commands = array();
  if ($action == 'inplace') {
    // stay here
    $commands[] = ctools_ajax_command_reload();
  }
  else {
    // bounce bounce
    $commands[] = ctools_ajax_command_redirect('user');
  }
  print ajax_render($commands);
  exit;
}

//
//  Sets timezone list reasonably
//
function snowpilot_timezone_modify($form, &$form_state){
  $zonelist = timezone_identifiers_list();
  $zones = array();
  
  foreach ($zonelist as $zone) {
    // Only use certain cities
    if ($zone == 'America/New_York' 
		  || $zone == 'America/Chicago' 
		  || $zone == 'America/Denver' 
		  || $zone == 'America/Los_Angeles' 
		  || $zone == 'America/Anchorage' 
			|| $zone == 'America/Argentina/Mendoza'
			|| $zone == 'Europe/London'
			|| $zone == 'Europe/Paris'
			|| $zone == 'Europe/Zurich'
			|| $zone == 'Europe/Stockholm'
			|| $zone == 'Europe/Helsinki'
			|| $zone == 'Europe/Berlin'
			|| $zone == 'Asia/Kabul'
			|| $zone == 'Asia/Karachi'
			|| $zone == 'Asia/Kolkata'
			|| $zone == 'Asia/Kathmandu'
			|| $zone == 'Pacific/Auckland'
				
		){
      // Get timezone abbreviation
        $dateTime = new DateTime(); 
        $dateTime->setTimeZone(new DateTimeZone($zone)); 
        $zonename = $dateTime->format('T'); 
        $zones[$zone] = t('@name - @zone: @date', array('@name' => $zonename, '@zone' => t(str_replace('_', ' ', $zone)), '@date' => format_date(REQUEST_TIME, 'custom', variable_get('date_format_short_no', 'H:i') . ' O', $zone)));
    }
  }

  $form['timezone']['timezone']['#options'] = $zones;
  return $form;
	
}

function snowpilot_user_register_after_build( $form, &$form_state){
	$form['field_professional_affiliation']['und']['hierarchical_select']['dropbox_add']['#value'] = 'Add Affiliation';
	return $form;
}

function snowpilot_password_field( $form, &$form_state){
	//$form['account']['current_pass_required_values']['#value']['#pass'] = t('New Password');
	//dsm($form['account']['pass']['pass1']['#title']);
	$form['account']['pass']['pass1']['#title'] = t('Change Password');
	$form['account']['pass']['pass2']['#title'] = t('Confirm New Password');
	// Density Units are set at kg/m-3, not available for user edit

	$form['field_density_units']['und']['#value'] = 'kg_cubic_m';

	//$form['field_professional_affiliation']['und']['hierarchical_select']['dropbox_add']['#value'] = 'Add Affiliation';_dark_40
  return $form;
}

function snowpilot_snowpit_set_frac_cat(&$form, $snowpit_unit_prefs){
	foreach( $form['field_test']['und'] as $delta => $test_result){
					if (is_numeric($delta)){
						// this hides or shows the shear_quality / fracture_character fields based on user prefs. 
						// Most fields, we do this through the gui admin/structure/dependencies
						// shear quality is a show or hide within the 'stability test' field collection, based on frac_category at the node level
						//dsm($form['field_fracture_category']);
						if ($form['field_fracture_category']['und']['#default_value'][0] == 'shear_quality' )  {
							$form['field_test']['und'][$delta]['field_fracture_character']['#type'] = 'hidden';
						}else{
							$form['field_test']['und'][$delta]['field_shear_quality']['#type'] = 'hidden';
						}
						// this hides the Score field, which is set by _entity_presave 
					
						$form['field_test']['und'][$delta]['field_stability_test_score']['#type'] ='hidden';
						//dsm($form['field_test']['und'][0]);
					}
				
				}
	return $form;
}

function snowpilot_set_visibility_field_options(&$form, $snowpit_unit_prefs){
	unset($form['field_snowpit_visibility']['und']['#options']['_none']);
	if (!isset($snowpit_unit_prefs['field_professional_affiliation']) || $snowpit_unit_prefs['field_professional_affiliation'] == '57'){
		unset ($form['field_snowpit_visibility']['und']['#options']['group']);
	}else{
		$group_name = taxonomy_term_load($snowpit_unit_prefs['field_professional_affiliation'])->name;
		
	  $form['field_snowpit_visibility']['und']['#options']['group'] = 'Visible only by my group: '.$group_name;
		//dsm($form['field_snowpit_visibility']['und']['#options']);
	}
	
}

function snowpilot_snowpit_set_tester_fields(&$form, $account = NULL){

	if ( !(user_has_role( 8, $account ))){ /// role 8 is False Stability Test 2017
    $form['field_a_priori_eval']['#access'] = FALSE ;
		unset($form['field_stability_on_similar_slope']['und']['#options']['fair_unstable']);
		unset($form['field_stability_on_similar_slope']['und']['#options']['fair_stable']);
	}else{
		unset($form['field_stability_on_similar_slope']['und']['#options']['fair']);
		$form['field_stability_on_similar_slope']['und']['#title'] = 'AFTER doing stability tests';
		
	}	
	//dsm($form['field_stability_on_similar_slope']);
	
}

function snowpilot_lock_professional_affil(&$form){
	$top_level_prof_affil = array ('none', 108, 57, 59, 60, 62, 58, 61, 172);
	if (isset( $form['field_professional_affiliation']['und']['#default_value'][0]  ) 
	  && !in_array($form['field_professional_affiliation']['und']['#default_value'][0], $top_level_prof_affil )
	  && !snowpilot_user_has_role('administrator') 
	){
		  $form['field_professional_affiliation']['#access'] = FALSE ; 
		  $ids = array();
		  foreach ( $form['field_professional_affiliation']['und']['#default_value'] as $affiliation) $ids[] = $affiliation ;
		 
		  $terms = taxonomy_term_load_multiple( $ids );
		
		  $terms_list_formatted = '';
		  foreach( $terms as $tid => $term) {
		  	$terms_list_formatted .= 	'<div class="inner"> ' . $term->name.' </div>';
		  }
      $to_change_affil_text = '<div class = "inner"><em>If your Organization Affiliation is incorrect, please contact us at <a href ="mailto:admin@snowpilot.org">admin@snowpilot.org</a> to update it.</em></div>';
		  $form['field_professional_affiliation_display'] = array( 
		  	'#type' => 'container',
		  	'#weight' => '25',
		  	'und' => array ( 
		  	'markup' => array (
		      '#markup' => '<div class = "professional_affil_wrapper"><label>Organization Affiliation</label>' . $terms_list_formatted . $to_change_affil_text . ' </div>',),
			  ),	
		  );
			$form['#group_children']['field_professional_affiliation_display'] = 'group_profs';
	}
}

function snowpilot_entity_presave($entity, $type){

	if ($type == 'field_collection_item' && $entity->field_name == 'field_test'){
		//if $entity->
		
		// this sets a specific field ( Stability test score ) when the field collection item is saved
		$entity->field_stability_test_score['und'][0]['value'] = _set_test_result_single($entity);
		
		$entity->field_depth['und'][0]['value'] = str_replace( ',' , '.' , $entity->field_depth['und'][0]['value']);
	}elseif ( $type == 'field_collection_item' && $entity->field_name =='field_layer' ){
		//dsm($entity);
		// we can insert other actions in here as necessary, for layers other other field collection items
		$entity->field_height['und'][0]['value'] = str_replace( ',' , '.' , $entity->field_height['und'][0]['value']);
		$entity->field_bottom_depth['und'][0]['value'] = str_replace( ',' , '.' , $entity->field_bottom_depth['und'][0]['value']);
		
	}
	
	if ($type == 'field_collection_item' &&  $entity->field_name == 'field_temp_collection'){
		// We save this as a decimal in the db
			$entity->field_temp_temp['und'][0]['value'] = str_replace(',','.', $entity->field_temp_temp['und'][0]['value'] );
			$entity->field_depth['und'][0]['value'] = str_replace(',','.', $entity->field_depth['und'][0]['value'] );
	}
	
	if ($type == 'field_collection_item' &&  $entity->field_name == 'field_density_profile'){
		$entity->field_density_top['und'][0]['value'] = str_replace(',','.', $entity->field_density_top['und'][0]['value'] );
		$entity->field_depth['und'][0]['value'] = str_replace(',','.', $entity->field_depth['und'][0]['value'] );
	}
	// core info fields updates
	//Aspect - Cardinal -> degrees Azimuth convert and write value
	
	if ( $type == 'node' && isset($entity->field_direction_format['und']) && $entity->field_direction_format['und'][0]['value'] == 'cardinal' ){
		$entity->field_aspect = $entity->field_aspect_cardinal;
	}
	
	if ($type == 'node' && $entity->type == 'snowpit_profile' && isset( $entity->field_air_temp['und'][0]['value']) ){ 
		$entity->field_air_temp['und'][0]['value'] = str_replace( ',', '.' ,$entity->field_air_temp['und'][0]['value'] );
		dsm ( $entity); }
	return $entity;
}

function snowpilot_snowpit_profile_node_form_validate($form,&$form_state){
	// Add serverside validation for stability tests
	foreach( $form_state['values']['field_test']['und'] as $key => $test){
		
		if ( isset( $test['field_depth']['und'][0]['value'])){
		  $test['field_depth']['und'][0]['value'] = str_replace( ',' , '.' , $test['field_depth']['und'][0]['value']);
		} 
	  if (is_numeric($key) && isset($test['field_stability_test_type']['und'][0]['value']) && $test['field_stability_test_type']['und'][0]['value'] <> ''){ // 
	  	switch ($test['field_stability_test_type']['und'][0]['value']){
				case 'ECT':
				//  Stability test type == ECT , so we check for depth and score fields.
			    if ( $test['field_stability_test_score_ect']['und'][0]['value'] == ''  ) {
			  		form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_stability_test_score_ect", "Please enter an ECT Score result.");
			  	}elseif ( $test['field_stability_test_score_ect']['und'][0]['value'] <> 'ECTX' && $test['field_depth']['und'][0]['value'] == '') {
			  	  form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_depth", "Please enter a depth value for test result.");
			  	}
				break;
				case 'CT':
		      if ( !isset( $test['field_stability_test_score_ct']['und'][0]['value']  ) || ($test['field_stability_test_score_ct']['und'][0]['value'] == '' ) ){
					   	form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_stability_test_score_ct", "Please enter a CT test score result.");
					}elseif( (!isset($test['field_depth']['und'][0]['value']) || $test['field_depth']['und'][0]['value'] == '') &&  $test['field_stability_test_score_ct']['und'][0]['value'] <> 'CTN' ){ 
						form_set_error("field_test][".LANGUAGE_NONE ."][". $key ."][field_depth" , "Please enter a value for depth.");
					}elseif ( isset( $test['field_ct_score']['und'][0]['value'] )){
				    $test_score_ct = $test['field_stability_test_score_ct']['und'][0]['value'];
		        $ct_score = $test['field_ct_score']['und'][0]['value'];
						if ( $ct_score <> ''){
		      	switch ( $test['field_stability_test_score_ct']['und'][0]['value']){
		      		case 'CTE':
		        			if ( $ct_score <1 || $ct_score >10  ){
	                	form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_ct_score", t('You have a Compression Test with Stability Score of '. $test_score_ct.
					      		', which means the CT Score should be between 1 and 10 (inclusive).'));
			        	  }
			       	break;
				      case 'CTM':
				        if ( $ct_score <11 || $ct_score >20  ){
	                form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_ct_score", t('You have a Compression Test with Stability Score of '. $test_score_ct.
						      ', which means the CT Score should be between 11 and 20 (inclusive).'));
				        	}				
				      break;
				      case 'CTH':
				        	if ( $ct_score <21 || $ct_score >30  ){
	                	form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_ct_score", t('You have a Compression Test with Stability Score of '. $test_score_ct.
						      	', which means the CT Score should be between 21 and 30 (inclusive).'));
				        	}				
				      break;
			      	} // end switch CT result type

						}  // end if ct score is not empty
		      } // end "if" we have full CT test results
          break;
					case 'RB':
				    if ( $test['field_stability_test_score_rb']['und'][0]['value'] == ''  ) {
				  		form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_stability_test_score_rb", "Please enter a Rutschblock test result.");
				  	}elseif ( $test['field_stability_test_score_rb']['und'][0]['value'] <> 'RB7' && $test['field_depth']['und'][0]['value'] == '') {
				  	  form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_depth", "Please enter a depth value for Rutschblock test result.");
				  	}					
					break;
					case 'ST':
			      if ( $test['field_stability_test_score_st']['und'][0]['value'] == ''  ) {
			    		form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_stability_test_score_st", "Please enter a Shovel Shear test result.");
			    	}elseif ( $test['field_stability_test_score_st']['und'][0]['value'] <> 'STN' && $test['field_depth']['und'][0]['value'] == '') {
			  	    form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_depth", "Please enter a depth value for Shovel Shear test result.");
			  	  }										
					break;
					case 'SB':
			      if ( $test['field_stability_test_score_sb']['und'][0]['value'] == ''  ) {
			  	  	form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_stability_test_score_sb", "Please enter a Stuffblock test result.");
			     	}elseif ( $test['field_stability_test_score_sb']['und'][0]['value'] <> 'SBN' && $test['field_depth']['und'][0]['value'] == '') {
			    	  form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_depth", "Please enter a depth value for Stuffblock test result.");
			    	}		
					break;
					case 'PST':
				  	if ( !isset( $test['field_depth']['und'][0]['value'] ) || $test['field_depth']['und'][0]['value'] == ''  ){ 
					    form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_depth", "Please enter a depth value for Propagation Saw test result.");
					  }
					  if ( !isset ($test['field_data_code_pst']['und'][0]['value'])){
						  form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_data_code_pst", "Please enter a Data Code value for PST result.");
					  }
					  if ( !isset ($test['field_length_of_saw_cut']['und'][0]['value']) || $test['field_length_of_saw_cut']['und'][0]['value'] == ''){
						  form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_length_of_saw_cut", "Please enter a Length of Saw Cut for PST result.");
					  }
						if (!isset( $test['field_length_of_isolated_col_pst']['und'][0]['value'] ) || $test['field_length_of_isolated_col_pst']['und'][0]['value'] == '' ){
							form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_length_of_isolated_col_pst", "Please enter a Length of Isolated column for PST result.");
						}
						if ( isset( $test['field_length_of_isolated_col_pst']['und'][0]['value'] ) && isset($test['field_length_of_saw_cut']['und'][0]['value']) && ($test['field_length_of_saw_cut']['und'][0]['value'] > $test['field_length_of_isolated_col_pst']['und'][0]['value']) ){
							form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_length_of_isolated_col_pst", "The Length of Saw Cut value should be less than the Length of Isolated Column");
							
						}
					
					break;
			
		    } // end swith test->type
				//
				//  Check to see if test depth is inside pit depth
				//
				if ( ( ( isset ( $test['field_stability_test_score_ct']['und'][0]['value'] )  && $test['field_stability_test_score_ct']['und'][0]['value'] <> 'CTN' && $test['field_stability_test_type']['und'][0]['value'] == 'CT' )
					|| ( isset ( $test['field_stability_test_score_ect']['und'][0]['value'] )  && $test['field_stability_test_score_ect']['und'][0]['value'] <> 'ECTX' && $test['field_stability_test_type']['und'][0]['value'] == 'ECT' )
					||	(isset ( $test['field_stability_test_score_rb']['und'][0]['value'] ) && $test['field_stability_test_score_rb']['und'][0]['value'] <> 'RB7' && $test['field_stability_test_type']['und'][0]['value'] == 'RB' )
					|| ( isset ($test['field_stability_test_score_st']['und'][0]['value'] ) && $test['field_stability_test_score_st']['und'][0]['value'] <> 'STN' && $test['field_stability_test_type']['und'][0]['value'] == 'ST' )
					|| ( isset ($test['field_stability_test_score_sb']['und'][0]['value'] ) && $test['field_stability_test_score_sb']['und'][0]['value'] <> 'SBN' && $test['field_stability_test_type']['und'][0]['value'] == 'SB' )
					|| ( $test['field_stability_test_type']['und'][0]['value'] == 'PST'  )
						
				  ) && ( $test['field_depth']['und'][0]['value'] > _raw_max_pit_depth( $form_state['values']))){	
					form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_depth", "Test Result depth must be less than less than total snow height.");
		  	}
				
				
				// this  section makes sure that Stability test type is set.
	  }elseif ( is_numeric($key) && isset($test['field_depth']['und'][0]['value']) && $test['field_depth']['und'][0]['value'] <> ''){
			form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_stability_test_type", "Please enter a Stability Test Type.");
		} // end key is_numeric and test type is not null
		
	} // end foreach test result
	
	//  validate that each layer has a top and bottom depth, at least; unless it is a 'degenerate' layer, which will get chopped off in the submit function
	//
	//  if it lacks the bottom depth, form_set_error on that field
	
	foreach($form_state['values']['field_layer']['und'] as $key=>$layer){
	  
		if (  isset($layer['field_height']['und'][0]['value'] )){
			$layer['field_height']['und'][0]['value'] = str_replace( ',', '.' , $layer['field_height']['und'][0]['value']);
		}
		if ( isset ($layer['field_bottom_depth']['und'][0]['value'])){
			$layer['field_bottom_depth']['und'][0]['value'] = str_replace( ',', '.' , $layer['field_bottom_depth']['und'][0]['value']);
		}
		if ( is_numeric($key) && isset($layer['field_height']['und'][0]['value']) 
		  && (  (isset( $layer['field_bottom_depth']['und'][0]['value']) && ($layer['field_bottom_depth']['und'][0]['value'] <> ''))  || (isset($layer['field_hardness']['und'][0]['value']) && ($layer['field_hardness']['und'][0]['value'] <> '' )) || (isset($layer['field_grain_type']['und'][0]['value']) && ($layer['field_grain_type']['und'][0]['value'] <> '')) || (isset($layer['field_grain_size']['und'][0]['value']) && ($layer['field_grain_size']['und'][0]['value'] <> '')) )   ){// all of this test to see if it is a 'real' layer
			// we process through error checking and set any missing fields as needed.
			if ($layer['field_bottom_depth']['und'][0]['value'] == '' ) form_set_error("field_layer][". LANGUAGE_NONE."][" . $key . "][field_bottom_depth", t('Missing Bottom Depth value.'));
		}
			
		// Poor mans layer integrity check: make sure that each field_bottom_depth is below field_height, depending on measure_from
			
		if (is_numeric($key) && $form_state['values']['field_depth_0_from']['und'][0]['value'] <> 'top'
			&& isset($layer['field_bottom_depth']['und'][0]['value']) 
			&& $layer['field_bottom_depth']['und'][0]['value'] <> ''
			&& $layer['field_bottom_depth']['und'][0]['value'] >= $layer['field_height']['und'][0]['value']){
	        form_set_error("field_layer][". LANGUAGE_NONE."][" . $key . "][field_bottom_depth", t('The value of the Bottom Depth field should be smaller than Top Depth.'));
		}else if (is_numeric($key) && $form_state['values']['field_depth_0_from']['und'][0]['value'] == 'top' 
			&& isset($layer['field_bottom_depth']['und'][0]['value']) 
			&& $layer['field_bottom_depth']['und'][0]['value'] <> ''
		  &&	$layer['field_bottom_depth']['und'][0]['value'] <= $layer['field_height']['und'][0]['value'] ){
	        form_set_error("field_layer][". LANGUAGE_NONE."][" . $key . "][field_bottom_depth", t('The value of the Bottom Depth field should be greater than Top Depth.'));
		}
		if (is_numeric($key) &&  $form_state['clicked_button']['#name'] == 'field_layer_add_more' && (!isset($layer['field_bottom_depth']['und'][0]['value']) || $layer['field_bottom_depth']['und'][0]['value'] == '' )){
			form_set_error("field_layer][". LANGUAGE_NONE."][" . $key . "][field_bottom_depth", t('Please enter a value for bottom depth (if there are no further layers, you may leave this blank).'));
		}
		//
		//  check that layers do not stretch outside the total raw heigth of snowpack
		$result = _raw_max_pit_depth( $form_state['values'] );
		if( is_numeric($key) ) { 
		  if( $layer['field_bottom_depth']['und'][0]['value'] > _raw_max_pit_depth( $form_state['values']) ){
        form_set_error("field_layer][". LANGUAGE_NONE."][" . $key . "][field_bottom_depth", t('The value of the Bottom Depth field should be less than ' . _raw_max_pit_depth( $form_state['values']) .', the total Height of Snowpack ( available on Core Info tab).'));
	  	}elseif ( $layer['field_height']['und'][0]['value'] > _raw_max_pit_depth( $form_state['values']) ){
        form_set_error("field_layer][". LANGUAGE_NONE."][" . $key . "][field_height", t('The value of the Top Depth field should be less than ' . _raw_max_pit_depth( $form_state['values']) .', the total Height of Snowpack ( available on Core Info tab).'));
	  		
	  	}
			//dsm( _raw_max_pit_depth( $form_state['values']));
		}
	} // end loop through layers 
	
	// Loop through temperature collection items for server-side error checking
	foreach($form_state['values']['field_temp_collection']['und'] as $key=>$temp_item){
		// We want to validate using decimal, not commas, for temp collection items
		if ( is_numeric($key)) {
				
	  	if (strpos(  $temp_item['field_depth']['und'][0]['value'], ',' ) ){
        $temp_item['field_depth']['und'][0]['value'] = str_replace( ',' , '.' , $temp_item['field_depth']['und'][0]['value'] );
	  	}
			if ( strpos( $temp_item['field_temp_temp']['und'][0]['value'] , ',')){
				$temp_item['field_temp_temp']['und'][0]['value'] = str_replace( ',' , '.' , $temp_item['field_temp_temp']['und'][0]['value'] ); 
			}

	  	if ( $form_state['values']['field_temp_units']['und'][0]['value'] == 'C' && is_numeric($key)){
	  		if ( isset( $temp_item['field_temp_temp'] ) && is_numeric( $temp_item['field_temp_temp']['und'][0]['value'] ) && 
				$temp_item['field_temp_temp']['und'][0]['value'] > 0  ){ 
		  		form_set_error("field_temp_collection][". LANGUAGE_NONE."][" . $key . "][field_temp_temp", t('A snowpack measurement should be 0&deg; C or less.'));
	  		}
		  }elseif ( is_numeric($key)  
	  		&& isset ( $temp_item['field_temp_temp']['und'][0]['value'] )
	  	  && is_numeric( $temp_item['field_temp_temp']['und'][0]['value'] ) 
	  	  && $temp_item['field_temp_temp']['und'][0]['value'] > 32 ) {
		  	form_set_error("field_temp_collection][". LANGUAGE_NONE."][" . $key . "][field_temp_temp", t('A snowpack temperature measurement should be 32&deg; F or less.'));
	  	}
	  	if ( is_numeric($key) &&  isset ($temp_item['field_depth']['und'][0]['value']) && is_numeric( $temp_item['field_depth']['und'][0]['value'] ) && 
			$temp_item['field_depth']['und'][0]['value'] > _raw_max_pit_depth( $form_state['values'] ) ) {	
	  		form_set_error("field_temp_collection][". LANGUAGE_NONE."][" . $key . "][field_depth", t("Temp Measurement Depth must be less than less than total snow height. [<a href ='/error_page#depth'>why am I getting this error</a>]"));
	  	}
		}
	}
	// Loop through density collection items for server-side error checking
	foreach($form_state['values']['field_density_profile']['und'] as $key=>$density_item){
  	if (strpos(  $density_item['field_depth']['und'][0]['value'], ',' ) ){
      $density_item['field_depth']['und'][0]['value'] = str_replace( ',' , '.' , $density_item['field_depth']['und'][0]['value'] );
  	}
		if ( strpos( $density_item['field_density_top']['und'][0]['value'] , ',')){
			$density_item['field_density_top']['und'][0]['value'] = str_replace( ',' , '.' , $density_item['field_density_top']['und'][0]['value'] ); 
		}
		
		
		if ( is_numeric($key )  && isset( $density_item['field_density_top']['und'][0]['value'] ) && is_numeric( $density_item['field_density_top']['und'][0]['value'] ) && $density_item['field_density_top']['und'][0]['value'] > 1000 ){ 
			form_set_error("field_density_profile][". LANGUAGE_NONE."][" . $key . "][field_density_top", t('Density values should be 1000 kg/m-3 or less.'));
		}
		// This checks for Depth item integrity with the HoS or Layers that have been entered
		if ( is_numeric($key )  && isset ($density_item['field_depth']['und'][0]['value']) && is_numeric($density_item['field_depth']['und'][0]['value'] ) &&  $density_item['field_depth']['und'][0]['value'] > _raw_max_pit_depth( $form_state['values'] ) ) {	
//			dsm( $temp_item);
			form_set_error("field_density_profile][". LANGUAGE_NONE."][" . $key . "][field_depth", t("Density Measurement Depth must be less than less than total snow height. [<a href ='/error_page#depth'>why am I getting this error</a>]"));
		}
	}
	//
	// Serveside tests for Core Info tab information:
	//
  if ( $form_state['values']['field_elevation_units']['und'][0]['value'] == 'm'   && ($form_state['values']['field_elevation']['und'][0]['value'] > 8000 )){
    form_set_error("field_elevation", 'The elevation in meters must be less than 8000.');
	}
	
	$form_state['values']['field_air_temp']['und'][0]['value'] = str_replace( ',' , '.' ,$form_state['values']['field_air_temp']['und'][0]['value']);
	// addition Core Info field validation can go here:
	//
	if ( substr($form_state['values']['field_date_time']['und'][0]['value'], -8, 8) == '00:00:00' ){
		form_set_error('field_date_time', 'Please enter a valid time for when the snowpit was dug.');
	}
	
	return;
}

function snowpilot_snowpit_profile_node_form_submit($form,&$form_state){	
	
//  If the last layer has no bottom depth set, truncate it- 'degenerative' layer
	foreach($form_state['values']['field_layer']['und'] as $key => $layer){
		// If this is a degenerative layer, (i.e. no bottom_depth and no hardness field set ) then we just delete it
		if ( is_numeric($key) && ( $layer['field_bottom_depth']['und'][0]['value'] == '' ) ){
		  unset($form_state['values']['field_layer']['und'][$key]);  // chop off this layer		
		}
	}
	// 
	// For stability tests: if the Score field is not set ( for all except PST type results ), then chop off the degenrate stability test
	foreach($form_state['values']['field_test']['und'] as $key => $test){
		if ( is_numeric($key) && !isset($test['field_stability_test_type']['und'][0]['value'])){ // in this case, we don't even have a test type indicated
			unset($form_state['values']['field_test']['und'][$key]); 		
		} elseif (is_numeric($key) && !isset( $test['field_depth']['und'][0]['value'])){
			if ( (($test['field_stability_test_type']['und'][0]['value'] == 'RB') && !isset($test['field_stability_test_score_rb']['und'][0]['value']))
				||
			(($test['field_stability_test_type']['und'][0]['value'] == 'SB') && !isset($test['field_stability_test_score_sb']['und'][0]['value']))
				||
			(($test['field_stability_test_type']['und'][0]['value'] == 'CT') && !isset($test['field_stability_test_score_ct']['und'][0]['value']))
				||
			(($test['field_stability_test_type']['und'][0]['value'] == 'ECT') && !isset($test['field_stability_test_score_ect']['und'][0]['value']))
				||
			(($test['field_stability_test_type']['und'][0]['value'] == 'ST') && !isset($test['field_stability_test_score_st']['und'][0]['value']))
				||
			(($test['field_stability_test_type']['und'][0]['value'] == 'PST') && !isset($test['field_data_code_pst']['und'][0]['value']))

			){
				
		  unset($form_state['values']['field_test']['und'][$key]);  // chop off this test result		
			// verified that this works
		  }
		}
	}		

	return $form_state;
}

function _set_test_result_single($test_result){
	if (isset($test_result->field_stability_test_type['und'][0])){
	switch ($test_result->field_stability_test_type['und'][0]['value']){
		case 'ECT':	return $test_result->field_stability_test_score_ect['und'][0]['value'];
		break;
		case 'CT':	return $test_result->field_stability_test_score_ct['und'][0]['value'];
		
		break;
		case 'RB':	return $test_result->field_stability_test_score_rb['und'][0]['value'];
		
		break;
		case 'PST':	return '';
		
		break;
		case 'SB':	return $test_result->field_stability_test_score_sb['und'][0]['value'];
		
		break;
		case 'ST': return $test_result->field_stability_test_score_st['und'][0]['value'];
		
		break;
	}
	}
	return;
}


function snowpilot_snowpit_set_density_titles(&$form, $snowpit_unit_prefs){
	$x= 0;
	while (isset($form['field_density_profile']['und'][$x])){
		$next_layer = $x+1;
		$form['field_density_profile']['und'][$x]['remove_button']['#value'] = "X Remove Density";
		if (isset($form['field_density_profile']['und'][$next_layer])){ $collapsed = ' collapsed'; 
		
		$form['field_density_profile']['und'][$x]['#prefix'] = "<div class='collapsible-container density_num_". $x ." '>".
			"<h3 class='collapsible-handle density-title'>Density Measurement " . $next_layer. ": ". 
				$form['field_density_profile']['und'][$x]['field_density_top']['und'][0]['value']['#default_value'] . 
					_density_unit_fix($snowpit_unit_prefs['field_density_units']).
						" @ ". $form['field_density_profile']['und'][$x]['field_depth']['und'][0]['value']['#default_value'].
						" ". $snowpit_unit_prefs['field_depth_units'].
					 "</h3>". '<div class="collapsible-content collapsed" >';
		}else{
			$form['field_density_profile']['und'][$x]['#prefix'] = "<div class='collapsible-container density_num_". $x ." '>".
				"<h3 class='collapsible-handle density-title'>Density Measurement " . $next_layer. ": </h3>"
				.'<div class="collapsible-content" >';
		
		}
		$form['field_density_profile']['und'][$x]['#suffix'] ="</div> </div>";
		$x++;
	}
	return $form;
}

function snowpilot_snowpit_set_stability_test_titles(&$form, $snowpit_unit_prefs){
	// this will be a fancy one, with compiled stab test output
	$form['field_test']['und']['add_more']['#value'] = "Add Test";
	

	$x= 0;
	while (isset($form['field_test']['und'][$x])){
		$next_layer = $x+1;
		$form['field_test']['und'][$x]['remove_button']['#value'] = "X Remove Test";
		//dsm($form['field_test']['und'][$x]);
		if (isset($form['field_test']['und'][$x]['field_stability_test_type']['und']['#default_value'][0]) && $form['field_test']['und'][$x]['field_stability_test_type']['und']['#default_value'][0] <> ''){ 
			$form_test_shorthand = stability_test_score_shorthand_form($form['field_test']['und'][$x]);
			
			$depth_final = $form['field_test']['und'][$x]['field_depth']['und'][0]['value']['#default_value']+0 ; 
			$depth_val =( $form['field_test']['und'][$x]['field_depth']['und'][0]['value']['#default_value'] <> '') ? 
				"Depth: ". $depth_final . " ". $snowpit_unit_prefs['field_depth_units'] :	'';
			
			$form['field_test']['und'][$x]['#prefix'] = "<div class='collapsible-container stability_test_num_". $x ." '>".
				"<h3 class='collapsible-handle test-title'>Stability Test " . $next_layer. ": ". $form_test_shorthand ." ".
							 $depth_val . "</h3>". '<div class="collapsible-content collapsed" >';
			
			
			
		}else { // this is a new, blank stability test form, so we leave it open
			$form['field_test']['und'][$x]['#prefix'] = "<div class='collapsible-container stability_test_num_". $x ." '>".
				"<h3 class='collapsible-handle test-title'>Add Stability Test Result</h3>". '<div class="collapsible-content" >';
			$form['field_test']['und'][$x]['#suffix'] ="</div> </div>";		 // don't put dsm here, it will break the "add another"  functionality with AJAX errors.
	  }
		//dsm($form['field_test']['und'][$x]);
		$form['field_test']['und'][$x]['field_stability_comments']['und'][0]['value']['#maxlength'] = 20;
		// here we will attempt to add a "Duplicate test" button and functionality

				
		$x++;
	}
  //dsm($form);

	return $form;
}


function snowpilot_snowpit_set_temp_coll_titles(&$form, $snowpit_unit_prefs){
	$x= 0;
	while (isset($form['field_temp_collection']['und'][$x])){
		$next_layer = $x+1;
		$form['field_temp_collection']['und'][$x]['remove_button']['#value'] = "X Remove Temp";
		if (isset($form['field_temp_collection']['und'][$next_layer])){ 	
			$form['field_temp_collection']['und'][$x]['#prefix'] = "<div class='collapsible-container temp_num_". $x ." '>".
			"<h3 class='collapsible-handle temp-title'>Temp Point " . $next_layer. ": ". 
				$form['field_temp_collection']['und'][$x]['field_temp_temp']['und'][0]['value']['#default_value'] . "&#176;". 
					$snowpit_unit_prefs['field_temp_units'].
						" @ ". $form['field_temp_collection']['und'][$x]['field_depth']['und'][0]['value']['#default_value'].
						" ". $snowpit_unit_prefs['field_depth_units'].
					 "</h3>". '<div class="collapsible-content collapsed" >';
		}else {
			$form['field_temp_collection']['und'][$x]['#prefix'] = "<div class='collapsible-container temp_num_". $x ." '>".
			"<h3 class='collapsible-handle temp-title'>Temp Point " . $next_layer.
			": </h3>" . '<div class="collapsible-content" >';
			
		}

		$form['field_temp_collection']['und'][$x]['#suffix'] ="</div> </div>";
		
		$x++;
	}
	return $form;
}

function snowpilot_snowpit_set_layer_titles(&$form, $snowpit_unit_prefs){
	// Start with the overall title of the group
	$form['field_layer']['und']['#title'] = "Layers"; // 
	// Add more button:
	$form['field_layer']['und']['add_more']['#value'] = "Add Layer";

/*	$form['field_layer']['und']['clear_layers']= array(
		'#type' => 'submit',
		'#name' => 'field_clear_layers',
		'#value' => 'Clear All Layers',
		'#attributes' => array( 'class' => array( 0 => 'field-clear-layers-submit'), ),
		'#limit_validation_errors' => array( 0 => array ( 0 => 'field_layer', 1 => 'und' ), ),
		'#submit' => array('field_clear_layers_submit'),
		'#ajax' => array('callback' => 'field_add_more_js' ,'wrapper' => 'field-layer-add-more-wrapper', 'effect' => 'fade'),		
		'#weight' => 20,
	);*/
	$x=0;
	
	$layer_info = array();
	while(isset($form['field_layer']['und'][$x] )){
		// Set remove button text
		$form['field_layer']['und'][$x]['remove_button']['#value'] = "Remove Layer";
		unset($form['field_layer']['und'][$x]['remove_button']);
		$next_layer = $x+1 ; 
		
		$collapsed = '';
		$this_hardness = '';
		if (isset($form['field_layer']['und'][$x]['field_height']['und'][0]['value']['#default_value']) && ( $form['field_layer']['und'][$x]['field_height']['und'][0]['value']['#default_value'] <> '')
				&& isset($form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#default_value'] ) && $form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#default_value'] <> '' ){  // if this is an existing layer , collapse the box and set the top depth ....
			$collapsed = ' collapsed';
			
			// Set the top of the next field equal to the bottom of the last one.		
			if ( isset( $form['field_layer']['und'][$next_layer])){
				$form['field_layer']['und'][$next_layer]['field_height']['und'][0]['value']['#default_value'] = 
					$form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#default_value'];
			}
			
			$this_hardness = (isset($form['field_layer']['und'][$x]['field_hardness']['und']['#default_value'][0]) && $form['field_layer']['und'][$x]['field_hardness']['und']['#default_value'][0] <> '') ? 
				', '.$form['field_layer']['und'][$x]['field_hardness']['und']['#default_value'][0] 
				: '' ;
			$layer_info[$x] = 'Layer '.$next_layer.': '	. $form['field_layer']['und'][$x]['field_height']['und'][0]['value']['#default_value'].' ' . $snowpit_unit_prefs['field_depth_units'] . ' - ' .
				$form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#default_value']. ' ' . $snowpit_unit_prefs['field_depth_units']  .  $this_hardness; 
			
		}
		$this_layer_info = isset ( $layer_info[$x] ) ? $layer_info[$x] : "New Layer";
		$form['field_layer']['und'][$x]['#prefix'] ="<div class='collapsible-container layer_num_". $x ." '>"
			."<h3 class='layer-title'>". $this_layer_info . "</h3>".
				'<div class="'. $collapsed .'" >' ;

		$form['field_layer']['und'][$x]['#suffix'] ="</div> </div>";
		/*
		if ( $x >= 5 ){
			
			$layer_number = $x-5;
			$form['field_layer']['und'][$x-5]['#prefix'] ="<div class='collapsible-container layer_num_ scrunch '>"
				."<h3 class=' layer-title'>" .$layer_info[$layer_number] . "</h3>".
					"<div class='' >" ;				
		}
		*/
		//
		// this block hides the last layer entry form where the bottom of the previous one was "zero depth" and puts up a 'bottom of Snowpit' sign
		//
		
		if ( isset($form['field_layer']['und'][$x]) && 
		(($snowpit_unit_prefs['field_depth_0_from'] <> 'top') &&  $form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#default_value'] == '0')
			|| ( ($snowpit_unit_prefs['field_depth_0_from'] == 'top')  
				&&  isset($form['field_total_height_of_snowpack']['und'][0]['value']['#default_value']) && $form['field_total_height_of_snowpack']['und'][0]['value']['#default_value'] <> ''
				&& $form['field_total_height_of_snowpack']['und'][0]['value']['#default_value'] == $form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#default_value'])
		){
			unset ($form['field_layer']['und'][$x+1]);
			unset($form['field_layer']['und']['add_more']);
			$form['field_layer']['und'][$x]['#suffix'] = $form['field_layer']['und'][$x]['#suffix'].'<h3 class ="snowpilot-snowpit-bottom">Bottom of Snowpack</h3>';
		}
		
		//dsm($form['field_total_height_of_snowpack']['und'][0]['value']);
		//$form['field_layer']['und'][$x]['#pre_render'][] = 'snowpilot_graintypes_tweak';
		$x++;
	}
}
function field_clear_layers_submit($form, &$form_state){
	watchdog('snowpilot' , 'clear layers functi is hit');
	dsm($form);
}

/**
 * Implements hook_node_access_records().
 */
function snowpilot_node_access_records($node) {
  $grants = array();
 
  // Make sure we have the correct content type.
  if ($node->type == 'snowpit_profile') {
    // 
		$user = user_load($node->uid);
    if (!($node->sticky)) {
        // If 
      $grants[] = array(
        'nid' => $node->nid,
        'realm' => 'snowpit_unlocked',
        'gid' => $node->uid,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
        'priority' => 1
      );
    
		if ( isset($user->field_professional_affiliation['und'][0]['tid'])){
	  	$user_group = $user->field_professional_affiliation['und'][0]['tid'];
			//			
		  $grants[] = array(
		  	'nid' => $node->nid,
		  	'realm' => 'org_admin',
		  	'gid' => $user_group,
		  	'grant_view' => 1,
		  	'grant_update' => 1,
		 	 'grant_delete' => 1,
		 	 'priority' => 1,
	    );
		 }
   }
	 if ( isset($node->field_snowpit_visibility['und'][0]['value']) && $node->field_snowpit_visibility['und'][0]['value'] == 'group'){
		
		if ( isset($user->field_professional_affiliation['und'][0]['tid'])){
	  	$user_group = $user->field_professional_affiliation['und'][0]['tid'];
	  	// if u$user-> group is not something like unaffiliated, or education , then ......
      $grants[] = array(
        'nid' => $node->nid,
        'realm' => 'snowpit_group',
        'gid' => $user_group,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 1
      );
			$user_shared_groups = snowpilot_user_shared_groups($user_group); // returns an array
			if ( count($user_shared_groups)){
				foreach ( $user_shared_groups as $shared_group ){
		      $grants[] = array(
		        'nid' => $node->nid,
		        'realm' => 'org_shared',
		        'gid' => $shared_group,
		        'grant_view' => 1,
		        'grant_update' => 0,
		        'grant_delete' => 0,
		        'priority' => 1
		      );
				}
			}
		}
	}elseif (isset ($node->field_snowpit_visibility['und'][0]['value']) && $node->field_snowpit_visibility['und'][0]['value'] == 'public'){
    $grants[] = array(
      'nid' => $node->nid,
      'realm' => 'all',
      'gid' => 0,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 1
    );

	}else{ // visibility is hidden for everyone ...
    $grants[] = array(
      'nid' => $node->nid,
      'realm' => 'all',
      'gid' => 0,
      'grant_view' => 0,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 1
    );
    $grants[] = array(   //////////  except the owner
      'nid' => $node->nid,
      'realm' => 'snowpit-owner',
      'gid' => $node->uid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 1
    );
	}	
	}			
  return $grants;
}

function snowpilot_node_grants($account, $op) {
 
  $grants = array();
  // Set default grants condition. 
	$grants['snowpit_unlocked'] = array(0);
    // Make sure the user is logged in.
	$grants['all'] = array(0);
  
	if ($account->uid) {
		$current_user = user_load($account->uid);
    $grants['snowpit_unlocked'] = array( $account->uid );
    $grants['snowpit-owner'] = array( $account->uid );
		//
		// set group visibility ; set shared org visibility; for all roles except merely 'authenticated user', which is disabled from group permissions
	  if ( isset( $current_user->field_professional_affiliation['und'][0]['tid']) && (in_array( 'forecaster' , $current_user->roles) || in_array( 'limited' , $current_user->roles) || in_array( 'org admin' , $current_user->roles) || in_array( 'researcher' , $current_user->roles))){
	  	$affiliation = $current_user->field_professional_affiliation['und'][0]['tid'];
	  	$grants['snowpit_group'] = array($affiliation);
			$grants['org_shared'] = array($affiliation);
			//
			// likewise, org admins get more permissions for edit/delete
			if ( in_array( 'org admin' , $current_user->roles)){
			  $grants['org_admin'] = array($affiliation);
			
			}
			
  	}

	}
	
	
  return $grants;
}
 
 
//
// Function to find which group tids should be added to the org_shared realm
//
 
function snowpilot_user_shared_groups($tid){
	$term = taxonomy_term_load($tid) ;
	$tids = array();
	if ( isset($term->field_org_share_snowpits['und']) && count( $term->field_org_share_snowpits['und'] )){
		foreach ( $term->field_org_share_snowpits['und'] as $key => $shared_org){
			$tids[] = $shared_org['tid'];
		}
	}
	return $tids;
}


function snowpilot_node_view($node, $view_mode){
	if ($node->type == 'snowpit_profile'){
	snowpilot_snowpit_graph_header_write($node);	
		$prefs = snowpilot_unit_prefs_get($node, 'node'); 
		//$node->content['field_air_temp'][0]['#markup'] = $node->content['field_air_temp']['#items'][0]['value']. $prefs['field_temp_units'];
	}
	// dsm($node->field_snowpit_visibility);
	return $node;
}		

function snowpilot_graintypes_tweak($element){
	dsm($element);
	return ;
}

function snowpilot_field_widget_form_alter(&$element, &$form_state, $context) {
  // Add a css class to widget form elements for all fields of type mytype.
  if ($context['field']['type'] == 'taxonomy_term_reference' && $context['field']['field_name'] == 'field_grain_type' ) {
		//dsm($form_state);
		
		
    // Be sure not to overwrite existing attributes.
    $element['#attributes']['class'][] = 'myclass';
  }
}
		
// use a 'favorite locations' node type to store fields that should be prepopulated on the snowpit profile form.



function snowpilot_snopit_prof_set_suffices(&$form, $snowpit_unit_prefs){
	//dsm($form['field_elevation']['und'][0]);
	$form['field_air_temp']['und'][0]['value']['#field_suffix'] = 'º'.$snowpit_unit_prefs['field_temp_units'];
	$form['field_elevation']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_elevation_units'];
	$form['field_surface_penetration']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
	$form['field_boot_penetration_depth']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
	$form['field_ski_penetration']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
  $form['field_total_height_of_snowpack']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
	
	$form['field_latitude']['und'][0]['value']['#field_suffix'] = "&#176;".$snowpit_unit_prefs['field_latitude_type'];
	$form['field_longitude']['und'][0]['value']['#field_suffix'] = "&#176;".$snowpit_unit_prefs['field_longitude_type'];
	
	$form['field_north']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_latitude_type'];
	$form['field_east']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_longitude_type'];
	
	// not just a suffix, but a real form value ( in core info)
	
	$form['field_utm_zone']['und'][0]['value']['#default_value'] = $snowpit_unit_prefs['field_utm_zone'];
	
	// Repeated per layer
	$x = 0; //count($form['field_layer']['und'] );
	while ( isset($form['field_layer']['und'][$x]) ){
				
				
		$form['field_layer']['und'][$x]['field_height']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units']; //
		$form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$form['field_layer']['und'][$x]['field_density_top']['und'][0]['value']['#field_suffix'] = _density_unit_fix($snowpit_unit_prefs['field_density_units']);
		$form['field_layer']['und'][$x]['field_density_bottom']['und'][0]['value']['#field_suffix'] = _density_unit_fix($snowpit_unit_prefs['field_density_units']);
		$form['field_layer']['und'][$x]['field_grain_size']['und'][0]['value']['#field_suffix'] = 'mm';
		$x++;
	}

	// Repeated per test
	$x = 0; //count($form['field_layer']['und'] );
	while ( isset($form['field_test']['und'][$x]) ){
		$form['field_test']['und'][$x]['field_depth']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$form['field_test']['und'][$x]['field_length_of_saw_cut']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$form['field_test']['und'][$x]['field_length_of_isolated_col_pst']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$x++;
	}
	
	// REpeated per temp collection
	$x = 0;
	while (isset ($form['field_temp_collection']['und'][$x])){
		$form['field_temp_collection']['und'][$x]['field_temp_temp']['und'][0]['value']['#field_suffix'] = "&#176;". $snowpit_unit_prefs['field_temp_units'];
		$form['field_temp_collection']['und'][$x]['field_depth']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$x++;
	}
	// Repeated per density measurement
	$x = 0;
	while ( isset( $form['field_density_profile']['und'][$x])){
		$form['field_density_profile']['und'][$x]['field_depth']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$form['field_density_profile']['und'][$x]['field_density_top']['und'][0]['value']['#field_suffix'] = _density_unit_fix($snowpit_unit_prefs['field_density_units']);
		
		
		$x++;
	}
	
	return;
}

function _density_unit_fix($units){
	return ($units == 'kg_cubic_m' ? 'kg/m&#xb3;' : 'lb/ft&#xb3;');  // this should be fixed so that metric units would be the default
}


function snowpilot_cardinal_wind_dir($degrees){
	if (!is_numeric($degrees)) return;
	switch (true){
		
		case ($degrees >= 360-22.5 || $degrees < 22.5): $card = 'N'; break; 
		case ($degrees >=22.5 && $degrees < 67.5 ): $card = 'NE'; break;
		case ($degrees >=67.5 && $degrees < 112.5): $card = 'E'; break;
		case ($degrees >=112.5 && $degrees < 157.5): $card = 'SE'; break;
		case ($degrees >=157.5 && $degrees < 202.5): $card = 'S'; break;
		case ($degrees >=202.5 && $degrees < 247.5): $card = 'SW'; break;
		case ($degrees >= 247.5 && $degrees < 292.5): $card = 'W'; break;
		case ($degrees >=292.5 && $degrees < 337.5): $card ='NW'; break;
	
	
	}
	return $card;
}

function _snowpilot_find_pit_depth($node){
	$max = 0;
	if (isset($node->field_total_height_of_snowpack['und'][0]['value'])){
		$max =  $node->field_total_height_of_snowpack['und'][0]['value'];
	}elseif ( isset($node->field_layer['und'])){
		$ids = array();
		foreach ($node->field_layer['und'] as $lay ){ $ids[] = $lay['value']; }
		$all_layers = field_collection_item_load_multiple($ids);
		foreach ($all_layers as $layer){
			if ($layer->field_height['und'][0]['value'] > $max ) $max = $layer->field_height['und'][0]['value'] ;
			if ($layer->field_bottom_depth['und'][0]['value'] > $max ) $max = $layer->field_bottom_depth['und'][0]['value'] ;	
		}
	}
	if ( $max == 0 ){// then lets look for stability tests  
		$ids = array();
		foreach ($node->field_test['und'] as $test ){ $ids[] = $test['value']; }
		$all_tests = field_collection_item_load_multiple($ids);
		foreach ($all_tests as $test){
			if ($test->field_depth['und'][0]['value'] > $max ) $max = $test->field_depth['und'][0]['value'] ;
		}
	}
	return $max;
}
//
//  This function returns the maximum depth of a snowpit ( if known ) for $form  ( = form_state )
//    if the snowpit depth cannot be determined, either because no layers are given, or no total height of snowpack is given
//    then this functio nreturns 1000 ,assumed to be the max possible anyone would dig!!!
function _raw_max_pit_depth( $form ){
	$max = 0 ;
	//dsm($form['field_layer']);
	if ( isset ( $form['field_total_height_of_snowpack']['und'][0]['value']) && $form['field_total_height_of_snowpack']['und'][0]['value'] > 0 ){
	  $max = $form['field_total_height_of_snowpack']['und'][0]['value']; 
	}elseif ( is_real_layers( $form['field_layer']['und']) ){ // This seems in-efficient to call a binary function to test if we want to do the loop Code Cleanup; it allows us to go to stability tests
		foreach ( $form['field_layer']['und'] as $key => $layer ){
			//dsm($layer);
			if ( is_numeric( $key ) && $layer['field_height']['und'][0]['value'] > $max  ) {  
				$max = $layer['field_height']['und'][0]['value']; 
			}
			if ( is_numeric( $key ) && $layer['field_bottom_depth']['und'][0]['value'] > $max ) {
				$max = $layer['field_bottom_depth']['und'][0]['value'];
			}
		}	
			//dsm ( "max: ".$max);

	}elseif ( is_real_tests ( $form['field_test']['und'])){
		foreach ( $form['field_test']['und'] as $key => $test ){
			if ( is_numeric( $key )  && $test['field_depth']['und'][0]['value'] > $max  ) {  
				$max = $test['field_depth']['und'][0]['value']; 
			}
		}
	}else{   /// could potenntially expand this to temp collections and densty profiles, but there is not much snow info there!
		$max = 1000;
	}	
	return $max;
}

function is_real_layers ( $layers ){
	if ( !isset($layers)){
		return FALSE;
	}else
		$ret_val = FALSE;
		foreach ( $layers as $key => $layer ){
			if ( is_numeric( $key ) && ($layer['field_height']['und'][0]['value'] <> '' || $layer['field_height']['und'][0]['value'] <> '' )){
				$ret_val = TRUE;
			}
		}
		return $ret_val;
}

function is_real_tests ( $tests ){
	if ( !isset($tests)){
		return FALSE;
	}else
		$ret_val = FALSE;
		foreach ( $tests as $key => $test ){
			if ( is_numeric( $key ) && isset($test['field_depth']['und'][0]['value'] ) && ($test['field_depth']['und'][0]['value'] <> '' )){
				$ret_val = TRUE;
			}
		}
		return $ret_val;
}

function depth_val($a,$b){
	$a_depth = isset($a->field_depth['und'][0]['value']) ? $a->field_depth['und'][0]['value'] : 0; 
	$b_depth = isset($b->field_depth['und'][0]['value']) ? $b->field_depth['und'][0]['value'] : 0;
	
	switch (true){
		case $a_depth>$b_depth:
			return -1;
		break;
		case $a_depth<$b_depth:
			return 1;
		break;
		case $a_depth == $b_depth:
		  return 0;
		break;
	}	
	
}

function layer_depth_val( $a , $b){
	return ($a->y_val_top > $b->y_val_top) ? 1 : -1 ;
}


//  Returns a string when give a stability test part of a node, eg. $node->field_test['und'][$x]
//  $test is a fieldCollectionEntityObject

function stability_test_score_shorthand($test, $snowpit_unit_prefs){
	$string = '';
	//
	// Let's calculate what the Fracture Character or shear quality part of the string will be
	//
	if ( $snowpit_unit_prefs['field_fracture_category'] == 'shear_quality' && isset($test->field_shear_quality['und'][0]['value'])){
		$fracture = ', ' . $test->field_shear_quality['und'][0]['value'];
	}elseif (isset( $test->field_fracture_character['und'][0]['value'])){
		$fracture = ', ' . $test->field_fracture_character['und'][0]['value'];
	}else{
		$fracture = '';
	}
	//
	//  
	//
	
	switch ($test->field_stability_test_type['und'][0]['value']){
		case 'ECT':
				$string = $test->field_stability_test_score['und'][0]['value'] ;
				$string .= isset ($test->field_ec_score['und'][0]['value']) ? $test->field_ec_score['und'][0]['value'] : '';
				$string .= $fracture;	
		break;
		case 'PST':
		if ( isset ($test->field_length_of_saw_cut['und'][0]['value']) && 
				isset( $test->field_length_of_isolated_col_pst['und'][0]['value'] ) && 
				isset ($test->field_data_code_pst['und'][0]['value'])){
			$string = 'PST'. $test->field_length_of_saw_cut ['und'][0]['value']."/". 
				$test->field_length_of_isolated_col_pst['und'][0]['value'].
				" (". $test->field_data_code_pst['und'][0]['value']. ")". 
				$fracture;
		}else{ 
			$string = 'PST, missing data';
		}
		break;
		case 'CT':
			if (in_array($test->field_stability_test_score_ct['und'][0]['value'], array('CTE','CTM', 'CTH', 'CTN'  )) && isset($test->field_ct_score['und'][0]['value'])){
				$string = 'CT' . $test->field_ct_score['und'][0]['value'] . $fracture;
			}else{
		  	$string = $test->field_stability_test_score_ct['und'][0]['value'] . $fracture;
			}
		break;	
		case 'RB':
		case 'ST':
		case 'SB':		
			$string = $test->field_stability_test_score['und'][0]['value'] . $fracture;
		break;	
	}
	//
	// Test Multiple would be set previously, by the function that calls this
	if ( $test->multiple > 1 ){
		$string = $test->multiple.'x '.$string;
	}
	
	if ( !in_array( $test->field_stability_test_score['und'][0]['value'], array('CTN', 'STN' , 'ECTX', 'RB7', 'SBN'  )) ){
		$final_depth = $test->field_depth['und'][0]['value'] + 0;
		$string .= " @". $final_depth .$snowpit_unit_prefs['field_depth_units']; 
	}
	return $string;
}

function stability_test_score_shorthand_form($stab_test){
	$string = '';
	if ( !isset( $stab_test['field_stability_test_type']['und']['#default_value'][0] )) return '';
	$shear_quality = isset($stab_test['field_shear_quality']['und']['#default_value'][0]) ? ", ".$stab_test['field_shear_quality']['und']['#default_value'][0] : '' ;
	switch ($stab_test['field_stability_test_type']['und']['#default_value'][0]){
		case 'ECT':
		  $string = $stab_test['field_stability_test_score_ect']['und']['#default_value'][0];
			if (in_array( $stab_test['field_stability_test_score_ect']['und']['#default_value'][0], array( 'ECTP','ECTN' ) ) && isset ($stab_test['field_ec_score']['und'][0]['value']['#default_value'] )){
				$string .= " ". $stab_test['field_ec_score']['und'][0]['value']['#default_value'];		
			}
		
		break;
		case 'PST':
			$string = 'PST'. $stab_test['field_length_of_saw_cut']['und'][0]['value']['#default_value']."/". $stab_test['field_length_of_isolated_col_pst']['und'][0]['value']['#default_value']." (". $stab_test['field_data_code_pst']['und']['#default_value'][0]. ")";
		
		
		break;
		case 'CT':
	  	$string = $stab_test['field_stability_test_score_ct']['und']['#default_value'][0];
			if (in_array($stab_test['field_stability_test_score_ct']['und']['#default_value'][0], array('CTE','CTM', 'CTH', 'CTN'  )) && isset($stab_test['field_ct_score']['und'][0]['value']['#default_value'])){
				$string .= $stab_test['field_ct_score']['und'][0]['value']['#default_value'] . $shear_quality;
			}
		break;	
		case 'RB':
	  $string = $stab_test['field_stability_test_score_rb']['und']['#default_value'][0]. $shear_quality; break;
		
		case 'ST':
	  $string = $stab_test['field_stability_test_score_st']['und']['#default_value'][0]. $shear_quality; break;
		
		case 'SB':
		  $string = $stab_test['field_stability_test_score_sb']['und']['#default_value'][0]. $shear_quality;		break;	
	}

	return $string;
	
}

function snowpilot_user_edit(){
  global $user;
  drupal_goto('user/'.$user->uid.'/edit');
	
}

function snowpilot_user_has_role($roles) {  
	global $user;	
    if (in_array($roles, $user->roles)) {
      return TRUE;
    }
 
  return FALSE; 
}

function snowpilot_graph_field_trunc(&$img,$string,$x_limit){
	
}

//
// borrowed from http://php.net/manual/en/function.floatval.php
// $num is a string
function _tofloat($num) {
    $dotPos = strrpos($num, '.');
    $commaPos = strrpos($num, ',');
    $sep = (($dotPos > $commaPos) && $dotPos) ? $dotPos :
        ((($commaPos > $dotPos) && $commaPos) ? $commaPos : false);
  
    if (!$sep) {
        return floatval(preg_replace("/[^0-9]/", "", $num));
    }

    return floatval(
        preg_replace("/[^0-9]/", "", substr($num, 0, $sep)) . '.' .
        preg_replace("/[^0-9]/", "", substr($num, $sep+1, strlen($num)))
    );
}

