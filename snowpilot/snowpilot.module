<?php


function snowpilot_form_alter(&$form, &$form_state, $form_id){
	// fields that will need to have the suffix changed according to the users prefs. 
	//	
	switch($form_id ){
		case 'snowpit_profile_node_form':
		$node = $form_state['node'];
    if ($node->type == 'snowpit_profile'){ // this might be rendundant for the switch/case above.
			if( !isset($node->nid) || isset($node->is_new) ){ // a new snowpit profile node, find $unit_prefs from $user
				global $user;
				$account = user_load($user->uid);
				$snowpit_unit_prefs = snowpilot_unit_prefs_get($account);  
				if ( snowpilot_user_unit_prefs_check($user->uid)){ // this check function verifies that we have a full set of unit preferences, etc, setup for this user. It redirects to the user /edit page if one or more are lacking
					// set the unit prefs on the snowpit node form.
					snowpilot_snopit_prof_unit_prefs_set($form, $snowpit_unit_prefs);	
				}
			}else{ // not a new node, but an edited one, so load the unit prefs from the existing $node
				$snowpit_unit_prefs = snowpilot_unit_prefs_get($node, 'node');  
			}
			snowpilot_snopit_prof_set_suffices($form, $snowpit_unit_prefs);
			
			snowpilot_snowpit_set_layer_titles($form);
			
			$form['#after_build'][] = 'snowpilot_set_layer_title_after_build';
			

			
			//dsm();
		//}
		} // end if node->type == snowpit prof
	} // end switch
	return;
}

//<<<<<<< Local Changes
function snowpilot_snopit_set_density_titles(&$form){
	
	return;
}

function snowpilot_snopit_set_stability_test_titles(&$form){
	// this will be a fancy one, with compiled stab test output
	return;
}

function snowpilot_snowpit_set_temp_coll_titles(&$form, $snowpit_unit_prefs){
	$x= 0;
	while (isset($form['field_temp_collection']['und'][$x])){
		$next_layer = $x+1;
		if (isset($form['field_temp_collection']['und'][$next_layer])){ $collapsed = ' collapsed'; }else { $collapsed = '';}
		
		$form['field_temp_collection']['und'][$x]['#prefix'] = "<div class='collapsible-container layer_num_". $x ." '>".
			"<h3 class='collapsible-handle layer-title'>Temp Point Number " . $next_layer. ": ". 
				$form['field_temp_collection']['und'][$x]['field_temp_temp']['und'][0]['value']['#default_value'] . "&#176;". 
					$snowpit_unit_prefs['field_temp_units'].
						" @ ". $form['field_temp_collection']['und'][$x]['field_depth']['und'][0]['value']['#default_value'].
						" ". $snowpit_unit_prefs['field_depth_units'].
					 "</h3>".
				'<div class="collapsible-content" >';
		$form['field_temp_collection']['und'][$x]['#suffix'] ="</div> </div>";
		$x++;
	}
	return $form;
}

//=======
//>>>>>>> External Changes
function snowpilot_snowpit_set_layer_titles(&$form){
	// Start with the overall title of the group
	$form['field_layer']['und']['#title'] = "Snowpack layers"; // 
	$x=0;

	while(isset($form['field_layer']['und'][$x] )){
		$next_layer = $x+1 ; 
	
		$collapsed = '';
		if (isset($form['field_layer']['und'][$next_layer])) {
	
			$form['field_layer']['und'][$next_layer]['field_height']['und'][0]['value']['#default_value'] = 
				$form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#default_value'];
			$collapsed = ' collapsed';
		}
		if (isset($form['field_layer']['und'][$x]['field_hardness']['und']['#default_value'][0])){ 
			$this_hardness = $form['field_layer']['und'][$x]['field_hardness']['und']['#default_value'][0];
		}
		if ( isset($form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#default_value'])){
			$layer_info = 	$form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#default_value'].' cm - ' . 
				$form['field_layer']['und'][$x]['field_height']['und'][0]['value']['#default_value']. " cm; ". $this_hardness;
		}else $layer_info = '';
	
		$form['field_layer']['und'][$x]['#prefix'] ="<div class='collapsible-container layer_num_". $x ." '>".
			"<h3 class='collapsible-handle layer-title'>Layer " . $next_layer . ": ". $layer_info . "</h3>".
				'<div class="collapsible-content'. $collapsed .'" >';

		$form['field_layer']['und'][$x]['#suffix'] ="</div> </div>";
		//dsm($form['field_layer']['und'][$x]);
		$x++;
	}
	dsm($form['field_layer']);
}

function snowpilot_set_layer_title_after_build(&$form, &$form_state){
	//$form['field_layer']['und'][0]['#groups']['group_layer_inner']->format_settings['instance_settings']['description'] = "Layer 1";
	//$form['field_layer']['und'][1]['#groups']['group_layer_inner']->format_settings['instance_settings']['description'] = "Layer 2";
	
			
	//$form['field_layer']['und'][0]['field_height']['und'][0]['value']['#field_prefix'] = "<h3> Hey this is big and in front</h3>"; //
	//$form['field_layer']['und'][1]['field_height']['und'][0]['value']['#field_prefix'] = "<h3> Hey this is big and in front, and this is second</h3>"; //
	
	drupal_add_js('/sites/all/modules/snowpilot/js/snowpilot.js');
	

	
	return $form;
	
}


function snowpilot_node_view($node, $view_mode){
	if ($node->type == 'snowpit_profile'){
		$prefs = snowpilot_unit_prefs_get($node, 'node'); 
		
		$node->content['field_air_temp'][0]['#markup'] = $node->content['field_air_temp']['#items'][0]['value']. $prefs['field_temp_units'];
	}
	return $node;
}
/*
	  depth 0 from: top, bottom ;  field_depth_0_from
		Depth Units: cm, inches ; field_depth_units
		Temp Units: C, F ; field_temp_units
		Coord Type: Lat / Long,  UTM
		elev units: m, ft
		Default Logintude: W, E
		Latitude: N, S
		Density Units: kg/cubic m , lbs / cubic ft
		Fracture category: Shear Quality , Fracture character
		Hardness scale: linear, exponential
			
		Default	State/Province: from taxonomy hierarchical select
		Default Range : hierarchical select 
			
			Also:
		prof
		Affiliation - this can be chosen from a taxonomy on the user page
		first
		last
		phone
		email
		name
				*/			
		
				// use a 'favorite locations' node type to store fields that should be prepopulated on the snowpit profile form.


// This function checks to see if all the user info fields have been filled out.
//   if so, it will return the $account object.
//   if some field is missing, it will redirect the user to the user edit page (!) to fill in that info.

function snowpilot_user_unit_prefs_check($uid){
	$account = user_load($uid);
	$drupal_keys_required = array( // this is a list of keys that are required in order to populate the snowpit profile
		'field_depth_0_from', 
		'field_depth_units', 
		'field_temp_units', 
		'field_coordinate_type', 
		'field_elevation_units',
		'field_longitude_type',
		'field_latitude_type',
		'field_density_units',
		'field_fracture_category',
		'field_hardness_scale',
	//	'field_loaction',
	//  'field_loaction_0'
	//	'field_loaction_1',
		'field_first_name',
		'field_last_name',
		'field_phone',
		'field_professional',
	//	'field_professional_affiliation',
		'name',
		'mail'
	);
  $missing_keys = array();
	foreach($drupal_keys_required as $key){
		if (count($account->$key ) == 0 ){
			$missing_keys[] = $key;
		
		}
	}
	/*
	    This checks to make sure all of the 'drupal required keys' are present. IF not, the user is redirected to the 
			user edit form, then back here.
	*/
	if (count($missing_keys)){
		drupal_set_message( "<h3>Missing User Unit Preferences</h3>You need to set your <a href = '/user/". $uid ."/edit#edit-field-first-name'>User Unit Preferences</a> before you can create a new Snowpit Profile.<br/>
			The following preferences have not been set yet: <li>" . implode($missing_keys,'<li>'), 'warning');
		drupal_goto("user/". $uid ."/edit", array('query' => array('destination' => 'node/add/snowpit-profile')) );
			return FALSE;
	}
	return $account;
}

// snowpilot_unit_prefs_get will return unit prefs, an array,
//input is user object
// $ouput_format = 'drupal' (default): 'avsic' or 'drupal' - indicates the keys of the array, which format to follow inteh return array 
// return is $unit_prefs = array('hardnessScaling' => 'linear|exponential', 'rhoUnits' =>'kgsper' etc.)
// or is array( 'field_temp_units' => 'C' , 'field_depth_units' => 'in', 'field_depth_0_from' => 'top' )  
// type is node or user, where to draw the data from 


function snowpilot_unit_prefs_get($entity, $type = 'user'){

	$unit_prefs = array( 
		
		
		'field_depth_0_from' => _helper_cleaner($entity,'field_depth_0_from'), 
		'measureFrom' => _helper_cleaner($entity,'field_depth_0_from'), 
		
		'field_depth_units' =>  _helper_cleaner($entity,'field_depth_units'), 
		'depthUnits'  => _helper_cleaner($entity,'field_depth_units'), 
			
		'field_temp_units' => _helper_cleaner($entity,'field_temp_units'), 
		'tempUnits'  => _helper_cleaner($entity,'field_temp_units'), 
			
		'field_coordinate_type' =>  _helper_cleaner($entity,'field_coordinate_type'),
		'coordType' =>  _helper_cleaner($entity,'field_coordinate_type'),
		
		'field_elevation_units' =>  _helper_cleaner($entity,'field_elevation_units'),
		'elvUnits'  => _helper_cleaner($entity,'field_elevation_units'),
			
		'field_longitude_type' => _helper_cleaner($entity,'field_longitude_type'),
		'longType'=> _helper_cleaner($entity,'field_longitude_type'),
			
		'field_latitude_type' => _helper_cleaner($entity,'field_latitude_type'),
		'latType' => _helper_cleaner($entity,'field_latitude_type'),
		
		'field_density_units' =>  _helper_cleaner($entity,'field_density_units') ,
		'rhoUnits' =>  _helper_cleaner($entity,'field_density_units') ,
		
		'field_fracture_category' =>  _helper_cleaner($entity, 'field_fracture_category'),
		'fractureCat' =>  _helper_cleaner($entity, 'field_fracture_category'),
		
		'field_hardness_scale' => _helper_cleaner($entity,'field_hardness_scale'),
		'hardnessScaling' => _helper_cleaner($entity,'field_hardness_scale'),
		///////
		'field_loaction_0' => _helper_cleaner($entity, 'field_loaction','tid'),
		'state' => _helper_cleaner($entity, 'field_loaction','tid'), // this needs a conversion function to the state/province name
		
		'field_loaction_1' => _helper_cleaner($entity, 'field_loaction','tid', '1'),
		'range' =>  _helper_cleaner($entity, 'field_loaction','tid', '1'),  // this will need a conversion function to the name of the range
		
		'field_first_name' =>_helper_cleaner($entity,'field_first_name'),
		'first' => _helper_cleaner($entity,'field_first_name'),
		
		'field_last_name' => _helper_cleaner($entity,'field_last_name'),
		'last' => _helper_cleaner($entity,'field_last_name'),
		
		'field_phone' => _helper_cleaner($entity,'field_phone'),
		'phone' => _helper_cleaner($entity,'field_phone'),
		
		'field_professional' =>  _helper_cleaner($entity,'field_professional'),
		'prof' => _helper_cleaner($entity,'field_professional'),
			
		'field_professional_affiliation' => _helper_cleaner($entity, 'field_professional_affiliation','tid')  ,
		'affil'  => _helper_cleaner($entity, 'field_professional_affiliation', 'tid')  ,// tid needs to be converted to name
		
		
		);
		/*
		     These fields are not present in the 'node' variable that this function works on.
		*/
		if ($type  == 'user'){
			$unit_prefs['name'] = $entity->name; // hey, this is the same value in both core drupal and avscience db!
		
			$unit_prefs['mail'] = $entity->mail;
			$unit_prefs['email'] = $entity->mail;
		}
		
	/*	foreach($unit_prefs as $value){
			if ($value == '' ) return FALSE; 	
		}*/
		return $unit_prefs;
}

// This function is used by snowpilot_unit_prefs_get to avoid trying to fetch a property of a non-object ...
// For now, works only with regular fields of 

function _helper_cleaner($entity, $field, $value = 'value', $count = 0){  
  if (isset($entity->$field) && count($entity->$field)){
		//var_dump($entity->$field);
		//var_dump($entity); echo $field;
		$entity = (array) $entity;
		return $entity[$field]['und'][$count][$value]; 
	}else{
		return NULL;
	}

}
	 
	 
function snowpilot_snopit_prof_unit_prefs_set(&$form,$snowpit_unit_prefs){


	$form['field_loaction']['und']['#default_value'][0] = $snowpit_unit_prefs['field_loaction_0'];
	$form['field_loaction']['und']['#default_value'][1] = $snowpit_unit_prefs['field_loaction_1'];
	foreach( $snowpit_unit_prefs as $key => $pref){
		if ($key != 'field_loaction_0' 
			&& $pref != 'field_loaction_1' 
			&& substr($key,0,6) == 'field_' 
		  && isset($form[$key])){
				$form[$key]['und']['#default_value'] = $pref ;
				//drupal_set_message("<pre>". var_export($form, TRUE )."</pre>");
				
		}
	}
	
	
	return $form;
}



function snowpilot_snopit_prof_set_suffices(&$form, $snowpit_unit_prefs){
	//dsm($form['field_elevation']['und'][0]);
	$form['field_air_temp']['und'][0]['value']['#field_suffix'] = 'º'.$snowpit_unit_prefs['field_temp_units'];
	$form['field_elevation']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_elevation_units'];
	$form['field_slope_angle']['und'][0]['value']['#field_suffix'] = " degrees";
	$form['field_surface_penetration']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
	$form['field_boot_penetration_depth']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
	$form['field_ski_penetration']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
  $form['field_total_height_of_snowpack']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
	
	// Repeated per layer
	$x = 0; //count($form['field_layer']['und'] );
	while ( isset($form['field_layer']['und'][$x]) ){
				
				
		$form['field_layer']['und'][$x]['field_height']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units']; //
		$form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$form['field_layer']['und'][$x]['field_density_top']['und'][0]['value']['#field_suffix'] = _density_unit_fix($snowpit_unit_prefs['field_density_units']);
		$form['field_layer']['und'][$x]['field_density_bottom']['und'][0]['value']['#field_suffix'] = _density_unit_fix($snowpit_unit_prefs['field_density_units']);
		$form['field_layer']['und'][$x]['field_grain_size']['und'][0]['value']['#field_suffix'] = 'mm';
		$x++;
	}

	// Repeated per test
	$x = 0; //count($form['field_layer']['und'] );
	while ( isset($form['field_test']['und'][$x]) ){
		$form['field_test']['und'][$x]['field_depth']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$form['field_test']['und'][$x]['field_length_of_saw_cut']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$form['field_test']['und'][$x]['field_length_of_isolated_col_pst']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$x++;
	}
	return;
}

function _density_unit_fix($units){
	return ($units == 'kg_cubic_m' ? 'kg/m&#xb3' : 'lb/ft&#xb3');
}

?>
