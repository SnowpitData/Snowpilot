<?php
include_once('includes/populate_layers_table.php');
include_once('includes/populate_shear_tests_table.php');
include_once('includes/unit_prefs.inc.php');
include_once('includes/graphing_functions.inc.php');
include_once('includes/export_xml.inc.php');
include_once( DRUPAL_ROOT . '/sites/all/libraries/ForceUTF8/Encoding.php');

//include_once('includes/snowpilot_mapping.php');
//include_once('includes/snowpilot_mapping_view.php');


//function snowpilot_menu_alter(){
	//}

function snowpilot_menu(){
	$items['snowpilot/%ctools_js/login']= array(
		'title' => 'Modal Login',
		'page callback' => 'snowpilot_login',
  	'page arguments' => array(1),
 	 	'access callback' => TRUE,
 		'type' => MENU_CALLBACK,
	);
  $items['snowpilot/%ctools_js/login/%'] = array(
      'title' => 'Post-Login Action',
      'page callback' => 'snowpilot_login_success',
      'page arguments' => array(1, 3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
	$items['snowpilot/user/edit'] = array(
		'title' => 'Edit Snowpit Preferences',
		'page callback' => 'snowpilot_user_edit',
		'access callback' => 'snowpilot_user_has_role',
		'access arguments' => array ('authenticated user'),
		'type' => MENU_NORMAL_ITEM,	
		
	);
	
	$items['organizations'] = array(
		'title' => 'Manage Organization Users and Snowpits',
		'page callback' => 'snowpilot_organization', // Note singular, not plural like following $item[]
		'page arguments' =>array( 1 ),
		'access callback' => 'snowpilot_user_has_role',
		'access arguments' => array ( 'org admin' ),
		'type' => MENU_NORMAL_ITEM,	
		
	);
	$items['organizations/%'] = array(
		'title' => 'Manage Organization Users and Snowpits',
		'page callback' => 'snowpilot_organizations',
		'page arguments' =>array( 1 ),
		'access callback' => 'snowpilot_org_admin_page',
		'access arguments' => array ( 1 ),
		'type' => MENU_NORMAL_ITEM,	
		
	);

	$items['snowpit/%node/download'] = array(
		'title' => 'Download snowpit jpg',
		'page callback' => 'snowpilot_node_snowpit_download',
		'page arguments' => array(1),
		'access callback' => 'node_access',
		'access arguments' => array( 'view', 1),
		'type' => MENU_CALLBACK,
	);
	//dsm('bout to call... ');
	
	$items['snowpit-blade-hardness/%node'] = array(
		'title' => 'Snowpit jpg, including Blade Hardness Profile',
		'page callback' => 'snowpilot_node_blade_hardness_profile',
		'page arguments' => array(1),
		'access callback' => 'snowpilot_user_has_role',
		'access arguments' => array ( 'Blade Hardness Testers', 'administrator' ),
		'type' => MENU_CALLBACK,
	);
	
	$items['snowpilot/%user/remove_affiliation'] = array(
		'title' => 'Confirm remove User from group?',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('snowpilot_remove_affiliation_form', 1),
		'access callback' => 'snowpilot_org_admin_access',
		'access arguments' => array(1),
		'type' => MENU_CALLBACK,		
	);
	$items['snowpilot/add_affiliation'] = array(
		'title' => 'Add user to your Group',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('snowpilot_add_affiliation_form'),
		'access callback' => 'snowpilot_org_admin_access',
		'access arguments' => array(1),
		'type' => MENU_CALLBACK,		
	);
	
	return $items;
}

function snowpilot_org_admin_page($tid ){ // an access check function
	global $user;
	$full_user = user_load($user->uid);
	//if ( in_array( 'administrator' , $full_user->roles ) )
	if ( !in_array ( $tid, array_column( $full_user->field_org_admin_groups['und'] , 'tid' )  	)
	|| !in_array( 'org admin' , $full_user->roles )){
		return FALSE;
	}else{
  	return TRUE;
	}
}

function snowpilot_permission(){
	$permission = array(
		'lock snowpit' => array(
			'title' => t('Lock Snowpit'),
			'description' => t('Lock Pit to prevent further editing.'),			
		),
	);
	return $permission;
}

function snowpilot_organization(){
	global $user;
	//dsm($user);
	$org_admin_user = entity_metadata_wrapper('user', $user);
	$result = '';
	if ( count ( $org_admin_user->field_org_admin_groups->value() ) > 1 ) {
		$result .= snowpilot_org_admin_page_links($org_admin_user->field_org_admin_groups->value() );
	}
	$org_admin_groups = $org_admin_user->field_org_admin_groups->value();
	if ( !in_array($default_org , $org_admin_groups  )){  // If this organization is not one they can manage, reset their default org to something standard.
		
		if ( ! isset( $org_admin_groups[0]) ) {
			$result .= 'You are an organization admin, but you do not have any Organization of which you are shown to be an admin. Please contact us at admin@snowpilot.org to resolve.';
		  return $result;
		}
		$org_admin_user->field_org_ownership->set( $org_admin_groups[0]->tid );
		//$org_admin_user->save();
	}	
	$default_org = $org_admin_user->field_org_ownership->value();
	$result .= '<h2>Snowpits for '. $default_org->name  . '</h2>'; 
	$result .= views_embed_view( 'new_test_search' , 'page', $default_org->tid );
	drupal_set_title ( t('Manage Organization Users and Snowpits: '.$default_org->name ));
	return $result;
}

function snowpilot_org_admin_page_links( $groups ){
	$result = '<div class ="org-admin-links"><h2>Groups you may administer:</h2> <ul>';
	foreach ( $groups as $group ){
		$result .= '<li><a href ="/organizations/'. $group->tid .'">'. $group->name .'</a>  </li>';
	}
	
	
	$result .= '</ul></div>';
	
	return $result;
}

function snowpilot_organizations($tid ){
	global $user;
	$org_admin_user = entity_metadata_wrapper('user', $user);
	$default_org = $org_admin_user->field_org_ownership->value();
	if ( $default_org->tid <> $tid ){
		//$org_admin_user->field_org_ownership->offsetUnset( 0 );
		$org_admin_user->field_org_ownership->set( $tid );
		$org_admin_user->save();
		$default_org = $org_admin_user->field_org_ownership->value();
	}
	if ( count ( $org_admin_user->field_org_admin_groups->value() ) > 1 ) {
		$result = snowpilot_org_admin_page_links($org_admin_user->field_org_admin_groups->value() );
	}
	$result .= '<h2>Snowpits for '. $default_org->name  . '</h2>';
	$result .= views_embed_view( 'new_test_search' , 'page', $tid );
	drupal_set_title ( t('Manage Organization Users and Snowpits: '.$default_org->name ));
	
	return $result;
}

function snowpilot_add_affiliation_form($form, &$form_state){
	global $user;
	$org_admin_user = entity_metadata_wrapper('user', $user);
	$form['#access'] = 'snowpilot_org_admin_access';
	$form['snowpilot_add_affiliation'] = array(
		'#type' => 'textfield',
		'#size' => 30,
		'#autocomplete_path' => 'user/autocomplete',
		'#title' => t('@thegroup', array( '@thegroup' => $org_admin_user->field_org_ownership->label() ) ),
		'#description' => t('Begin typing username to find user'),	
		'#weight' => '15',
		'#required' => TRUE,
	);
	$form['#validate'][] = 'snowpilot_add_affilitation_form_validate';
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Add User',
		'#weight' => '25',
	);
	return $form;
}

function snowpilot_add_affilitation_form_validate($form, &$form_state){
	global $user;
	$org_admin_user = entity_metadata_wrapper('user', $user);
	$added_org = $org_admin_user->field_org_ownership->value();
	
	if( ! ($account = user_load_by_name($form['snowpilot_add_affiliation']['#value']))) {
		form_set_error('snowpilot_add_affiliation' , 'User '. $form['snowpilot_add_affiliation']['#value'] .' Not Found!');
	}
	foreach ( $account->field_professional_affiliation['und'] as $group ) $group_tids[] = $group['tid'];

	if( in_array($added_org->tid , $group_tids) ){
	  form_set_error( '', 'User: '.$form['snowpilot_add_affiliation']['#value'] .' is already a member of '. $org_admin_user->field_org_ownership->label() );
	}
}

function snowpilot_add_affiliation_form_submit($form, &$form_state){
	global $user;
	$org_admin_user = entity_metadata_wrapper('user', $user);
	$added_org = $org_admin_user->field_org_ownership->value();
  $account = user_load_by_name($form['snowpilot_add_affiliation']['#value']);

	  $regular_user = entity_metadata_wrapper('user', $account);
	  $regular_user->field_professional_affiliation[] = $added_org->tid ;
	
	  $result = $regular_user->save();
	  drupal_set_message ( t('User @theuser has been added to group @thegroup' , array( '@theuser' => $form['snowpilot_add_affiliation']['#value'], '@thegroup' => $org_admin_user->field_org_ownership->label() ) )  );
	  return;
}

function snowpilot_remove_affiliation_form($form, &$form_state, $account){
	$form['#access'] = 'snowpilot_org_admin_access';
	$form_state['storage']['account'] = $account;
	//dsm($item);
	global $user;
	$org_admin_user = entity_metadata_wrapper('user', $user);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Submit',
		'#weight' => '25',
		
	);
	$form['snowpilot_remove_affiliation'] = array(
		'#type' => 'radios',
		'#title' => t('Confirm removing @theuser from the group: @thegroup?', array( '@theuser' => $account->name, '@thegroup' => $org_admin_user->field_org_ownership->label() ) ),
		'#description' => t(''),	
		'#weight' => '15',
		'#required' => TRUE,
		'#options' => array(
			'confirm' => t('Confirm'),
		),
	);

	$form['snowpilot_remove_affiliation']['confirm'] = array( 
	  '#description' => t('Snowpits created by this user will remain associated with the group: '.$org_admin_user->field_org_ownership->label() ),
	);
	return $form;
	
}


function snowpilot_remove_affiliation_form_submit($form, &$form_state){
	global $user;
	$org_admin_user = entity_metadata_wrapper('user', $user);
	$org_admin_info = $org_admin_user->field_org_ownership->value();
	$user_wrapper = entity_metadata_wrapper( 'user' , $form_state['storage']['account']);
	foreach ( $user_wrapper->field_professional_affiliation->value() as $key => $group ){ 
		$tids[] = $group->tid;
		if ( $group->tid == $org_admin_info->tid ) $offset_value = $key ;
	}

	if ( in_array($org_admin_info->tid , $tids ) ){
	  $admin_email = $user->mail;
		$user_mail = $user_wrapper->mail->value();
		$user_name = $user_wrapper->name->value();
		
  	if ($form_state['values']['snowpilot_remove_affiliation'] == 'confirm'){
		  $user_wrapper->field_professional_affiliation->offsetUnset( $offset_value );
			$user_wrapper->save();
		  $body = "<h2>The user ".$user_wrapper->label()." has been removed from ". $org_admin_user->field_org_ownership->label()." </h2> ";
	    drupal_mail('snowpilot', 
			  $form_state['values']['snowpilot_remove_affiliation'], // mail key equals the value of how to suspend/remove
				'admin@snowpilot.org,'.$user_mail ,
				user_preferred_language($user),
				array ( 'org_admin_user' => $org_admin_user , 'user_wrapper' => $user_wrapper), 'admin@snowpilot.org' , TRUE  
			);
  	}
	}else{
	  $body = "<h2>The user ".$user_wrapper->label()." is not currently part of ". $org_admin_user->field_org_ownership->label()." </h2> ";
  }
	drupal_set_message($body);
	return;
}

function snowpilot_mail( $key, &$message, $params){
	$org_admin_user = $params['org_admin_user'];
	$user_wrapper = $params['user_wrapper'];
	switch ($key){
		case 'confirm':
	    if (isset($params['subject'])) {
	      $message['subject'] = $params['subject'];
	    } else {
	    	$message['subject'] = '[SnowPilot] User '.$user_wrapper->name->value(). ' has been removed from group '.$org_admin_user->field_professional_affiliation->label();
			}
	    $message['body'][] = 'Dear '.$user_wrapper->name->value().',
			
Thank you for using SnowPilot. Your group affiliation has changed from '. $org_admin_user->field_professional_affiliation->label() .' since the group\'s administrator has removed you. Your profile is still active and all your pits are still associated with you. 

If you chose the last group in error, you are free to select your correct group on your User Preferences page: 
http://snowpilot.org/user/' .$user_wrapper->uid->value(). '/edit

SnowPilot Admin Team';		
	    if (isset($params['headers']) && is_array($params['headers'])) {   
	      $message['headers'] += $params['headers'];
  	  }
		
		break;
		case 'org-admin-notify':
      if (isset($params['subject'])) {
        $message['subject'] = $params['subject'];
      } else {
      	$message['subject'] = '[SnowPilot] User '.$user_wrapper->name->value(). ' has joined group '.$org_admin_user->field_professional_affiliation->label();
		  }
			$message['body'][] = 'Dear '. $org_admin_user->name->value() .',
			
A new user '. $user_wrapper->name->value(). ' has been added to your group '.$org_admin_user->field_professional_affiliation->label().'.

You may review this user at your organization administration page:
http://snowpilot.org/organizations

Thanks,

The SnowPilot Admin Team';
		break;
	}
	return;
}

function snowpilot_user_org(&$argument){
	//dsm($argument);
	
	global $user;
	$user_wrapper = entity_metadata_wrapper( 'user' , $user);
	$user_info = $user_wrapper->field_org_ownership->value();  // this is ther users DEFAULT org, if they have more than one group, and it's set.
	$user_info2 = $user_wrapper->field_professional_affiliation->value(); /// this is the array of all orgs that they are members of
	
		
	
	if ( isset($user_info->tid) ){
		$default_tid = $user_info->tid;
	}elseif ( isset( $user_info2[0]->tid )){
		$default_tid = $user_info2[0]->tid;
	}else{
		$default_tid = '';
	}
	if ( in_array(6,  $user_wrapper->roles->value()) ){
		//dsm('this far: in org admin role');
		$org_admin_groups = $user_wrapper->field_org_admin_groups->value();
		$admin_org_tids= array();
		foreach ( $org_admin_groups as $group ) { $admin_org_tids[] = $group->tid; 		}
		if ( !in_array($default_tid , $admin_org_tids  )){  // If this organization is not one they can manage, reset their default org to something standard.
			
			if ( ! isset( $org_admin_groups[0]) ) {
				drupal_set_message( 'You are an organization admin, but you do not have any Organization of which you are shown to be an admin. Please contact us at admin@snowpilot.org to resolve.');
			  return ;
			}
		  $user_wrapper->field_org_ownership->set( $org_admin_groups[0]->tid ); $default_tid = $org_admin_groups[0]->tid;
		  $user_wrapper->save();
		  
		}	
		
		
	}
	$argument->validated_title = $user_wrapper->field_org_ownership->label();
	
	return $default_tid;
}

function snowpilot_org_admin_access($item){
	global $user;
	//$account = user_load($user->uid);
	$user_wrapper = entity_metadata_wrapper( 'user' , $user);
	
	//dsm($item);
	// Administrators have permissions to edit all users
	// Organization Admins have permissions to edit their users
	// Everybody can edit their own account.
	foreach( $item->field_professional_affiliation['und'] as $group ){ $group_tids[] = $group['tid'] ;}
	$administer_user_flag = FALSE;
	$admin_user = $user_wrapper->field_org_ownership->value();
	//dsm($admin_user);dsm( $group_tids);
  if ( in_array( $admin_user->tid , $group_tids ) ){
			$administer_user_flag = TRUE;
	}
	
	//$item->field_professional_affiliation['und'][0]['tid'] == $account->field_professional_affiliation['und'][0]['tid']
	
	if ( (in_array( 'org admin', $user->roles ) && ( $administer_user_flag ) 
	  ) || user_access( 'administer users') 
			|| $item->uid == $account->uid
	  ){
		return TRUE;
		
	}else{
		return FALSE;
	}
}

function snowpilot_node_blade_hardness_profile( $node ){
  $snowpit_name_local = $node->title . '-' . date ('d-M', strtotime($node->field_date_time['und'][0]['value']) ).'.'.$format;
  //header('Content-Disposition: attachment; filename="'. $snowpit_name_local .'"');
	$img_bh = imagecreatefrompng(DRUPAL_ROOT.'/sites/default/files/snowpit-profiles/' . substr($node->nid, 0, -3 ). '/graph/graph-' .$node->nid .'.png');
	
	foreach ($node->field_blade_hardness['und'] as $hardness_meas ){
		$blade_hardness_id[] =  $hardness_meas['value'];
	}
	
	$bh_results = field_collection_item_load_multiple($blade_hardness_id);
  //dsm($bh_results);
	//// scavenged from graphing functions
	$snowpit_unit_prefs = snowpilot_unit_prefs_get($node, 'node');
	$pit_depth = _snowpilot_find_pit_depth($node);
	$pit_min = _snowpilot_find_pit_min($node);
	$green = imagecolorallocate($img_bh, 25, 128, 49); 
	$value_font = '/sites/all/libraries/fonts/Arial Bold.ttf';
	
	
	if ( ( isset ( $node->field_total_height_of_snowpack['und'][0]['value'] )  
		&& (  abs($node->field_total_height_of_snowpack['und'][0]['value'] - $pit_depth)>15  ) 
	  && (($node->field_display_full_profile['und'][0]['value'] <> 1 ) || !isset($node->field_display_full_profile['und'][0]['value']) )) 
			
	|| ( ( !isset( $node->field_display_full_profile['und'][0]['value'] ) || ($node->field_display_full_profile['und'][0]['value'] <> 1 ) ) && $pit_min >14 )){
			$shrunken_pit = TRUE;
			$global_max =  701 ;
		}else{
			$shrunken_pit = FALSE;
			$global_max =  751 ;
			$pit_min = 0; // we reset pit_min to zero so it comes out the correct height scaling on the final graph
		}
		foreach ( array (.21,1.1,4.67,58.93) as $newtons ){
			
			imagettftext($img_bh, 9, 0, _bhg2pix($newtons,$snowpit_unit_prefs['field_hardness_scale'])-10 , 765, $green, $value_font, $newtons); 
			imageline( $img_bh, _bhg2pix($newtons,$snowpit_unit_prefs['field_hardness_scale'] ), 734, _bhg2pix($newtons,$snowpit_unit_prefs['field_hardness_scale'] ), 751, $green);
			
		}
		//dsm($bh_results);
		/// end graphing functions scavenge
	foreach ( $bh_results as $bh_result ){
		$depth = $bh_result->field_depth['und'][0]['value'];
		$bh_newtons = $bh_result->field_bhg_newtons['und'][0]['value'];
		$pixel_depth =  snowpit_graph_pixel_depth($depth, $pit_depth, $snowpit_unit_prefs['field_depth_0_from'], $global_max, $pit_min);
		//dsm( _bhg2pix($bh_newtons) );
		imagefilledellipse($img_bh, _bhg2pix($bh_newtons,$snowpit_unit_prefs['field_hardness_scale'] ), $pixel_depth, 6, 6, $green );
	}
	header('Content-Type: image/png');

	imagepng($img_bh);
	return ;
}

function snowpilot_node_snowpit_download($node, $format = 'jpg'){
	if ( node_access('update', $node) && user_access('lock snowpit')){
		// if node is not locked for editing, and there is NOT a snowpit in the avscience db which would include the same serial #, then we cna save and lock it!
		if ( !$node->sticky && !snowpilot_avscience_pit_exists($node) ){
			// then we reset the the pit to sticky == true ( i.e. LOCKED )
			$node_wrapper = entity_metadata_wrapper('node', $node);
			$node_wrapper->sticky->set(true);
			$node_wrapper->save();
			watchdog('snowpilot', "Snowpit $node->nid set to LOCKED.");
			// and save it to the avscience db
			if ( $serial = snowpilot_node_avscience_save_pit($node)) {
				$image_result_code = populate_snowpit_image($serial);
				$layers_result_code = populate_layers_table($serial);
				$tests_result_code = populate_shear_tests_table($serial);		
				watchdog('snowpilot', "Snowpit $node->nid sucessfully saved to avscience db.");
			}else{
				watchdog('snowpilot', "Snowpit $node->nid NOT  saved to avscience db.");
			}
		//
		}
	}
	if (node_access('view', $node)){
	  $format = (isset($format) && $format <> '' ) ? $format : 'jpg';
    $snowpit_name_local = $node->title . '-' . date ('d-M', strtotime($node->field_date_time['und'][0]['value']) ).'.'.$format;
    header('Content-Disposition: attachment; filename="'. $snowpit_name_local .'"');
	 // header('Location: /node/'.$node->nid);
		switch ($format){
			case 'png':
			  header('Content-type: image/png', NULL, 0);
				imagepng(snowpilot_snowpit_graph_header_write($node, 'png'));
				break;
			case 'pdf':
			  header('Content-type: application/pdf');
			  drupal_goto('sites/default/files/snowpit-profiles/' . substr($node->nid, 0, -3 ). '/pdf/pdf-' .$node->nid.'.pdf');
				break;
			case 'jpg':
	      header('Content-type: image/jpeg');
		    imagejpeg(snowpilot_snowpit_graph_header_write($node, 'jpg'), NULL, 100);
			break;
			case 'xml':
				header('Content-type: application/xml');
				//var_dump( snowpilot_node_write_pitxml($node));
				print_r( snowpilot_node_write_pitxml($node));
			break;
			case 'caaml':
				header('Content-type: application/xml');
				print_r (snowpilot_node_write_caaml($node));
			break;
			}
			//drupal_goto('node/'.$node->nid);
			
  }else{
  	drupal_access_denied();
  }
}

function populate_snowpit_image($SERIAL){
	$critical = FALSE; 

	$message = 'default image message';
	
	$img_url = '/sites/default/files/avscience-profiles/graph-serial-'.$SERIAL. '.jpg';
	if( !file_exists( DRUPAL_ROOT. $img_url )){	
    $node_id = avscience_is_drupal_pit( $SERIAL ) ;
	  if ( $node_id > 0 ){  // it is a drupal-genrated snowpit, copy over the existing image
			$orig_img_url = '/sites/default/files/snowpit-profiles/'. substr($node_id, 0, -3 ). '/graph/graph-'.$node_id. '.jpg';
			//$node = node_load( $match[1] );
			$_image = fopen( DRUPAL_ROOT.$orig_img_url , 'rb');
	  	$img_src = fread( $_image, filesize(DRUPAL_ROOT.$orig_img_url));
			fclose($_image);
			
	  }else{  // not a drupal snowpit, get the image from kc server
			$kc_serial = avscience_connect_fetch_kc_serial($SERIAL);
			
			// temporarily commenting this out so that we don't ping the kc server for images too much
			//$img_src = file_get_contents( "http://www.kahrlconsulting.com:8084/avscience/PitServlet?TYPE=PITIMAGE&SERIAL=".$kc_serial );
			$img_src = '';
		}
		
		$local_image = fopen( DRUPAL_ROOT.$img_url , 'w');
		if ( $local_image ){ 
			fwrite($local_image, $img_src);
		  sleep(1);
			
		  fclose($local_image);
		}else{
			$critical = TRUE; 
			$message = 'Could not open connection to kahlrconsulting server for SERIAL: '.$SERIAL;
		}
		if ( !$critical ){
			$pre_img = imagecreatefromjpeg( DRUPAL_ROOT.$img_url);
			$new_img = imagecreatetruecolor(466,613);
			$result = imagecopy($new_img, $pre_img, 0,0, 14,140,466,613 );
			$success = imagejpeg( $new_img , DRUPAL_ROOT. '/sites/default/files/avscience-profiles/layers/layers-serial-'.$SERIAL. '.jpg');
			if ( $success ) $message = 'All images created successfully for '.$SERIAL;
		}
		
	}
	return array( 'continue' => !($critical) , 'message' => $message );
}

function snowpilot_node_delete($node){
	if ($node->type  == 'snowpit_profile'){
		
		include_once(DRUPAL_ROOT.'/sites/default/db_settings.php' );
		Database::addConnectionInfo('avscience_db', 'default', $test_db );// $avsci_db_info	
		
		if ( $serial = snowpilot_avscience_pit_exists($node) ){
			db_set_active('avscience_db');
			
		  $query = "DELETE from PIT_TABLE WHERE SERIAL = $serial ";
			$query_layers = "DELETE from layers WHERE pid = $serial ";
			$query_tests = "DELETE from shear_tests WHERE pid = $serial ";
			
			$message = '';
		  $results = db_query($query);
		  $results_layers = db_query($query_layers);
		  $results_tests = db_query($query_tests);
			db_set_active('default');
			
			// Delete the image file: jpg, png, xml; and also the layers image
			
		  if (unlink ( DRUPAL_ROOT.'/sites/default/files/avscience-profiles/graph-serial-'. $serial .'.jpg' )) $message .= '<li>Avscience Serial JPG deleted</li>';
			if (unlink ( DRUPAL_ROOT.'/sites/default/files/avscience-profiles/layers/layers-serial-'. $serial .'.jpg' )) $message .= '<li>Avscience Layers JPG deleted</li>';
			// 
			if (unlink (DRUPAL_ROOT.'/sites/default/files/snowpit-profiles/'. substr($node->nid, 0, -3 ).'/graph/graph-'. $node->nid .'.jpg')) $message .= '<li>JPG deleted</li>';
			if (unlink (DRUPAL_ROOT.'/sites/default/files/snowpit-profiles/'. substr($node->nid, 0, -3 ).'/graph/graph-'. $node->nid .'.png')) $message .= ' <li>PNG deleted</li>';
			if (unlink (DRUPAL_ROOT.'/sites/default/files/snowpit-profiles/'. substr($node->nid, 0, -3 ).'/layers/layers-'. $node->nid .'.png')) $message .= '<li>Layers Deleted</li>';
			
			if (unlink (DRUPAL_ROOT.'/sites/default/files/xml/node-'. $node->nid .'.xml')) $message .= '<li>XML deleted</li>';
			
			$message .= '<p>The snowpit ID:' .$node->nid  .' , Serial: '. $serial .' has been deleted from the avscience database.';
			
			drupal_set_message( $message  );
			watchdog( 'snowpilot' , $message  );
	  }
	}
	return;
}


function snowpilot_avscience_pit_exists($node){
	include_once(DRUPAL_ROOT.'/sites/default/db_settings.php' );

	Database::addConnectionInfo('avscience_db', 'default', $test_db );// $avsci_db_info
  $account = user_load($node->uid);	
	
	db_set_active('avscience_db');
	//
	//   performing query to see if it exists under avscience:LOCAL_SERIAL
	$query = "SELECT * FROM `PIT_TABLE` WHERE node_id = '$node->nid'";
  $results = db_query($query);
	db_set_active('default');
  while ( $record = $results->fetch() )	{
		if ( isset($record->SERIAL) && is_numeric($record->SERIAL)){
			watchdog('snowpilot' , "snowpit serial exist:$account->name $node->created : true". var_export($record, TRUE));
			return $record->SERIAL;
		}
  }
	return false;
}

//
// This function transfers snowpit data from the drupal website to the KC server avscience db.
//

function snowpilot_avscience_pit_write($node){
	// 
	$url = 'http://www.kahrlconsulting.com:8084/avscience/PitServlet?TYPE=XMLPIT_SEND';
	$data = snowpilot_node_write_pitxml($node, 'full');

	$options = array(
	    'http' => array(
	        'header'  => "Content-type: text/plain\r\n",
	        'method'  => 'POST',
	        'content' => $data
	    )
	);
	$context  = stream_context_create($options);
	$result = file_get_contents($url, false, $context);
	if ($result === FALSE) { 
		watchdog( 'snowpilot' , 'failed result: '.$result); 
		watchdog( 'snowpilot' , 'failed data: '.$data);
	}

	watchdog( 'snowpilot' ,$result);
	return true;
}

function snowpilot_user_login(&$edit, $account){
	snowpilot_user_unit_prefs_check($account->uid, FALSE);
	return;
}

function snowpilot_init(){
	drupal_add_css('https://unpkg.com/leaflet@1.4.0/dist/leaflet.css', 'external');
	drupal_add_css('https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css', 'external');
	drupal_add_css('sites/all/modules/snowpilot/css/MarkerCluster.Default.css');
	
	
	drupal_add_js('sites/all/modules/snowpilot/js/snowpilot.js');
	drupal_add_js('https://unpkg.com/leaflet@1.4.0/dist/leaflet.js', 'external');
	$ret_val = drupal_add_js('https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster-src.js', 'external');
	
	return($ret_val);
}
function snowpilot_form_alter(&$form, &$form_state, $form_id){
	// fields that will need to have the suffix changed according to the users prefs. 
	//	
	
	global $user;
	switch($form_id ){
		case 'snowpit_profile_node_form':
		$node = $form_state['node'];
    if ($node->type == 'snowpit_profile'){ // this might be rendundant for the switch/case above.

			
			// these are one-off text changes that don't seem to require their own function
			$form['#submit'][] = 'snowpilot_snowpit_profile_node_form_submit';
			$form['#validate'][] = 'snowpilot_snowpit_profile_node_form_validate';
			$form['actions']['submit']['#value'] = 'Save and Preview';
			$form['actions']['delete']['#value'] = 'Delete Snowpit'; 
			$form['field_density_profile']['und']['add_more']['#value'] = t("Add More Densities");
			$form['field_temp_collection']['und']['add_more']['#value'] = t("Add More Temperatures");
			$form['title']['#maxlength'] = 22;
			$form['title']['#description'] = t('Name must be 22 characters or less.');
			$form['options']['sticky']['#title'] = 'LOCK Snowpit Profile to prevent editing';
			$form['field_precipitation']['und']['#options']['_none'] = '' ;
			// copy actions to new item
			$form['actions2'] = $form['actions'];
      $form['actions2']['submit']['#value'] = "Save Snowpit and Preview";
			$form['actions2']['#weight'] = -100;			

			if( !isset($node->nid) || isset($node->is_new) ){ // a new snowpit profile node, find $unit_prefs from $user
				if ( snowpilot_user_unit_prefs_check($user->uid)){ // this check function verifies that we have a full set of unit preferences, etc, setup for this user. It redirects to the user /edit page if one or more are lacking
					// set the unit prefs on the snowpit node form.
					$account = user_load($user->uid);
					$snowpit_unit_prefs = snowpilot_unit_prefs_get($account);  
			
					snowpilot_snopit_prof_unit_prefs_set($form, $snowpit_unit_prefs);	
					// Put a fake "delete" link above the rest of the items
						$form['actions2']['pre_delete'] 	= array( 
								'#type' => 'container',
								'#weight' => '5',
								'und' =>array(
									0 => array(
										'markup' => array( '#markup' => '<div class = "delete_pit_wrapper"><a href = "/node/add/snowpit-profile" class = "" >Delete Snowpit</a> </div>',
									  ),
									),
								),
		
							);
							$form['field_date_time']['und'][0]['#default_value']['value'] = date('Y-m-d 00:00:00');
				}
				
			}else{ // not a new node, but an edited one, so load the unit prefs from the existing $node. The array_merge ensures that values not set on the node ( e.g. first name or professional afilliation), ARE still available in the $unit_prefs. preference  values in the node will overwrite those in the user
				$account = user_load($node->uid);
				$snowpit_unit_prefs = snowpilot_unit_prefs_get($account);  
				$snowpit_unit_prefs = array_merge( $snowpit_unit_prefs, snowpilot_unit_prefs_get($node, 'node'));  
	
			}
			// Done wiwth new / or / existing pit logic, now we do things to all pits
			$form['#after_build'][] = 'snowpilot_snowpit_profile_after_build';
				
			$form['field_layer']['und'][0]['field_grain_type_display'] = array( 
		  	'#type' => 'container',
		  	'#weight' => '12',
		  	'und' => array ( 
		  	'markup' => array (
		      '#markup' =>  snowpilot_modal_data() ),
			  ),	
		  );
			/*	
//		This attachs the leaflet for elevation lookup
      $form['#attached']['js'][] = array( 
				  'data' =>'https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js', 
				  'type' => 'external' );
			*/
			$form['#attached']['js'][] = array(
					'type' => 'file', 
					'data' => drupal_get_path('module','snowpilot') . '/js/snowpilot_mapping_edit.js',
					'scope' => 'footer',
			);
			
			if ( isset($node->nid) && isset($form['field_latitude']['und'][0]['value']['#default_value']) && isset( $form['field_longitude']['und'][0]['value']['#default_value'])){
				$latitude = $form['field_latitude']['und'][0]['value']['#default_value'];
				$longitude = $form['field_longitude']['und'][0]['value']['#default_value'];
				$zoom = 12;
				$existing = "true";
			}else{
			  if ( isset ( $snowpit_unit_prefs['loaction_1'])){
			     $default_location = taxonomy_term_load($snowpit_unit_prefs['loaction_1']);
			  }elseif ( isset ( $snowpit_unit_prefs['loaction_0'])){
			     $default_location = taxonomy_term_load($snowpit_unit_prefs['loaction_0']);
			  }else{
			     $default_location = taxonomy_term_load(1);
			  // Montana is the default - default location if NONE other is given.
			  } 
				if ( isset ( $default_location->field_lat_center['und'][0]['value']) && isset ( $default_location->field_lng_center['und'][0]['value']) && isset( $default_location->field_zoom_level['und'][0]['value'])){
				  $latitude = $default_location->field_lat_center['und'][0]['value'];
				  $longitude = $default_location->field_lng_center['und'][0]['value'];
				  $zoom = $default_location->field_zoom_level['und'][0]['value']+1;
				}
				$existing = "false";
	    }
			if (  $snowpit_unit_prefs['field_elevation_units'] == 'ft') {
				$attribution = '<a href="https://www.doi.gov">U.S. Department of the Interior</a> | <a href="https://www.usgs.gov">U.S. Geological Survey</a> | <a href="https://www.usgs.gov/laws/policies_notices.html">Policies</a>';
				$base_map = 'https://basemap.nationalmap.gov/ArcGIS/rest/services/USGSTopo/MapServer/tile/{z}/{y}/{x}';
			}else{
				$attribution = 'Map data: &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)';
				$base_map = 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png';
			}
		  drupal_add_js(array('snowpilot' => array("marker" => 
						array( "latitude" => "$latitude", 
			             "longitude" => "$longitude", 
									 "zoom" => "$zoom", 
									 "basemap" => $base_map,
									 "attribution" => "$attribution", 
									 "existing" => "$existing"))
								 ), 'setting');
			
			// */
			
			
			
			///////////////////////////////////////
			$form['field_layer']['#prefix'] = '<div>';
			$form['field_layer']['#suffix'] = '</div>';
			$form['field_loaction']['und']['#config']['level_labels']['labels'] = array( 0 => 'Region' , '1' => '<none>' );
			$form['field_display_full_profile']['#suffix'] = theme('advanced_help_topic', array(
			  'module' => 'snowpilot',
			  'topic' => 'display-full-pit',
			));
						
			snowpilot_snopit_prof_set_suffices($form, $snowpit_unit_prefs);
			
			
			snowpilot_snowpit_set_layer_titles($form, $snowpit_unit_prefs,$form_state);
			
			//dsm($form_state);
			snowpilot_snowpit_set_temp_coll_titles($form, $snowpit_unit_prefs);
			
			snowpilot_snowpit_set_density_titles($form, $snowpit_unit_prefs);

			snowpilot_snowpit_set_stability_test_titles($form, $snowpit_unit_prefs);
						
			snowpilot_snowpit_set_frac_cat($form);
			
			snowpilot_set_visibility_field_options($form, $snowpit_unit_prefs);
			
			snowpilot_snowpit_set_tester_fields($form, $account);
			

			//
			//
			
		} // end case node->type == snowpit profile
		break;
		case 'user_login':
		case 'user_login_block':
			$form['name']['#description'] = ''; //t('Snowpilot username, or email address');
			$form['pass']['#description'] ='';
//			drupal_set_message(var_export( $form, TRUE));
			$form['links'] = array (
			  '#weight' => 20,
			  '#markup' => '<a href="/user/password" title="Request new password via e-mail.">Forgot Password?</a>', 
			);
			$form['actions']['#weight'] = 10;
		break;
		case 'views_exposed_form':
		// for the snowpits query page(s) : list, map and table format, this makes the "current user" field more relevant to the context
			if( in_array($form['#id'] , array('views-exposed-form-snowpit-list-page', 'views-exposed-form-snowpit-list-page-2', 'views-exposed-form-snowpit-list-page-3'))){
				//$form['field_loaction_tid']['#size'] = '3';
				$form['uid_current']['#options'] = array( 'All' => 'All Snowpits', 1 => 'Just my snowpits');
				if ( $user->uid == 0 ){
					$form['uid_current']['#access'] = FALSE;		
				}
				$form['#after_build'][] = 'snowpit_list_view_after_build';
			}	
			if ( $form['#id'] == 'views-exposed-form-snowpit-list-page-3' ){
		 	 $form['#attached']['js'][] = array(
		 	    'type' => 'file',
		 	    'data' => drupal_get_path('module','snowpilot') . '/js/snowpits_map.js',
					'scope' => 'footer',
		 	  );
			}
			if ( isset($form['field_practice_pit_value']) ){
				$form['field_practice_pit_value']['#options'] = array(  0 => 'Exclude Practice Pits' , 1 => 'Just Practice Pits' ,'All' => 'Include Practice Pits');
			
			}
			
		break;
		case 'user_profile_form':
			// this works, but needs to be expanded to include all/any fields that are not filled in, but should be.
			//$form['field_fracture_category']['#attributes']['class'][] = 'error';
			//
			// Clean up the timezone list in a subsequent function, after_build
			unset($form['field_snowpit_visibility']['und']['#options']['_none']);
	
		  if (isset($form['#user']->timezone)) {
	      // edit timezone list
	      $form['#after_build'][] = 'snowpilot_timezone_modify';
	    }
			$form['#after_build'][] = 'snowpilot_password_field';
			$form['#validate'][] = 'snowpilot_user_profile_form_validate';	
			$form['#submit'][] = 'snowpilot_user_profile_form_submit';
			
			$user_account = user_load($user->uid); // this could be the administrator acting on a different account
			$account = user_load($form['#user']->uid);
			$snowpit_unit_prefs = snowpilot_unit_prefs_get($account);  
		  if ( is_array($snowpit_unit_prefs['field_professional_affiliation'] )){   /// 									if the user is a member of multiple orgs

		    foreach ( $form['field_org_ownership']['und']['#options'] as $tid => $option ){
					
			    if ( !in_array($tid, $snowpit_unit_prefs['field_professional_affiliation'] )  ) {	//				then remove the ones from the 'default org' list that they 
						
						unset ( $form['field_org_ownership']['und']['#options'][$tid] );   //											are not a member of 

					}
		    }
		  }elseif ( isset($snowpit_unit_prefs['field_professional_affiliation']) ){  // user has only one group association
		  	unset($form['field_org_ownership']); // This is the default organization, in the user context. 
		  }

			// if this is not an administrator working on the user profile, and the user profile isn't already an 'org admin', then hide the field
			if ( !in_array('administrator' , $user_account->roles) || !in_array( 'org admin' ,$account->roles) ){
				unset($form['field_org_admin_groups']);
			}else{
		    foreach ( $form['field_org_admin_groups']['und']['#options'] as $tid => $option ){
			    if ( !in_array($tid, $snowpit_unit_prefs['field_professional_affiliation'] )  && $tid <> $snowpit_unit_prefs['field_professional_affiliation']  ) unset ( $form['field_org_admin_groups']['und']['#options'][$tid] );
		    }
				
			}
		break;
		// change 'sticky node' to 'snowpit locked, submitted to avscience DB'
		case 'node_admin_content':
		  $form['admin']['options']['operation']['#options']['sticky'] = 'Snowpit Profile is LOCKED for editing (disallow user editing)';
		  $form['admin']['options']['operation']['#options']['unsticky'] = 'UNLOCK Snowpit Profile (allow user edit)';
		break;
		case'node_type_form':
			if($form_state['build_info']['args'][0]->type == 'snowpit_profile'){
			  $form['workflow']['node_options']['#options']['sticky']= 'LOCK Snowpit Profile after the first time user saves.';
			}
		break;
		case 'user_pass':
	  	// unset($form_state['submit']); //????
			
		  $form['#submit'][] = 'snowpilot_user_pass_submit';
		
		break;
		case 'user_register_form':
			$form['account']['notify']['#default_value'] = TRUE;
			// for some reason changing the name of this button breaks the HS dropbox form.
			$form['#validate'][] = 'snowpilot_new_user_register_validate';
			
			$form['#submit'][] = 'snowpilot_new_user_register_submit';
		break;
		case 'taxonomy_form_term':
			
			
			if ( !user_has_role( 3 ) ){ // everybody but administrators
				$form['name']['#disabled'] = TRUE;
				$form['description']['#access'] = FALSE;
				$form['relations']['#access'] = FALSE;
				//dsm($form);
			}
		
		
		break;
			

	} // end switch
	return $form;
}

//
//  Begin customizations for 'add another' more than one!
//
//

/**
 * Implements hook_field_attach_form()
 * We are looking at our t2imageclient widget after the "Add another item" has been added.
 * We are going to alter the behavior of this button, to let us add as many new entries as
 * we want.
 */

function snowpilot_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode)
{
  $options = array('language' => field_valid_language($langcode));

  // Merge default options.
  $default_options = array(
    'default' => FALSE,
    'deleted' => FALSE,
    'language' => NULL,
  );
  $options += $default_options;

  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  $instances = _field_invoke_get_instances($entity_type, $bundle, $options);

  // Iterate through the instances.
  $return = array();
  foreach ($instances as $instance) {
    // field_info_field() is not available for deleted fields, so use
    // field_info_field_by_id().
		if (  $instance['field_id'] == 99 || $instance['field_id'] == 102 || $instance['field_id'] == 147){
	    $field = field_info_field_by_id($instance['field_id']);

	    //If we are looking at our field type and specific widget type, and we are multiple entries
	    if($field['type'] == 'field_collection' && 
	      $instance['widget']['type'] == 'field_collection_embed' && 
	      $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED)
	    {

	      //Check just in case the button is here, and add another #submit function
	      if(isset($form[$field['field_name']]['und']['add_more']))
	      {
	        $form[$field['field_name']]['und']['add_more']['#submit'][] =
	          'snowpilot_field_add_more_submit';
	      }
	    }
		}
  }
}

/**
 * Our extra "Add another item" #submit handler. Copy pasted the field_add_more_submit
 * function, altered to change the nb of widgets based on our conditions.
 */
function snowpilot_field_add_more_submit($form, &$form_state)
{
  //Put here the condition for altering the nb of widgets, e.g. it could be based on a 
  //POST value
	//dsm($form_state['triggering_element']);
  if(true /** TODO */)
  {
    $button = $form_state['triggering_element'];
		//dsm($button);
    // Go one level up in the form, to the widgets container.
    $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -1));
    $field_name = $element['#field_name'];
    $langcode = $element['#language'];
    $parents = $element['#field_parents'];

    // Alter the number of widgets to show. items_count = 0 means 1.
    $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);
    //Here as an example, I am adding 10
    //$field_state['items_count'] += 10;
    //But you can just fix the nb of items, like 5
    $field_state['items_count'] += 4;
    field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);

    $form_state['rebuild'] = TRUE;
  }
}

//
//  endo of 'Add more' than one item at a time
//
//


function snowpilot_user_profile_form_submit($form, &$form_state){
	// get org admins for this group
	global $user;
	$org_admins = array();
	//if ( $user->uid == $form_state['values']['uid']) { // we only call this if the user is changing their own prof affil.
		if ( count($form['field_professional_affiliation']['und']['#value']) > count($form['field_professional_affiliation']['und']['#default_value'])){ // i.e. -they were added to a group
			foreach( $form['field_professional_affiliation']['und']['#value'] as $group_tid ){
				
				if ( !in_array( $group_tid['tid'] , $form['field_professional_affiliation']['und']['#default_value'] )) {
					$tid = $group_tid['tid'];
					//dsm($group_tid);
					//dsm($form['field_professional_affiliation']['und']['#default_value'] );
					$user_wrapper = entity_metadata_wrapper( 'user', user_load($form_state['values']['uid']));
			    $query = new EntityFieldQuery();
			    $query->entityCondition('entity_type', 'user')
			      ->fieldCondition('field_org_admin_groups' ,  'tid' , $tid , '=');
			    $result = $query->execute();
					$group_users = array_keys($result['user']);
					$group = user_load_multiple($group_users);
					foreach($group as $individual){
						if ( isset($individual->roles[6]) && in_array( $group_tid, $individual->field_org_admin_groups['und'] ) ){
							$org_admins[] = $individual;
							$org_admin_user = entity_metadata_wrapper( 'user', $individual);
					    drupal_mail('snowpilot', 
							  'org-admin-notify', // 
								$individual->mail ,
								 user_preferred_language($individual),
								  array ( 'org_admin_user' => $org_admin_user  , 'user_wrapper' => $user_wrapper), 'admin@snowpilot.org' , TRUE  );
						}
					}
					
					
				}
				
				
			}
	    
			
			if ( !count ( $org_admins) && !in_array( $tid , array ('none', 108, 57, 59, 60, 62, 58, 61, 172) )){
		    drupal_set_message('<h3>You have joined the group '. $user_wrapper->field_professional_affiliation->label().'</h3>
					<p>If you would like to manage other users and snowpits within your group, please contact us at admin@snowpilot.org', 'warning');
			}
	  }
		//}
	
}

function snowpilot_new_user_register_validate(&$form, &$form_state){
		
	if (( $form['field_phone']['und'][0]['value']['#value'] == '%phone_short%' )
		|| ( $form['field_first_name']['und'][0]['value']['#value'] == $form['field_last_name']['und'][0]['value']['#value'])
	){
	  form_set_error('account_password', "Invalid login");
		watchdog('snowpilot', 'User creation blocked due to phone_short or double name syntax');
		drupal_goto('node/5');
  }
}

function snowpilot_user_profile_form_validate(&$form, &$form_state){
	$group_tids = array();
	
	foreach ( $form_state['values']['field_professional_affiliation']['und'] as $n => $group ){
		if ($form_state['values']['field_professional_affiliation']['und'][$n]['tid'] == '226' ){
			form_set_error('field_professional_affiliation', 'Please choose a Ski Patrol, or create a new one.');
		}elseif ($form_state['values']['field_professional_affiliation']['und'][$n]['tid'] == '243' ){
			form_set_error('field_professional_affiliation', 'Please choose an Avalanche Center, or create a new one.');
		}elseif ($form_state['values']['field_professional_affiliation']['und'][$n]['tid'] == '245' ){
			form_set_error('field_professional_affiliation', 'Please choose an Education group, or create a new one.');
		}elseif ($form_state['values']['field_professional_affiliation']['und'][$n]['tid'] == '244' ){
			form_set_error('field_professional_affiliation', 'Please choose a Ski or Snowmobile Guide Service, or create a new one.');
		}elseif ($form_state['values']['field_professional_affiliation']['und'][$n]['tid'] == '246' ){
			form_set_error('field_professional_affiliation', 'Please choose a Department of Transportation, or create a new one.');
		}
		$group_tids[] = $form_state['values']['field_professional_affiliation']['und'][$n]['tid'];
	}
	
	if ( isset ( $form_state['values']['field_org_ownership']['und'][0]['tid'] ) && (!in_array($form_state['values']['field_org_ownership']['und'][0]['tid'] , $group_tids) ) ){
		form_set_error('field_org_ownership', 'You must add yourself as a member of a group in order set that group as your default. 
		<br />Either add yourself to the group which is now your default, or change your default to a group that you are still a member of.');
	}
	if ( isset( $form['field_org_admin_groups'] ) ) {
		
		foreach ( $form['field_org_admin_groups']['und']['#value'] as  $admin_group ){
			if ( !in_array($admin_group , $group_tids) ){
				form_set_error( 'field_org_admin_groups', 'Must set this user as a member of this group. ');
			}
		}
		
	}
}

function snowpilot_new_user_register_submit(){
	global $user;
	// auto set the 'forecaster' role. It gets removed if need be later.
	$user_wrapper = entity_metadata_wrapper( 'user' , $user);
	$user_wrapper->roles->set(array('2', '4'));
	$user_wrapper->save();
	
	drupal_set_message( 'Have questions or confused? Check out the <a href="/documentation">Getting Started Page</a>.', 'warning');
	drupal_goto('user/'. $user->uid .'/edit', array( 'query' => array( 'destination' => 'node/5')));
	
}

function snowpilot_snowpit_profile_after_build($form, &$form_state){
  drupal_add_library('system', 'ui.accordion');
	//
	// add the js to make lat and long negative if they should be.
	$snowpit_unit_prefs = snowpilot_unit_prefs_get($form_state['node'],'node');  
	
  if ( $form['field_latitude_type']['und']['#default_value'][0] == 'S' )	{
	 $form['#attached']['js'][] = array(
	    'type' => 'file',
	    'data' => drupal_get_path('module','snowpilot') . '/js/negative_latitude.js',
	  );
	}
  if ( $form['field_longitude_type']['und']['#default_value'][0] == 'W' ){
	 $form['#attached']['js'][] = array(
	    'type' => 'file',
	    'data' => drupal_get_path('module','snowpilot') . '/js/negative_longitude.js',
	  );
	}

		$form['#attached']['js'][] = array(
			'type' => 'file',
			'data' => drupal_get_path('module', 'snowpilot'). '/js/accordion-existing-pit.js',
		);
		
		$form['#attached']['js'][] = array(
			'type' => 'file',
			'data' => drupal_get_path('module', 'snowpilot'). '/js/grain-types-dropdown.js',
		);
		$form['#attached']['css'][] = array(
			'type' => 'file',
			'data' => drupal_get_path('module', 'snowpilot'). '/css/grain-types-dropdown.css',
		);
		$form['#attached']['js'][] = array(
			'type' => 'file',
			'data' => drupal_get_path('module', 'snowpilot'). '/js/jquery.modal.js',
		);
		
		$form['#attached']['css'][] = array(
			'type' => 'file',
			'data' => drupal_get_path('module', 'snowpilot'). '/css/jquery.modal.css',
		);
		// include the geo utilities
		$form['#attached']['js'][] = array(
			'type' => 'file',
			'data' => drupal_get_path('module', 'snowpilot'). '/js/geo_utils/vector3d.js',
		);
		$form['#attached']['js'][] = array(
			'type' => 'file',
			'data' => drupal_get_path('module', 'snowpilot'). '/js/geo_utils/latlon-ellipsoidal.js',
		);
		$form['#attached']['js'][] = array(
			'type' => 'file',
			'data' => drupal_get_path('module', 'snowpilot'). '/js/geo_utils/utm.js',
		);
		$form['#attached']['js'][] = array(
			'type' => 'file',
			'data' => drupal_get_path('module', 'snowpilot'). '/js/geo_utils/dms.js',
		);
		$form['#attached']['js'][] = array(
			'type' => 'file',
			'data' => drupal_get_path('module', 'snowpilot'). '/js/geo_utils/mgrs.js',
		);		
		$form['#attached']['js'][] = array(
			'type' => 'file',
			'data' => drupal_get_path('module', 'snowpilot'). '/js/geographic-scripts.js',
		);		
		
		$layer_num = count ($form_state['values']['field_layer']['und']) - 2;
		
		foreach ( $form_state['values']['field_layer']['und'] as $key => $layer ){
			$primary_gt = '' ; $secondary_gt = '';
			if ( isset( $form['field_layer']['und'][$key]['field_grain_type']['und']['#default_value'][0]) ) {
				$primary_gt = _tid2snowsymbols($form['field_layer']['und'][$key]['field_grain_type']['und']['#default_value'][0]);
			}
			if ( isset( $form['field_layer']['und'][$key]['field_grain_type_secondary']['und']['#default_value'][0])) {
				$secondary_gt = _tid2snowsymbols($form['field_layer']['und'][$key]['field_grain_type_secondary']['und']['#default_value'][0]);
			}	
			if ( isset( $form['field_surface_grain_type']['und']['#default_value'][0])) {
				$surface_gt = _tid2snowsymbols($form['field_surface_grain_type']['und']['#default_value'][0]);
			}		else { $surface_gt = ''; }	

			if (  $key == '0' ){
				$form['field_surface_grain_type']['#prefix'] = '<div class = "surface_snow_elements" ><a href = "#grain-types-surface-modal" class = "modal-open button-like" rel = "modal:open" id="modal-trigger" >Surface grain type <span class ="grain-type-surface-display grain-types field-suffix" >'. $surface_gt  .'</span> </a> ';
			  $form['field_surface_grain_size']['#suffix'] = '</div>';
			}
			if ( is_numeric( $key ) && ( $layer_num <> $key )){ // this is a layer other than the current one ... give existing 

			 		$form['field_layer']['und'][$key]['field_grain_type_select_link'] = array( 
				  	'#type' => 'container',
				  	'#weight' => '5',
				  	'und' => array ( 
				  	  'markup' => array (
				       '#markup' => '<a href = "#grain-types-modal" class = "modal-open " rel = "modal:open" id="modal-trigger" >
							 Primary grain type <span class ="grain-type-primary-display grain-types field-suffix" >'. $primary_gt  .'</span> </a> ',
					   ),
					 ),	
					'#attributes' => array( 'class' => array('grain-type-primary-display-wrapper') ),
				);
				$form['field_layer']['und'][$key]['field_use_multiple_grain_type']['und']['#title'] = '';
		 		$form['field_layer']['und'][$key]['field_use_multiple_grain_type']['und']['#field_suffix'] = 
					'<a href = "#grain-types-secondary-modal" class = "modal-open " rel = "modal:open" id="modal-trigger" >
								 Secondary grain type <span class ="grain-type-secondary-display grain-types" >'. $secondary_gt  .'</span> </a> ';

			}elseif ( is_numeric( $key ) && ( $layer_num == $key ) ){ // this IS the current layer, let's use button-like css and suffix
				
		 		$form['field_layer']['und'][$layer_num]['field_grain_type_select_link'] = array( 
			  	'#type' => 'container',
			  	'#weight' => '5',
			  	'und' => array ( 
			  	  'markup' => array (
			        '#markup' => '<a href = "#grain-types-modal" class = "modal-open button-like" rel = "modal:open" id="modal-trigger" ><b>Click</b> for Grain Type
							<span class ="grain-type-primary-display grain-types field-suffix" >'. $primary_gt  .'</span></a> ',
						),
				  ),	
					'#attributes' => array( 'class' => array('grain-type-primary-display-wrapper') ),
			  );
				$form['field_layer']['und'][$key]['field_use_multiple_grain_type']['und']['#title'] = '';
		 		$form['field_layer']['und'][$key]['field_use_multiple_grain_type']['und']['#field_suffix'] = 
					'<a href = "#grain-types-secondary-modal" class = "modal-open button-like" rel = "modal:open" id="modal-trigger" >
								 Secondary grain type <span class ="grain-type-secondary-display grain-types" >'. $secondary_gt  .'</span> </a> ';
			}

		}
		
	return $form;
}

function snowpilot_user_snowpits_count($uid = FALSE ){
	$query = new EntityFieldQuery();
	
	$query->entityCondition('entity_type', 'node')
	  ->entityCondition('bundle', 'snowpit_profile')
	  ->propertyCondition('uid', $uid);
	$result = $query->count()->execute();
	
	return $result;
	
}
//
//

/**
 * Generate structured (optgrouped) options from taxonomy.
 * Use output as Form API #options array.
 * @param string $taxonomy_name
 * @return array
 */
function get_optgroup_by_taxonomy($taxonomy_name) {
  $options = array();
  $vocabulary = taxonomy_vocabulary_machine_name_load($taxonomy_name);
  $vid = $vocabulary->vid;
  $top_level = taxonomy_get_tree($vid, $parent = 0, $max_depth = NULL);
  foreach ($top_level as $id => $term) {
    $tid = $term->tid;
    $children = taxonomy_get_children($tid);
    $parents = taxonomy_get_parents($tid);
    if (!empty($children)) {
      //PARENT
      $options[$term->name] = array();
      foreach ($children as $child) {
        $options[$term->name][$child->tid] = $child->name;
      }
    }
    elseif (empty($parents)) {
      //PARENT WITH NO CHILDREN - LONELY PARENT
      $options[$term->name] = array();
    }
  }
  return $options;
}

function snowpit_list_view_after_build($form, &$form_state){
	if ( $form['field_org_ownership_tid']['#value'] == '' ) $form['field_org_ownership_tid']['#value'] = '_none';
	if ( $form['field_loaction_tid']['#value'] == '' ) $form['field_loaction_tid']['#value'] = '_none';
	return $form;
}


function snowpilot_user_pass_submit($form, &$form_state){
	  global $language;
	  drupal_set_message( t("<b>Please check your SPAM folder!</b> If you add <a href = 'mailto:admin@snowpilot.org'>admin@snowpilot.org</a> to your contacts or whitelist, your spam filter is less likely to flag these emails from Snowpilot. <br />" ) );
	  return;
}

/**
 * A modal login callback.
 */
function snowpilot_login($js = NULL) {
  // Fall back if $js is not set.
	global $user;
  if (!$js) {
    return drupal_get_form('user_login');
  }
  ctools_include('modal');
  ctools_include('ajax');
  $form_state = array(
    'title' => t('Login'),
    'ajax' => TRUE,
  );
  $output = ctools_modal_form_wrapper('user_login', $form_state);
  if (!empty($form_state['executed'])) {
    // We'll just overwrite the form output if it was successful.
		//
		// these three functions ( .../login , .../login success , .../snowpilot_ $item - are from AJAX Sample)
    //
		//
    $output = array();
    $inplace = ctools_ajax_text_button(t('remain here'), 'snowpilot/nojs/login/inplace', t('Go to your account'));
    $output[] = ctools_modal_command_display(t('Login Success'), '<div class="modal-message">Login successful. You will be redirected in a moment.</div>');
		
		// Redirect to the user-prefs edit page if they are lacking one of the required ones.
		if (!snowpilot_user_unit_prefs_check($user->uid,FALSE)){
			$output[] = ctools_ajax_command_redirect('user/'.$user->uid.'/edit#edit-field-first-name');	
	  //	
		}else{
			$output[] = ctools_ajax_command_redirect('snowpits');	
		}
	}
	print ajax_render($output);

  exit;
}

/**
 * Post-login processor: should we go to the user account or stay in place?
 */
function snowpilot_login_success($js, $action) {
  if (!$js) {
    // we should never be here out of ajax context
    return MENU_NOT_FOUND;
  }

  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  $commands = array();
  if ($action == 'inplace') {
    // stay here
    $commands[] = ctools_ajax_command_reload();
  }
  else {
    // bounce bounce
    $commands[] = ctools_ajax_command_redirect('user');
  }
  print ajax_render($commands);
  exit;
}

//
//  Sets timezone list reasonably
//
function snowpilot_timezone_modify($form, &$form_state){
  $zonelist = timezone_identifiers_list();
  $zones = array();
	//dsm($zonelist);
  
  foreach ($zonelist as $zone) {
    // Only use certain cities
    if ($zone == 'America/New_York' 
		  || $zone == 'America/Chicago' 
		  || $zone == 'America/Denver' 
		  || $zone == 'America/Los_Angeles' 
		  || $zone == 'America/Anchorage' 
			|| $zone == 'America/Argentina/Mendoza'
			|| $zone == 'Europe/London'
			|| $zone == 'Europe/Paris'
			|| $zone == 'Europe/Zurich'
			|| $zone == 'Europe/Stockholm'
			|| $zone == 'Europe/Helsinki'
			|| $zone == 'Europe/Berlin'
			|| $zone == 'Asia/Kabul'
			|| $zone == 'Asia/Karachi'
			|| $zone == 'Asia/Kolkata'
			|| $zone == 'Asia/Kathmandu'
			|| $zone == 'Asia/Tokyo'
			|| $zone == 'Asia/Dushanbe'
			|| $zone == 'Pacific/Auckland'
			|| $zone == 'Australia/Sydney'
				
		){
      // Get timezone abbreviation
        $dateTime = new DateTime(); 
        $dateTime->setTimeZone(new DateTimeZone($zone)); 
        $zonename = $dateTime->format('T'); 
        $zones[$zone] = t('@name - @zone: @date', array('@name' => $zonename, '@zone' => t(str_replace('_', ' ', $zone)), '@date' => format_date(REQUEST_TIME, 'custom', variable_get('date_format_short_no', 'H:i') . ' O', $zone)));
    }
  }

  $form['timezone']['timezone']['#options'] = $zones;
  return $form;
	
}

function snowpilot_user_register_after_build( $form, &$form_state){
	$form['field_professional_affiliation']['und']['hierarchical_select']['dropbox_add']['#value'] = 'Add Affiliation';
	return $form;
}

function snowpilot_password_field( $form, &$form_state){
	//$form['account']['current_pass_required_values']['#value']['#pass'] = t('New Password');
	//dsm($form['account']['pass']['pass1']['#title']);
	$form['account']['pass']['pass1']['#title'] = t('Change Password');
	$form['account']['pass']['pass2']['#title'] = t('Confirm New Password');
	// Density Units are set at kg/m-3, not available for user edit

	$form['field_density_units']['und']['#value'] = 'kg_cubic_m';

	//$form['field_professional_affiliation']['und']['hierarchical_select']['dropbox_add']['#value'] = 'Add Affiliation';_dark_40
  return $form;
}

function snowpilot_snowpit_set_frac_cat(&$form){
	foreach( $form['field_test']['und'] as $delta => $test_result){
					if (is_numeric($delta)){
						// this hides or shows the shear_quality / fracture_character fields based on user prefs. 
						// Most fields, we do this through the gui admin/structure/dependencies
						// shear quality is a show or hide within the 'stability test' field collection, based on frac_category at the node level
						if ($form['field_fracture_category']['und']['#default_value'][0] == 'shear_quality' )  {
							$form['field_test']['und'][$delta]['field_fracture_character']['#access'] = FALSE;
						}else{
							$form['field_test']['und'][$delta]['field_shear_quality']['#access'] = FALSE;
							
						}
						$form['field_test']['und'][$delta]['field_stability_test_score']['#access'] = FALSE;
						// this hides the Score field, which is set by _entity_presave 
						//dsm($form['field_test']['und'][0]);
					}
				
				}
	return $form;
}

function snowpilot_set_visibility_field_options(&$form, $snowpit_unit_prefs){
	unset($form['field_snowpit_visibility']['und']['#options']['_none']);
 
  if ( !user_access('administer nodes')  ){
		if ( ( !is_array($snowpit_unit_prefs['field_professional_affiliation']) || count ($snowpit_unit_prefs['field_professional_affiliation'] ) < 2 ) ){
	  	$form['field_org_ownership']['#access'] = FALSE ; 
			if (!isset($snowpit_unit_prefs['field_professional_affiliation']) || $snowpit_unit_prefs['field_professional_affiliation'] == '57'){
				unset ($form['field_snowpit_visibility']['und']['#options']['group']);
			}else{		
				$group_name = taxonomy_term_load($form['field_org_ownership']['und']['#default_value'][0])->name;
			  $form['field_snowpit_visibility']['und']['#options']['group'] = 'Visible only by my group: '.$group_name;
				//dsm($form['field_snowpit_visibility']['und']['#options']);
			}
    }else{ // we have an array of more than one organizations
		  foreach ( $form['field_org_ownership']['und']['#options'] as $tid => $option ){
				// hide invalid
			  if ( !in_array($tid, $snowpit_unit_prefs['field_professional_affiliation'] )   ) {
					unset ( $form['field_org_ownership']['und']['#options'][$tid] );
				}
			}
			// if the default value is not already in there, add it back in
			// this could happen, say ,if someone created a pit under one org, then removed themselves from the org. the old snowpit still needs to stay associated with the old org
			if ( isset($form['field_org_ownership']['und']['#default_value'][0]) && 
			  !in_array ( $form['field_org_ownership']['und']['#default_value'][0]  , array_keys($form['field_org_ownership']['und']['#options']) )){ 
				$form['field_org_ownership']['und']['#options'][$form['field_org_ownership']['und']['#default_value'][0]] = taxonomy_term_load($form['field_org_ownership']['und']['#default_value'][0])->name ;
			}	
	  }
	}	
}

function snowpilot_snowpit_set_tester_fields(&$form, $account = NULL){
	
	if ( !(user_has_role( 8, $account ))){ /// role 8 is False Stability Test 2017
    $form['field_a_priori_eval']['#access'] = FALSE ;
		unset($form['field_stability_on_similar_slope']['und']['#options']['fair_unstable']);
		unset($form['field_stability_on_similar_slope']['und']['#options']['fair_stable']);
	}else{
		unset($form['field_stability_on_similar_slope']['und']['#options']['fair']);
		$form['field_stability_on_similar_slope']['und']['#title'] = 'AFTER doing stability tests';
		
	}	
	if ( !user_has_role( '11', $account )){
		unset($form['field_blade_hardness']);
	}
	
	//dsm($form['field_stability_on_similar_slope']);
	
}

function snowpilot_entity_presave($entity, $type){

	if ($type == 'field_collection_item' && $entity->field_name == 'field_test'){
		//if $entity->
		
		// this sets a specific field ( Stability test score ) when the field collection item is saved
		$entity->field_stability_test_score['und'][0]['value'] = _set_test_result_single($entity);
		if ( in_array( $entity->field_stability_test_score['und'][0]['value'] , array( 'CTN' , 'ECTX', 'RB7', 'SBN', 'STN' ) )){
			//$entity->field_depth['und'][0]['value'] = NULL;
			unset($entity->field_shear_quality['und'][0]['value']);
			unset ( $entity->field_depth['und'][0]['value'] );
		  unset($entity->field_ec_score['und'][0]['value']);
			unset($entity->field_ct_score['und'][0]['value']);
			
		}
		// We only reset this depth value if it is not null. For Null depth test results ( e.g. ECTX or CTN ), it needs to be null
		if ( isset($entity->field_depth['und'][0]['value']) ) $entity->field_depth['und'][0]['value'] = str_replace( ',' , '.' , $entity->field_depth['und'][0]['value']) ;
	}elseif ( $type == 'field_collection_item' && $entity->field_name =='field_layer' ){
		//dsm($entity);
		// we can insert other actions in here as necessary, for layers other other field collection items
		$entity->field_height['und'][0]['value'] = str_replace( ',' , '.' , $entity->field_height['und'][0]['value']);
		$entity->field_bottom_depth['und'][0]['value'] = str_replace( ',' , '.' , $entity->field_bottom_depth['und'][0]['value']);
		
	}
	
	if ($type == 'field_collection_item' &&  $entity->field_name == 'field_temp_collection'){
		// We save this as a decimal in the db
			$entity->field_temp_temp['und'][0]['value'] = str_replace(',','.', $entity->field_temp_temp['und'][0]['value'] );
			$entity->field_depth['und'][0]['value'] = str_replace(',','.', $entity->field_depth['und'][0]['value'] );
	}
	
	if ($type == 'field_collection_item' &&  $entity->field_name == 'field_density_profile'){
		$entity->field_density_top['und'][0]['value'] = str_replace(',','.', $entity->field_density_top['und'][0]['value'] );
		$entity->field_depth['und'][0]['value'] = str_replace(',','.', $entity->field_depth['und'][0]['value'] );
	}
	// core info fields updates
	//Aspect - Cardinal -> degrees Azimuth convert and write value
	//dsm ( $entity->field_direction_format['und'][0]['value'] );
	if ( $type == 'node' && isset($entity->field_direction_format['und']) && $entity->field_direction_format['und'][0]['value'] == 'cardinal' ){
		$entity->field_aspect['und'][0]['value'] = $entity->field_aspect_cardinal['und'][0]['value'];
		//dsm($entity->field_aspect_cardinal);
	}
	
	if ($type == 'node' && $entity->type == 'snowpit_profile' && isset( $entity->field_air_temp['und'][0]['value']) ){ 
		$entity->field_air_temp['und'][0]['value'] = str_replace( ',', '.' ,$entity->field_air_temp['und'][0]['value'] );
	 }
	return $entity;
}

function snowpilot_snowpit_profile_node_form_validate($form,&$form_state){
	// Add serverside validation for stability tests
	foreach( $form_state['values']['field_test']['und'] as $key => $test){
		if ( isset( $test['field_depth']['und'][0]['value'])){
		  $test['field_depth']['und'][0]['value'] = str_replace( ',' , '.' , $test['field_depth']['und'][0]['value']);
		} 
	  if (is_numeric($key) && isset($test['field_stability_test_type']['und'][0]['value']) && $test['field_stability_test_type']['und'][0]['value'] <> ''){ // 
	  	switch ($test['field_stability_test_type']['und'][0]['value']){
				case 'ECT':
				//  Stability test type == ECT , so we check for depth and score fields.
			    if ( $test['field_stability_test_score_ect']['und'][0]['value'] == ''  ) {
			  		form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_stability_test_score_ect", "Please enter an ECT Score result.");
			  	}elseif ( $test['field_stability_test_score_ect']['und'][0]['value'] <> 'ECTX' && $test['field_depth']['und'][0]['value'] == '') {
			  	  form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_depth", "Please enter a depth value for test result.");
			  	}
				break;
				case 'CT':
		      if ( !isset( $test['field_stability_test_score_ct']['und'][0]['value']  ) || ($test['field_stability_test_score_ct']['und'][0]['value'] == '' ) ){
					   	form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_stability_test_score_ct", "Please enter a CT test score result.");
					}elseif( (!isset($test['field_depth']['und'][0]['value']) || $test['field_depth']['und'][0]['value'] == '') &&  $test['field_stability_test_score_ct']['und'][0]['value'] <> 'CTN' ){ 
						form_set_error("field_test][".LANGUAGE_NONE ."][". $key ."][field_depth" , "Please enter a value for depth.");
					}elseif ( ($test['field_stability_test_score_ct']['und'][0]['value'] == 'CT') && !is_numeric( $test['field_ct_score']['und'][0]['value'] )){
						form_set_error("field_test][".LANGUAGE_NONE ."][". $key ."][field_ct_score" , "Please enter an integer value for '# of taps'.");
				    
	
		      } // end "if" we have full CT test results
          break;
					case 'DT':
			      if ( !isset( $test['field_deep_tap_test_score']['und'][0]['value']  ) || ($test['field_deep_tap_test_score']['und'][0]['value'] == '' ) ){
						   	form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_deep_tap_test_score", "Please enter a Deep Tap test score result.");
						}elseif( (!isset($test['field_depth']['und'][0]['value']) || $test['field_depth']['und'][0]['value'] == '') ){ 
							form_set_error("field_test][".LANGUAGE_NONE ."][". $key ."][field_depth" , "Please enter a value for depth.");
						}
					break;
					case 'RB':
				    if ( $test['field_stability_test_score_rb']['und'][0]['value'] == ''  ) {
				  		form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_stability_test_score_rb", "Please enter a Rutschblock test result.");
				  	}elseif ( $test['field_stability_test_score_rb']['und'][0]['value'] <> 'RB7' && $test['field_depth']['und'][0]['value'] == '') {
				  	  form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_depth", "Please enter a depth value for Rutschblock test result.");
				  	}					
					break;
					case 'ST':
			      if ( $test['field_stability_test_score_st']['und'][0]['value'] == ''  ) {
			    		form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_stability_test_score_st", "Please enter a Shovel Shear test result.");
			    	}elseif ( $test['field_stability_test_score_st']['und'][0]['value'] <> 'STN' && $test['field_depth']['und'][0]['value'] == '') {
			  	    form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_depth", "Please enter a depth value for Shovel Shear test result.");
			  	  }										
					break;
					case 'SB':
			      if ( $test['field_stability_test_score_sb']['und'][0]['value'] == ''  ) {
			  	  	form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_stability_test_score_sb", "Please enter a Stuffblock test result.");
			     	}elseif ( $test['field_stability_test_score_sb']['und'][0]['value'] <> 'SBN' && $test['field_depth']['und'][0]['value'] == '') {
			    	  form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_depth", "Please enter a depth value for Stuffblock test result.");
			    	}		
					break;
					case 'PST':
				  	if ( !isset( $test['field_depth']['und'][0]['value'] ) || $test['field_depth']['und'][0]['value'] == ''  ){ 
					    form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_depth", "Please enter a depth value for Propagation Saw test result.");
					  }
					  if ( !isset ($test['field_data_code_pst']['und'][0]['value'])){
						  form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_data_code_pst", "Please enter a Data Code value for PST result.");
					  }
					  if ( !isset ($test['field_length_of_saw_cut']['und'][0]['value']) || $test['field_length_of_saw_cut']['und'][0]['value'] == ''){
						  form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_length_of_saw_cut", "Please enter a Length of Saw Cut for PST result.");
					  }
						if (!isset( $test['field_length_of_isolated_col_pst']['und'][0]['value'] ) || $test['field_length_of_isolated_col_pst']['und'][0]['value'] == '' ){
							form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_length_of_isolated_col_pst", "Please enter a Length of Isolated column for PST result.");
						}
						if ( isset( $test['field_length_of_isolated_col_pst']['und'][0]['value'] ) && isset($test['field_length_of_saw_cut']['und'][0]['value']) && ($test['field_length_of_saw_cut']['und'][0]['value'] > $test['field_length_of_isolated_col_pst']['und'][0]['value']) ){
							form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_length_of_isolated_col_pst", "The Length of Saw Cut value should be less than the Length of Isolated Column");
							
						}
					
					break;
			
		    } // end swith test->type
				//
				//  Check to see if test depth is inside pit depth
				//
				if ( ( ( isset ( $test['field_stability_test_score_ct']['und'][0]['value'] )  && $test['field_stability_test_score_ct']['und'][0]['value'] <> 'CTN' && $test['field_stability_test_type']['und'][0]['value'] == 'CT' )
					|| ( isset ( $test['field_deep_tap_test_score']['und'][0]['value'] )  && $test['field_deep_tap_test_score']['und'][0]['value'] <> 'DTN' && $test['field_deep_tap_test_score']['und'][0]['value'] == 'DT' )
					|| ( isset ( $test['field_stability_test_score_ect']['und'][0]['value'] )  && $test['field_stability_test_score_ect']['und'][0]['value'] <> 'ECTX' && $test['field_stability_test_type']['und'][0]['value'] == 'ECT' )
					||	(isset ( $test['field_stability_test_score_rb']['und'][0]['value'] ) && $test['field_stability_test_score_rb']['und'][0]['value'] <> 'RB7' && $test['field_stability_test_type']['und'][0]['value'] == 'RB' )
					|| ( isset ($test['field_stability_test_score_st']['und'][0]['value'] ) && $test['field_stability_test_score_st']['und'][0]['value'] <> 'STN' && $test['field_stability_test_type']['und'][0]['value'] == 'ST' )
					|| ( isset ($test['field_stability_test_score_sb']['und'][0]['value'] ) && $test['field_stability_test_score_sb']['und'][0]['value'] <> 'SBN' && $test['field_stability_test_type']['und'][0]['value'] == 'SB' )
					|| ( $test['field_stability_test_type']['und'][0]['value'] == 'PST'  )
						
				  ) && ( $test['field_depth']['und'][0]['value'] > _raw_max_pit_depth( $form_state['values']))){	
					form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_depth", "Test Result depth must be less than less than total snow height.");
		  	}
				
				
				// this  section makes sure that Stability test type is set.
	  }elseif ( is_numeric($key) && isset($test['field_depth']['und'][0]['value']) && $test['field_depth']['und'][0]['value'] <> ''){
			form_set_error("field_test][". LANGUAGE_NONE."][" . $key . "][field_stability_test_type", "Please enter a Stability Test Type.");
		} // end key is_numeric and test type is not null
		
	} // end foreach test result
	
	//  validate that each layer has a top and bottom depth, at least; unless it is a 'degenerate' layer, which will get chopped off in the submit function
	//
	//  if it lacks the bottom depth, form_set_error on that field
	
	foreach($form_state['values']['field_layer']['und'] as $key=>$layer){
	  
		if (  isset($layer['field_height']['und'][0]['value'] )){
			$layer['field_height']['und'][0]['value'] = str_replace( ',', '.' , $layer['field_height']['und'][0]['value']);
		}
		if ( isset ($layer['field_bottom_depth']['und'][0]['value'])){
			$layer['field_bottom_depth']['und'][0]['value'] = str_replace( ',', '.' , $layer['field_bottom_depth']['und'][0]['value']);
		}
		if ( is_numeric($key) && isset($layer['field_height']['und'][0]['value']) 
		  && (  (isset( $layer['field_bottom_depth']['und'][0]['value']) && ($layer['field_bottom_depth']['und'][0]['value'] <> ''))  || (isset($layer['field_hardness']['und'][0]['value']) && ($layer['field_hardness']['und'][0]['value'] <> '' )) || (isset($layer['field_grain_type']['und'][0]['value']) && ($layer['field_grain_type']['und'][0]['value'] <> '')) || (isset($layer['field_grain_size']['und'][0]['value']) && ($layer['field_grain_size']['und'][0]['value'] <> '')) )   ){// all of this test to see if it is a 'real' layer
			// we process through error checking and set any missing fields as needed.
			if ($layer['field_bottom_depth']['und'][0]['value'] == '' ) form_set_error("field_layer][". LANGUAGE_NONE."][" . $key . "][field_bottom_depth", t('Missing Bottom Depth value.'));
		}
			
		// Poor mans layer integrity check: make sure that each field_bottom_depth is below field_height, depending on measure_from
			
		if (is_numeric($key) && $form_state['values']['field_depth_0_from']['und'][0]['value'] <> 'top'
			&& isset($layer['field_bottom_depth']['und'][0]['value']) 
			&& $layer['field_bottom_depth']['und'][0]['value'] <> ''
			&& $layer['field_bottom_depth']['und'][0]['value'] >= $layer['field_height']['und'][0]['value']){
	        form_set_error("field_layer][". LANGUAGE_NONE."][" . $key . "][field_bottom_depth", t('The value of the Bottom Depth field should be smaller than Top Depth.'));
		}else if (is_numeric($key) && $form_state['values']['field_depth_0_from']['und'][0]['value'] == 'top' 
			&& isset($layer['field_bottom_depth']['und'][0]['value']) 
			&& $layer['field_bottom_depth']['und'][0]['value'] <> ''
		  &&	$layer['field_bottom_depth']['und'][0]['value'] <= $layer['field_height']['und'][0]['value'] ){
	        form_set_error("field_layer][". LANGUAGE_NONE."][" . $key . "][field_bottom_depth", t('The value of the Bottom Depth field should be greater than Top Depth.'));
		}
		if (is_numeric($key) &&  $form_state['clicked_button']['#name'] == 'field_layer_add_more' && (!isset($layer['field_bottom_depth']['und'][0]['value']) || $layer['field_bottom_depth']['und'][0]['value'] == '' )){
			form_set_error("field_layer][". LANGUAGE_NONE."][" . $key . "][field_bottom_depth", t('Please enter a value for bottom depth (if there are no further layers, you may leave this blank).'));
		}
		//
		//  check that layers do not stretch outside the total raw heigth of snowpack
		$result = _raw_max_pit_depth( $form_state['values'] );
		if( is_numeric($key) ) { 
		  if( $layer['field_bottom_depth']['und'][0]['value'] > _raw_max_pit_depth( $form_state['values']) ){
        form_set_error("field_layer][". LANGUAGE_NONE."][" . $key . "][field_bottom_depth", t('The value of the Bottom Depth field should be less than ' . _raw_max_pit_depth( $form_state['values']) .', the total Height of Snowpack ( available on Core Info tab).'));
	  	}elseif ( $layer['field_height']['und'][0]['value'] > _raw_max_pit_depth( $form_state['values']) ){
        form_set_error("field_layer][". LANGUAGE_NONE."][" . $key . "][field_height", t('The value of the Top Depth field should be less than ' . _raw_max_pit_depth( $form_state['values']) .', the total Height of Snowpack ( available on Core Info tab).'));
	  		
	  	}
			//dsm( _raw_max_pit_depth( $form_state['values']));
		}
	} // end loop through layers 
	
	// Loop through temperature collection items for server-side error checking
	foreach($form_state['values']['field_temp_collection']['und'] as $key=>$temp_item){
		// We want to validate using decimal, not commas, for temp collection items
		if ( is_numeric($key)) {
				
	  	if (strpos(  $temp_item['field_depth']['und'][0]['value'], ',' ) ){
        $temp_item['field_depth']['und'][0]['value'] = str_replace( ',' , '.' , $temp_item['field_depth']['und'][0]['value'] );
	  	}
			if ( strpos( $temp_item['field_temp_temp']['und'][0]['value'] , ',')){
				$temp_item['field_temp_temp']['und'][0]['value'] = str_replace( ',' , '.' , $temp_item['field_temp_temp']['und'][0]['value'] ); 
			}

	  	if ( $form_state['values']['field_temp_units']['und'][0]['value'] == 'C' && is_numeric($key)){
	  		if ( isset( $temp_item['field_temp_temp'] ) && is_numeric( $temp_item['field_temp_temp']['und'][0]['value'] ) && 
				$temp_item['field_temp_temp']['und'][0]['value'] > 0  ){ 
		  		form_set_error("field_temp_collection][". LANGUAGE_NONE."][" . $key . "][field_temp_temp", t('A snowpack measurement should be 0&deg; C or less.'));
	  		}
		  }elseif ( is_numeric($key)  
	  		&& isset ( $temp_item['field_temp_temp']['und'][0]['value'] )
	  	  && is_numeric( $temp_item['field_temp_temp']['und'][0]['value'] ) 
	  	  && $temp_item['field_temp_temp']['und'][0]['value'] > 32 ) {
		  	form_set_error("field_temp_collection][". LANGUAGE_NONE."][" . $key . "][field_temp_temp", t('A snowpack temperature measurement should be 32&deg; F or less.'));
	  	}
	  	if ( is_numeric($key) &&  isset ($temp_item['field_depth']['und'][0]['value']) && is_numeric( $temp_item['field_depth']['und'][0]['value'] ) && 
			$temp_item['field_depth']['und'][0]['value'] > _raw_max_pit_depth( $form_state['values'] ) ) {	
	  		form_set_error("field_temp_collection][". LANGUAGE_NONE."][" . $key . "][field_depth", t("Temp Measurement Depth must be less than less than total snow height. [<a href ='/error_page#depth'>why am I getting this error</a>]"));
	  	}
		}
	}
	// Loop through density collection items for server-side error checking
	if ( isset($form_state['values']['field_density_profile']['und']) ){
		foreach($form_state['values']['field_density_profile']['und'] as $key=>$density_item){
	  	if (strpos(  $density_item['field_depth']['und'][0]['value'], ',' ) ){
	      $density_item['field_depth']['und'][0]['value'] = str_replace( ',' , '.' , $density_item['field_depth']['und'][0]['value'] );
	  	}
			if ( strpos( $density_item['field_density_top']['und'][0]['value'] , ',')){
			  $density_item['field_density_top']['und'][0]['value'] = str_replace( ',' , '.' , $density_item['field_density_top']['und'][0]['value'] ); 
			}		
		
			if ( is_numeric($key )  && isset( $density_item['field_density_top']['und'][0]['value'] ) && is_numeric( $density_item['field_density_top']['und'][0]['value'] ) && $density_item['field_density_top']['und'][0]['value'] > 1000 ){ 
				form_set_error("field_density_profile][". LANGUAGE_NONE."][" . $key . "][field_density_top", t('Density values should be 1000 kg/m-3 or less.'));
			}
			// This checks for Depth item integrity with the HoS or Layers that have been entered
			if ( is_numeric($key )  && isset ($density_item['field_depth']['und'][0]['value']) && is_numeric($density_item['field_depth']['und'][0]['value'] ) &&  $density_item['field_depth']['und'][0]['value'] > _raw_max_pit_depth( $form_state['values'] ) ) {	
	//			dsm( $temp_item);
				form_set_error("field_density_profile][". LANGUAGE_NONE."][" . $key . "][field_depth", t("Density Measurement Depth must be less than less than total snow height. [<a href ='/error_page#depth'>why am I getting this error</a>]"));
			}
	  }
	}
	//
	// Serveside tests for Core Info tab information:
	//
  if ( $form_state['values']['field_elevation_units']['und'][0]['value'] == 'm'   && ($form_state['values']['field_elevation']['und'][0]['value'] > 8000 )){
    form_set_error("field_elevation", 'The elevation in meters must be less than 8000.');
	}
	
	$form_state['values']['field_air_temp']['und'][0]['value'] = str_replace( ',' , '.' ,$form_state['values']['field_air_temp']['und'][0]['value']);
	// addition Core Info field validation can go here:
	//
	if ( substr($form_state['values']['field_date_time']['und'][0]['value'], -8, 8) == '00:00:00' ){
		form_set_error('field_date_time', t('Please enter a valid time for when the snowpit was dug.'));
	}
	if ( strtotime($form_state['values']['field_date_time']['und'][0]['value']) > time() ){
		form_set_error('field_date_time', t('Please enter a valid date for when the snowpit was dug. Future date was entered.'));
	}
	//dsm( taxonomy_get_children($form_state['values']['field_loaction']['und'][0]['tid']) );
	if ( ! isset( $form_state['values']['field_loaction']['und'][1]['tid'] ) && count ( taxonomy_get_children($form_state['values']['field_loaction']['und'][0]['tid']) )){
		form_set_error( 'field_loaction', t('Please enter a valid Mountain Range or Region at deepest possible level.'));
		
	}
	if ( isset ($form_state['values']['field_aspect']['und'][0]['value']) && $form_state['values']['field_aspect']['und'][0]['value'] <> '' && !is_numeric($form_state['values']['field_aspect']['und'][0]['value'])  ){
		//dsm($form_state['values']['field_aspect']);
		//dsm($form_state['values']['field_aspect_cardinal']);
		form_set_error( 'field_aspect', t('Please enter a numerical value for Aspect. <p>For later snowpits, you can set the default aspect type to \'Cardinal\' in your <a href ="/snowpilot/user/edit" target = "_blank">User Preferences</a>.' ));
	}
	
	return;
}

function snowpilot_snowpit_profile_node_form_submit($form,&$form_state){	
	
//  If the last layer has no bottom depth set, truncate it- 'degenerative' layer
	foreach($form_state['values']['field_layer']['und'] as $key => $layer){
		// If this is a degenerative layer, (i.e. no bottom_depth and no hardness field set ) then we just delete it
		if ( is_numeric($key) && ( $layer['field_bottom_depth']['und'][0]['value'] == '' ) ){
		  unset($form_state['values']['field_layer']['und'][$key]);  // chop off this layer		
		}
	}
	// 
	// For stability tests: if the Score field is not set ( for all except PST type results ), then chop off the degenrate stability test
	foreach($form_state['values']['field_test']['und'] as $key => $test){
		if ( is_numeric($key) && !isset($test['field_stability_test_type']['und'][0]['value'])){ // in this case, we don't even have a test type indicated
			unset($form_state['values']['field_test']['und'][$key]); 		
		} elseif (is_numeric($key) && !isset( $test['field_depth']['und'][0]['value'])){
			if ( (($test['field_stability_test_type']['und'][0]['value'] == 'RB') && !isset($test['field_stability_test_score_rb']['und'][0]['value']))
				||
			(($test['field_stability_test_type']['und'][0]['value'] == 'SB') && !isset($test['field_stability_test_score_sb']['und'][0]['value']))
				||
			(($test['field_stability_test_type']['und'][0]['value'] == 'CT') && !isset($test['field_stability_test_score_ct']['und'][0]['value']))
				||
			(($test['field_stability_test_type']['und'][0]['value'] == 'ECT') && !isset($test['field_stability_test_score_ect']['und'][0]['value']))
				||
			(($test['field_stability_test_type']['und'][0]['value'] == 'ST') && !isset($test['field_stability_test_score_st']['und'][0]['value']))
				||
			(($test['field_stability_test_type']['und'][0]['value'] == 'PST') && !isset($test['field_data_code_pst']['und'][0]['value']))

			){
				
		  unset($form_state['values']['field_test']['und'][$key]);  // chop off this test result		
			// verified that this works
		  }
		}
	}		
	foreach($form_state['values']['field_temp_collection']['und'] as $key => $temp_item){
		// If this is a degenerative temp, (i.e. no temp or depth set ) then we just delete it
		if ( is_numeric($key) && ( $temp_item['field_temp_temp']['und'][0]['value'] == '' ||  ($temp_item['field_depth'] == '')  ) ){
		  unset($form_state['values']['field_temp_collection']['und'][$key]);  // chop off this temp item
		}
	}

	return $form_state;
}

function _set_test_result_single($test_result){
	if (isset($test_result->field_stability_test_type['und'][0])){		
	switch ($test_result->field_stability_test_type['und'][0]['value']){
		case 'ECT':	return $test_result->field_stability_test_score_ect['und'][0]['value'];
		break;
		case 'CT':	return $test_result->field_stability_test_score_ct['und'][0]['value'];
		break;
		case 'DT':	return $test_result->field_deep_tap_test_score['und'][0]['value'];
		break;
		case 'RB':	return $test_result->field_stability_test_score_rb['und'][0]['value'];
		
		break;
		case 'PST':	return $test_result->field_data_code_pst['und'][0]['value'];
		
		break;
		case 'SB':	return $test_result->field_stability_test_score_sb['und'][0]['value'];
		
		break;
		case 'ST': return $test_result->field_stability_test_score_st['und'][0]['value'];
		
		break;
	}
	}
	return;
}


function snowpilot_snowpit_set_density_titles(&$form, $snowpit_unit_prefs){
	$x= 0;
	while (isset($form['field_density_profile']['und'][$x])){
		$next_layer = $x+1;
		$form['field_density_profile']['und'][$x]['remove_button']['#value'] = "X Remove Density";
		if (isset($form['field_density_profile']['und'][$next_layer])){ $collapsed = ' collapsed'; 
		
		$form['field_density_profile']['und'][$x]['#prefix'] = "<div class='collapsible-container density_num_". $x ." '>".
			'<div class="collapsible-content collapsed" >';
		}else{
			$form['field_density_profile']['und'][$x]['#prefix'] = "<div class='collapsible-container density_num_". $x ." '>".
				'<div class="collapsible-content" >';
		
		}
		$form['field_density_profile']['und'][$x]['#suffix'] ="</div> </div>";
		$x++;
	}
	return $form;
}

function snowpilot_snowpit_set_stability_test_titles(&$form, $snowpit_unit_prefs){
	// this will be a fancy one, with compiled stab test output
	$form['field_test']['und']['add_more']['#value'] = "Add Test";
	

	$x= 0;
	while (isset($form['field_test']['und'][$x])){
		$next_layer = $x+1;
		$form['field_test']['und'][$x]['remove_button']['#value'] = "X Remove Test";
		//dsm($form['field_test']['und'][$x]);
		if (isset($form['field_test']['und'][$x]['field_stability_test_type']['und']['#default_value'][0]) && $form['field_test']['und'][$x]['field_stability_test_type']['und']['#default_value'][0] <> ''){ 
			$form_test_shorthand = stability_test_score_shorthand_form($form['field_test']['und'][$x]);
			
			$depth_final = $form['field_test']['und'][$x]['field_depth']['und'][0]['value']['#default_value']+0 ; 
			$depth_val =( $form['field_test']['und'][$x]['field_depth']['und'][0]['value']['#default_value'] <> '') ? 
				"Depth: ". $depth_final . " ". $snowpit_unit_prefs['field_depth_units'] :	'';
			
			$form['field_test']['und'][$x]['#prefix'] = "<div class='collapsible-container stability_test_num_". $x ." '>".
				"<h3 class='collapsible-handle test-title'>Stability Test " . $next_layer. ": ". $form_test_shorthand ." ".
							 $depth_val . "</h3>". '<div class="collapsible-content collapsed" >';
			
			
			
		}else { // this is a new, blank stability test form, so we leave it open
			$form['field_test']['und'][$x]['#prefix'] = "<div class='collapsible-container stability_test_num_". $x ." '>".
				"<h3 class='collapsible-handle test-title'>Add Stability Test Result</h3>". '<div class="collapsible-content" >';
			$form['field_test']['und'][$x]['#suffix'] ="</div> </div>";		 // don't put dsm here, it will break the "add another"  functionality with AJAX errors.
	  }
		//dsm($form['field_test']['und'][$x]);
		$form['field_test']['und'][$x]['field_stability_comments']['und'][0]['value']['#maxlength'] = 16;
		// here we will attempt to add a "Duplicate test" button and functionality

				
		$x++;
	}
  //dsm($form);

	return $form;
}


function snowpilot_snowpit_set_temp_coll_titles(&$form, $snowpit_unit_prefs){
	$x= 0;
	while (isset($form['field_temp_collection']['und'][$x])){
		$next_layer = $x+1;
		$form['field_temp_collection']['und'][$x]['remove_button']['#value'] = "X Remove Temp";
		if (isset($form['field_temp_collection']['und'][$next_layer])){ 	
			$form['field_temp_collection']['und'][$x]['#prefix'] = "<div class='collapsible-container temp_num_". $x ." '>".
			'<div class="collapsible-content collapsed" >';
		}else {
			$form['field_temp_collection']['und'][$x]['#prefix'] = "<div class='collapsible-container temp_num_". $x ." '>".
			'<div class="collapsible-content" >';
			
		}

		$form['field_temp_collection']['und'][$x]['#suffix'] ="</div> </div>";
		
		$x++;
	}
	return $form;
}

function snowpilot_snowpit_set_layer_titles(&$form, $snowpit_unit_prefs){
	// Start with the overall title of the group
	$form['field_layer']['und']['#title'] = "Layers"; // 
	// Add more button:
	$form['field_layer']['und']['add_more']['#value'] = "Add Layer";

/*	$form['field_layer']['und']['clear_layers']= array(
		'#type' => 'submit',
		'#name' => 'field_clear_layers',
		'#value' => 'Clear All Layers',
		'#attributes' => array( 'class' => array( 0 => 'field-clear-layers-submit'), ),
		'#limit_validation_errors' => array( 0 => array ( 0 => 'field_layer', 1 => 'und' ), ),
		'#submit' => array('field_clear_layers_submit'),
		'#ajax' => array('callback' => 'field_add_more_js' ,'wrapper' => 'field-layer-add-more-wrapper', 'effect' => 'fade'),		
		'#weight' => 20,
	);*/
	$x=0;
	
	$layer_info = array();
	while(isset($form['field_layer']['und'][$x] )){
		// Set remove button text
		$form['field_layer']['und'][$x]['remove_button']['#value'] = "Remove Layer";
		unset($form['field_layer']['und'][$x]['remove_button']);
		$next_layer = $x+1 ; 
		
		$collapsed = '';
		$this_hardness = '';
		if (isset($form['field_layer']['und'][$x]['field_height']['und'][0]['value']['#default_value']) && ( $form['field_layer']['und'][$x]['field_height']['und'][0]['value']['#default_value'] <> '')
				&& isset($form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#default_value'] ) && $form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#default_value'] <> '' ){  // if this is an existing layer , collapse the box and set the top depth ....
			$collapsed = ' collapsed';
			
			// Set the top of the next field equal to the bottom of the last one.		
			if ( isset( $form['field_layer']['und'][$next_layer])){
				$form['field_layer']['und'][$next_layer]['field_height']['und'][0]['value']['#default_value'] = 
					$form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#default_value'];
			}
			
			$this_hardness = (isset($form['field_layer']['und'][$x]['field_hardness']['und']['#default_value'][0]) && $form['field_layer']['und'][$x]['field_hardness']['und']['#default_value'][0] <> '') ? 
				', '.$form['field_layer']['und'][$x]['field_hardness']['und']['#default_value'][0] 
				: '' ;
			$layer_info[$x] = 'Layer '.$next_layer.': '	. $form['field_layer']['und'][$x]['field_height']['und'][0]['value']['#default_value'].' ' . $snowpit_unit_prefs['field_depth_units'] . ' - ' .
				$form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#default_value']. ' ' . $snowpit_unit_prefs['field_depth_units']  .  $this_hardness; 
			
		}
		$this_layer_info = isset ( $layer_info[$x] ) ? $layer_info[$x] : "New Layer";
		$form['field_layer']['und'][$x]['#prefix'] ="<div class='collapsible-container layer_num_". $x ." '>"
			."<h3 class='layer-title'>". $this_layer_info . "</h3>".
				'<div class="'. $collapsed .'" >' ;

		$form['field_layer']['und'][$x]['#suffix'] ="</div> </div>";
		/*
		if ( $x >= 5 ){
			
			$layer_number = $x-5;
			$form['field_layer']['und'][$x-5]['#prefix'] ="<div class='collapsible-container layer_num_ scrunch '>"
				."<h3 class=' layer-title'>" .$layer_info[$layer_number] . "</h3>".
					"<div class='' >" ;				
		}
		*/
		//
		// this block hides the last layer entry form where the bottom of the previous one was "zero depth" and puts up a 'bottom of Snowpit' sign
		//
		
		if ( isset($form['field_layer']['und'][$x]) && 
		(($snowpit_unit_prefs['field_depth_0_from'] <> 'top') &&  $form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#default_value'] == '0')
			|| ( ($snowpit_unit_prefs['field_depth_0_from'] == 'top')  
				&&  isset($form['field_total_height_of_snowpack']['und'][0]['value']['#default_value']) && $form['field_total_height_of_snowpack']['und'][0]['value']['#default_value'] <> ''
				&& $form['field_total_height_of_snowpack']['und'][0]['value']['#default_value'] == $form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#default_value'])
		){
			unset ($form['field_layer']['und'][$x+1]);
			unset($form['field_layer']['und']['add_more']);
			$form['field_layer']['und'][$x]['#suffix'] = $form['field_layer']['und'][$x]['#suffix'].'<h3 class ="snowpilot-snowpit-bottom">Bottom of Snowpack</h3>';
		}
		
		//dsm($form['field_total_height_of_snowpack']['und'][0]['value']);
		//$form['field_layer']['und'][$x]['#pre_render'][] = 'snowpilot_graintypes_tweak';
		$x++;
	}
}
function field_clear_layers_submit($form, &$form_state){
	watchdog('snowpilot' , 'clear layers functi is hit');
	dsm($form);
}

/**
 * Implements hook_node_access_records().
 */
function snowpilot_node_access_records($node) {
  $grants = array();
 
  // Make sure we have the correct content type.
  if ($node->type == 'snowpit_profile') {
    // 
		$user = user_load($node->uid);
    if (!($node->sticky)) {
        // If 
      $grants[] = array(
        'nid' => $node->nid,
        'realm' => 'snowpit_unlocked',
        'gid' => $node->uid,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
        'priority' => 1
      );
    
		  if ( isset($node->field_org_ownership['und'][0]['tid'])){
				$node_group = $node->field_org_ownership['und'][0]['tid'];
	  	  
		  	//			
		    $grants[] = array(
		    	'nid' => $node->nid,
		    	'realm' => 'org_admin',
		    	'gid' => $node_group,
		    	'grant_view' => 1,
		    	'grant_update' => 1,
		      'grant_delete' => 1,
		 	    'priority' => 1,
	      );
		  }
   }elseif ($node->sticky && isset($node->field_org_ownership['und'][0]['tid']) ){ // Just to be explicit that this applies to LOCK pits ... org admins can still delete them
	   $node_group = $node->field_org_ownership['und'][0]['tid'];
		 $grants[] = array(
     'nid' => $node->nid,
     'realm' => 'snowpit_locked_admin',
     'gid' => $node_group,
     'grant_view' => 1,
     'grant_update' => 0,
     'grant_delete' => 1,
     'priority' => 1
	   );
	 }
	 if ( isset($node->field_snowpit_visibility['und'][0]['value']) && $node->field_snowpit_visibility['und'][0]['value'] == 'group'){
		
		if ( isset($user->field_professional_affiliation['und'][0]['tid']) ){
	  	$node_group = $node->field_org_ownership['und'][0]['tid'];
	  	// if u$user-> group is not something like unaffiliated, or education , then ......
      $grants[] = array(
        'nid' => $node->nid,
        'realm' => 'snowpit_group',
        'gid' => $node_group,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 1
      );
			$node_shared_groups = snowpilot_user_shared_groups($node_group); // returns an array
			if ( count($node_shared_groups)){
				foreach ( $node_shared_groups as $shared_group ){
		      $grants[] = array(
		        'nid' => $node->nid,
		        'realm' => 'org_shared',
		        'gid' => $shared_group,
		        'grant_view' => 1,
		        'grant_update' => 0,
		        'grant_delete' => 0,
		        'priority' => 1
		      );
				}
			}
		}
	}elseif (isset ($node->field_snowpit_visibility['und'][0]['value']) && $node->field_snowpit_visibility['und'][0]['value'] == 'public'){
    $grants[] = array(
      'nid' => $node->nid,
      'realm' => 'all',
      'gid' => 0,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 1
    );

	}else{ // visibility is hidden for everyone ...
    $grants[] = array(
      'nid' => $node->nid,
      'realm' => 'all',
      'gid' => 0,
      'grant_view' => 0,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 1
    );
    $grants[] = array(   //////////  except the owner
      'nid' => $node->nid,
      'realm' => 'snowpit-owner',
      'gid' => $node->uid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 1
    );
	}	
	}			
  return $grants;
}

function snowpilot_node_grants($account, $op) {
 
  $grants = array();
  // Set default grants condition. 
	$grants['snowpit_unlocked'] = array(0);
	$grants['all'] = array(0);
  
	if ($account->uid) {
		$current_user = user_load($account->uid);
    $grants['snowpit_unlocked'] = array( $account->uid );
    $grants['snowpit-owner'] = array( $account->uid );
		//
		// set group visibility ; set shared org visibility; for all roles except merely 'authenticated user', which is disabled from group permissions
	  if ( isset( $current_user->field_professional_affiliation['und']) && (in_array( 'forecaster' , $current_user->roles) || in_array( 'limited' , $current_user->roles) || in_array( 'org admin' , $current_user->roles) || in_array( 'researcher' , $current_user->roles))){
	  	foreach ($current_user->field_professional_affiliation['und'] as $user_groups ) {
		  	$grants['snowpit_group'][] = $user_groups['tid'];
				$grants['org_shared'][] = $user_groups['tid'];
			}
			//
			// likewise, org admins get more permissions for edit/delete
			if ( in_array( 'org admin' , $current_user->roles)  && isset($current_user->field_org_admin_groups['und'])  ){
				foreach ( $current_user->field_org_admin_groups['und'] as $admin_of_group){
			    $grants['org_admin'][] = array($admin_of_group['tid']);
					$grants['snowpit_locked_admin'][] = array($admin_of_group['tid']);
			  }
			}
  	}
	}
  return $grants;
}
 
 
//
// Function to find which group tids should be added to the org_shared realm
//
 
function snowpilot_user_shared_groups($tid){
	$term = taxonomy_term_load($tid) ;
	$tids = array();
	if ( isset($term->field_org_share_snowpits['und']) && count( $term->field_org_share_snowpits['und'] )){
		foreach ( $term->field_org_share_snowpits['und'] as $key => $shared_org){
			$tids[] = $shared_org['tid'];
		}
	}
	return $tids;
}


function snowpilot_node_view($node, $view_mode){
	if ($node->type == 'snowpit_profile'){
	//snowpilot_snowpit_graph_header_write($node);	
		$prefs = snowpilot_unit_prefs_get($node, 'node'); 
		//$node->content['field_air_temp'][0]['#markup'] = $node->content['field_air_temp']['#items'][0]['value']. $prefs['field_temp_units'];
	}
	// dsm($node->field_snowpit_visibility);
	return $node;
}		

function snowpilot_graintypes_tweak($element){
	return ;
}

function snowpilot_field_widget_form_alter(&$element, &$form_state, $context) {
  // Add a css class to widget form elements for all fields of type mytype.
  if ($context['field']['type'] == 'taxonomy_term_reference' && $context['field']['field_name'] == 'field_grain_type' ) {
		//dsm($form_state);
		
		
    // Be sure not to overwrite existing attributes.
    $element['#attributes']['class'][] = 'myclass';
  }
	if ($context['field']['type']  == 'datetime' ){
		$location = $form_state['build_info']['args'][0]->field_loaction ;
		//dsm($location['und'][0]['tid']);
		if ( isset( $location['und'][0]['tid'] ) ){
      $form_state['field']['field_date_time']['und']['instance']['widget']['settings']['input_format'] = snowpilot_date_output_format($location['und'][0]['tid']);
		}else{
			$account = user_load( $form_state['build_info']['args'][0]->uid );
			$snowpilot_user_prefs = snowpilot_unit_prefs_get($account);
			$form_state['field']['field_date_time']['und']['instance']['widget']['settings']['input_format'] = snowpilot_date_output_format( $snowpilot_user_prefs['field_loaction_0'] );
    }
	}
}
		
// this function determines whether a region uses 'Euro' formatted date time ; or American style.
function snowpilot_date_output_format($tid){
	if ( in_array ($tid, array( 1,2 ,3,4,5,6,7,8,9,10,11,13,14) )){
		return 'm/d/Y - g:ia';
	}else{
		return 'd/m/Y - H:i';
	}
}


function snowpilot_snopit_prof_set_suffices(&$form, $snowpit_unit_prefs){
	//dsm($form['field_elevation']['und'][0]);
	$form['field_air_temp']['und'][0]['value']['#field_suffix'] = 'º'.$snowpit_unit_prefs['field_temp_units'];
	$form['field_elevation']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_elevation_units'];
	$form['field_surface_penetration']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
	$form['field_boot_penetration_depth']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
	$form['field_ski_penetration']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
  $form['field_total_height_of_snowpack']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
	
	$form['field_latitude']['und'][0]['value']['#field_suffix'] = "&#176;".$snowpit_unit_prefs['field_latitude_type'];
	$form['field_longitude']['und'][0]['value']['#field_suffix'] = "&#176;".$snowpit_unit_prefs['field_longitude_type'];
	
	$form['field_north']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_latitude_type'];
	$form['field_east']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_longitude_type'];
	
	// not just a suffix, but a real form value ( in core info)
	
	$form['field_utm_zone']['und'][0]['value']['#default_value'] = $snowpit_unit_prefs['field_utm_zone'];
	
	// Repeated per layer
	$x = 0; //count($form['field_layer']['und'] );
	while ( isset($form['field_layer']['und'][$x]) ){
				
				
		$form['field_layer']['und'][$x]['field_height']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units']; //
		$form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$form['field_layer']['und'][$x]['field_density_top']['und'][0]['value']['#field_suffix'] = _density_unit_fix($snowpit_unit_prefs['field_density_units']);
		$form['field_layer']['und'][$x]['field_density_bottom']['und'][0]['value']['#field_suffix'] = _density_unit_fix($snowpit_unit_prefs['field_density_units']);
		$form['field_layer']['und'][$x]['field_grain_size']['und'][0]['value']['#field_suffix'] = 'mm';
		$x++;
	}

	// Repeated per test
	$x = 0; //count($form['field_layer']['und'] );
	while ( isset($form['field_test']['und'][$x]) ){
		$form['field_test']['und'][$x]['field_depth']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$form['field_test']['und'][$x]['field_length_of_saw_cut']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$form['field_test']['und'][$x]['field_length_of_isolated_col_pst']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$x++;
	}
	
	// REpeated per temp collection
	$x = 0;
	while (isset ($form['field_temp_collection']['und'][$x])){
		$form['field_temp_collection']['und'][$x]['field_temp_temp']['und'][0]['value']['#field_suffix'] = "&#176;". $snowpit_unit_prefs['field_temp_units'];
		$form['field_temp_collection']['und'][$x]['field_depth']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$x++;
	}
	// Repeated per density measurement
	$x = 0;
	while ( isset( $form['field_density_profile']['und'][$x])){
		$form['field_density_profile']['und'][$x]['field_depth']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$form['field_density_profile']['und'][$x]['field_density_top']['und'][0]['value']['#field_suffix'] = _density_unit_fix($snowpit_unit_prefs['field_density_units']);
		
		
		$x++;
	}
	
	return;
}

function _density_unit_fix($units){
	return ($units == 'kg_cubic_m' ? 'kg/m&#xb3;' : 'lb/ft&#xb3;');  // this should be fixed so that metric units would be the default
}


function snowpilot_cardinal_wind_dir($degrees){
	if (!is_numeric($degrees)) return;
	switch (true){
		
		case ($degrees >= 360-22.5 || $degrees < 22.5): $card = 'N'; break; 
		case ($degrees >=22.5 && $degrees < 67.5 ): $card = 'NE'; break;
		case ($degrees >=67.5 && $degrees < 112.5): $card = 'E'; break;
		case ($degrees >=112.5 && $degrees < 157.5): $card = 'SE'; break;
		case ($degrees >=157.5 && $degrees < 202.5): $card = 'S'; break;
		case ($degrees >=202.5 && $degrees < 247.5): $card = 'SW'; break;
		case ($degrees >= 247.5 && $degrees < 292.5): $card = 'W'; break;
		case ($degrees >=292.5 && $degrees < 337.5): $card ='NW'; break;
	
	
	}
	return $card;
}

function _snowpilot_find_pit_depth($node){
	$max = 0;
	if ( isset($node->field_total_height_of_snowpack['und'][0]['value'])  && ( (isset($node->field_display_full_profile['und']) && ($node->field_display_full_profile['und'][0]['value'] == 1) )
	  || $node->field_depth_0_from['und'][0]['value'] == 'bottom') ){	
		
		  $max = $node->field_total_height_of_snowpack['und'][0]['value'];
	}else{
		if ( isset($node->field_layer['und'])){
			$ids = array();
			foreach ($node->field_layer['und'] as $lay ){ $ids[] = $lay['value']; }
			$all_layers = field_collection_item_load_multiple($ids);
			foreach ($all_layers as $layer){
				if ($layer->field_height['und'][0]['value'] > $max ) $max = $layer->field_height['und'][0]['value'] ;
				if ($layer->field_bottom_depth['und'][0]['value'] > $max ) $max = $layer->field_bottom_depth['und'][0]['value'] ;	
			}
	  }
	//  lets look for stability tests  
		if ( isset($node->field_test['und'])){
			$ids = array();
			foreach ($node->field_test['und'] as $test ){ $ids[] = $test['value']; }
			$all_tests = field_collection_item_load_multiple($ids);
			foreach ($all_tests as $test){
				if ( isset( $test->field_depth['und'] ) && ($test->field_depth['und'][0]['value'] > $max )) $max = $test->field_depth['und'][0]['value'] ;
			}
		}
		//  lets look for temp measurements  
		if ( isset($node->field_temp_collection['und'])){
			$ids = array();
			foreach ($node->field_temp_collection['und'] as $temp ){ $ids[] = $temp['value']; }
			$all_temps = field_collection_item_load_multiple($ids);
			foreach ($all_temps as $temp){
				if ($temp->field_depth['und'][0]['value'] > $max ) $max = $temp->field_depth['und'][0]['value'] ;
			}
		}
		// Now look for densities
		if ( isset($node->field_density_profile['und'])){
			$ids = array();
			foreach ($node->field_density_profile['und'] as $density ){ $ids[] = $density['value']; }
			$all_densities = field_collection_item_load_multiple($ids);
			foreach ($all_densities as $density){
				if ($density->field_depth['und'][0]['value'] > $max ) $max = $density->field_depth['und'][0]['value'] ;
			}
		}
	}
	return $max;
}

function _snowpilot_find_pit_min($node){
	$min = _snowpilot_find_pit_depth($node);
	
	if ( $node->field_depth_0_from['und'][0]['value'] == 'top' ) $min = 0;
		if ( isset($node->field_layer['und'])){
			$ids = array();
			foreach ($node->field_layer['und'] as $lay ){ $ids[] = $lay['value']; }
			$all_layers = field_collection_item_load_multiple($ids);
			foreach ($all_layers as $layer){
				if ($layer->field_height['und'][0]['value'] < $min ) $min = $layer->field_height['und'][0]['value'] ;
				if ($layer->field_bottom_depth['und'][0]['value'] < $min ) $min = $layer->field_bottom_depth['und'][0]['value'] ;	
			}
	  }
	//  lets look for stability tests  
		if ( isset($node->field_test['und'])){
			$ids = array();
			foreach ($node->field_test['und'] as $test ){ $ids[] = $test['value']; }
			$all_tests = field_collection_item_load_multiple($ids);
			foreach ($all_tests as $test){
				if ( isset( $test->field_depth['und'][0]['value']  ) && ($test->field_depth['und'][0]['value'] <> 0)  && ($test->field_depth['und'][0]['value'] < $min )  ) $min = $test->field_depth['und'][0]['value'] ;
			}
		}
		//  lets look for temp measurements  
		if ( isset($node->field_temp_collection['und'])){
			$ids = array();
			foreach ($node->field_temp_collection['und'] as $temp ){ $ids[] = $temp['value']; }
			$all_temps = field_collection_item_load_multiple($ids);
			foreach ($all_temps as $temp){
				if ($temp->field_depth['und'][0]['value'] < $min ) $min = $temp->field_depth['und'][0]['value'] ;
			}
		}
		if ( isset($node->field_density_profile['und'])){
			$ids = array();
			foreach ($node->field_density_profile['und'] as $density ){ $ids[] = $density['value']; }
			$all_densities = field_collection_item_load_multiple($ids);
			foreach ($all_densities as $density){
				if ($density->field_depth['und'][0]['value'] < $min ) $min = $density->field_depth['und'][0]['value'] ;
			}
		}
				
	return $min;
}


//
//  This function returns the maximum depth of a snowpit ( if known ) for $form  ( = form_state )
//    if the snowpit depth cannot be determined, either because no layers are given, or no total height of snowpack is given
//    then this functio nreturns 1000 ,assumed to be the max possible anyone would dig!!!
function _raw_max_pit_depth( $form ){
	$max = 0 ;
	//dsm($form['field_layer']);
	if ( isset ( $form['field_total_height_of_snowpack']['und'][0]['value']) && $form['field_total_height_of_snowpack']['und'][0]['value'] > 0 ){
	  $max = $form['field_total_height_of_snowpack']['und'][0]['value']; 
	}elseif ( is_real_layers( $form['field_layer']['und']) ){ // This seems in-efficient to call a binary function to test if we want to do the loop Code Cleanup; it allows us to go to stability tests
		foreach ( $form['field_layer']['und'] as $key => $layer ){
			//dsm($layer);
			if ( is_numeric( $key ) && $layer['field_height']['und'][0]['value'] > $max  ) {  
				$max = $layer['field_height']['und'][0]['value']; 
			}
			if ( is_numeric( $key ) && $layer['field_bottom_depth']['und'][0]['value'] > $max ) {
				$max = $layer['field_bottom_depth']['und'][0]['value'];
			}
		}	
			//dsm ( "max: ".$max);

	}elseif ( is_real_tests ( $form['field_test']['und'])){
		foreach ( $form['field_test']['und'] as $key => $test ){
			if ( is_numeric( $key )  && $test['field_depth']['und'][0]['value'] > $max  ) {  
				$max = $test['field_depth']['und'][0]['value']; 
			}
		}
	}else{   /// could potenntially expand this to temp collections and densty profiles, but there is not much snow info there!
		$max = 1000;
	}	
	return $max;
}

function is_real_layers ( $layers ){
	if ( !isset($layers)){
		return FALSE;
	}else
		$ret_val = FALSE;
		foreach ( $layers as $key => $layer ){
			if ( is_numeric( $key ) && ($layer['field_height']['und'][0]['value'] <> '' || $layer['field_height']['und'][0]['value'] <> '' )){
				$ret_val = TRUE;
			}
		}
		return $ret_val;
}

function is_real_tests ( $tests ){
	if ( !isset($tests)){
		return FALSE;
	}else
		$ret_val = FALSE;
		foreach ( $tests as $key => $test ){
			if ( is_numeric( $key ) && isset($test['field_depth']['und'][0]['value'] ) && ($test['field_depth']['und'][0]['value'] <> '' )){
				$ret_val = TRUE;
			}
		}
		return $ret_val;
}

function depth_val($a,$b){
	$a_depth = isset($a->field_depth['und'][0]['value']) ? $a->field_depth['und'][0]['value'] : 0; 
	$b_depth = isset($b->field_depth['und'][0]['value']) ? $b->field_depth['und'][0]['value'] : 0;
	
	switch (true){
		case $a_depth>$b_depth:
			return -1;
		break;
		case $a_depth<$b_depth:
			return 1;
		break;
		case $a_depth == $b_depth:
		  return 0;
		break;
	}	
	
}

function layer_depth_val( $a , $b){
	return ($a->y_val_top > $b->y_val_top) ? 1 : -1 ;
}


//  Returns a string when give a stability test part of a node, eg. $node->field_test['und'][$x]
//  $test is a fieldCollectionEntityObject

function stability_test_score_shorthand($test, $snowpit_unit_prefs){
	$string = '';
	//
	// Let's calculate what the Fracture Character or shear quality part of the string will be
	//
	if ( $snowpit_unit_prefs['field_fracture_category'] == 'shear_quality' && isset($test->field_shear_quality['und'][0]['value'])){
		$fracture = ', ' . $test->field_shear_quality['und'][0]['value'];
	}elseif (isset( $test->field_fracture_character['und'][0]['value'])){
		$fracture = ', ' . $test->field_fracture_character['und'][0]['value'];
	}else{
		$fracture = '';
	}
	//
	//  
	//
	
	switch ($test->field_stability_test_type['und'][0]['value']){
		case 'ECT':
				$string = $test->field_stability_test_score['und'][0]['value'] ;
				$string .= isset ($test->field_ec_score['und'][0]['value']) ? $test->field_ec_score['und'][0]['value'] : '';
				$string .= $fracture;	
		break;
		case 'PST':
		if ( isset ($test->field_length_of_saw_cut['und'][0]['value']) && 
				isset( $test->field_length_of_isolated_col_pst['und'][0]['value'] ) && 
				isset ($test->field_data_code_pst['und'][0]['value'])){
					$length_of_saw_cut = $test->field_length_of_saw_cut ['und'][0]['value'] + 0 ;
					$length_of_column = $test->field_length_of_isolated_col_pst['und'][0]['value'] + 0;
			$string = 'PST'. $length_of_saw_cut ."/". 
				$length_of_column .
				" (". $test->field_data_code_pst['und'][0]['value']. ")". 
				$fracture;
		}else{ 
			$string = 'PST, missing data';
		}
		break;
		case 'CT':
			if ( ($test->field_stability_test_score_ct['und'][0]['value'] == 'CT') && isset($test->field_ct_score['und'][0]['value'])){
				$string = 'CT' . $test->field_ct_score['und'][0]['value'] . $fracture;
			}else{
		  	$string = $test->field_stability_test_score_ct['und'][0]['value'] . $fracture;
			}
		break;	
		case 'DT':
			if (($test->field_deep_tap_test_score['und'][0]['value'] == 'DT') && isset($test->field_dt_score['und'][0]['value'])){
				$string = 'DT' . $test->field_dt_score['und'][0]['value'] . $fracture;
			}else{
		  	$string = $test->field_deep_tap_test_score['und'][0]['value'] . $fracture;
			}
		break;	
		case 'RB':
		case 'ST':
		case 'SB':		
			$string = $test->field_stability_test_score['und'][0]['value'] . $fracture;
		break;	
	}
	//
	// Test Multiple would be set previously, by the function that calls this
	if ( $test->multiple > 1 ){
		$string = $test->multiple.'x '.$string;
	}
	
	if ( !in_array( $test->field_stability_test_score['und'][0]['value'], array('CTN', 'STN' , 'ECTX', 'RB7', 'SBN'  )) ){
		$final_depth = $test->field_depth['und'][0]['value'] + 0;
		$string .= " @". $final_depth .$snowpit_unit_prefs['field_depth_units']; 
	}
	return $string;
}

function stability_test_score_shorthand_form($stab_test){
	$string = '';
	if ( !isset( $stab_test['field_stability_test_type']['und']['#default_value'][0] )) return '';
	$shear_quality = isset($stab_test['field_shear_quality']['und']['#default_value'][0]) ? ", ".$stab_test['field_shear_quality']['und']['#default_value'][0] : '' ;
	switch ($stab_test['field_stability_test_type']['und']['#default_value'][0]){
		case 'ECT':
		  $string = $stab_test['field_stability_test_score_ect']['und']['#default_value'][0];
			if (in_array( $stab_test['field_stability_test_score_ect']['und']['#default_value'][0], array( 'ECTP','ECTN' ) ) && isset ($stab_test['field_ec_score']['und'][0]['value']['#default_value'] )){
				$string .= " ". $stab_test['field_ec_score']['und'][0]['value']['#default_value'];		
			}
		
		break;
		case 'PST':
			$string = 'PST'. $stab_test['field_length_of_saw_cut']['und'][0]['value']['#default_value']."/". $stab_test['field_length_of_isolated_col_pst']['und'][0]['value']['#default_value']." (". $stab_test['field_data_code_pst']['und']['#default_value'][0]. ")";
		
		
		break;
		case 'CT':
	  	$string = $stab_test['field_stability_test_score_ct']['und']['#default_value'][0];
			if ( ( $stab_test['field_stability_test_score_ct']['und']['#default_value'][0] == 'CT' ) && isset($stab_test['field_ct_score']['und'][0]['value']['#default_value'])){
				$string .= $stab_test['field_ct_score']['und'][0]['value']['#default_value'] . $shear_quality;
			}
		break;	
		case 'DT':
	  	$string = $stab_test['field_deep_tap_test_score']['und']['#default_value'][0];
			if (($stab_test['field_deep_tap_test_score']['und']['#default_value'][0] == 'DT' ) && isset($stab_test['field_dt_score']['und'][0]['value']['#default_value'])){
				$string .= $stab_test['field_dt_score']['und'][0]['value']['#default_value'] . $shear_quality;
			}
		break;	
		case 'RB':
	  $string = $stab_test['field_stability_test_score_rb']['und']['#default_value'][0]. $shear_quality; break;
		
		case 'ST':
	  $string = $stab_test['field_stability_test_score_st']['und']['#default_value'][0]. $shear_quality; break;
		
		case 'SB':
		  $string = $stab_test['field_stability_test_score_sb']['und']['#default_value'][0]. $shear_quality;		break;	
	}

	return $string;
	
}

function snowpilot_user_edit(){
  global $user;
  drupal_goto('user/'.$user->uid.'/edit');
	
}

function snowpilot_user_has_role() {  
	$roles = func_get_args();
	global $user;
	foreach ( $user->roles as $user_role ){
    if (in_array($user_role , $roles)) {
      return TRUE;
    }
  }
  return FALSE; 
}

function snowpilot_graph_field_trunc(&$img,$string,$x_limit){
	
}

/*
//  This function submits to the avscience database  based on the node information passed to it. should be compliant with the snowpilot datamodel.
//
//
*/
function snowpilot_node_avscience_save_pit($node){

	
	include_once (DRUPAL_ROOT.'/sites/default/db_settings.php' );
	Database::addConnectionInfo('avscience_db', 'default', $test_db );// $avsci_db_info
	
	
	//if ( !file_exists(DRUPAL_ROOT. $xml_filename)){
		watchdog('snowpilot', "Snowpit values list is being prepared");
		$values_list = array();
		
		//PitCore Attributes: activities, aviLoc,iLayerNumber, bld, stability,avipit,incline,winDir,skiAreaPit ,bcPit, testPit,windspeed,aspect,skiBoot,measureFrom,sky,sufacePen, windloading,heightOfSnowpack,precip , serial, version,pitNotes,crownObs,timestamp,iDepth
			
	  $values_list[] =  " ACTIVITIES = '" . _generate_specifics_string($node). "' ";

		// iLayerNumber
		// this implementation assumes that the layers are in numerical order from top down; item_id is a unique id in field collections, can't use it.
		$ids = array();
		foreach ($node->field_layer['und'] as $lay ){ $ids[] = $lay['value']; }
		$all_layers = field_collection_item_load_multiple($ids);
		$iLayerNumber_value = 1;	
		foreach($all_layers as $x => $layer){
			if ($layer->field_this_is_my_layer_of_greate['und'][0]['value'] == '1') { 
			  $iDepth = ($layer->field_concern['und'][0]['value'] == 'top') ? $layer->field_height['und'][0]['value'] : $layer->field_bottom_depth['und'][0]['value'];
				$values_list[] =  " iDepth = '" . $iDepth . "' " ;
			  $values_list[] =  " iLayerNumber = '" . $iLayerNumber_value. "' ";
				break; 
			}else{
				$iLayerNumber_value++;
			}
		}
		if ( $iLayerNumber_value > 1 )  $values_list[] = ' HASLAYERS = 1 ';

		//
		// stability
		if (isset($node->field_stability_on_similar_slope['und'][0]['value'])){
		  $similar_stability = field_view_field('node', $node, 'field_stability_on_similar_slope');
		$values_list[] =  " STABILITY = '" . $similar_stability[0]['#markup'] . "' ";
		}
		
		//
		// aviPit
		//
		if (isset($node->field_adjacent_to_avy['und'][0]['value'] ) && $node->field_adjacent_to_avy['und'][0]['value'] == 1  ) {
		  $values_list[] =  " aviPit = '1' ";
		  $values_list[] =  " crownObs = '1' ";
		  $values_list[] =  " CROWN_OBS = '1' ";
			//aviLoc - or 'Pit is near avalanche at what point?' Enum 'crown', flank, 'other'
			if ( isset($node->field_near_avalanche['und'][0]['value']) ){
				$values_list[] = " aviLoc = '". $node->field_near_avalanche['und'][0]['value'] ."' " ;
			}
			
		
		}
	
		// incline
		if ( isset($node->field_slope_angle['und'][0]['value']) ){
		  $values_list[] =  " INCLINE = '" . $node->field_slope_angle['und'][0]['value'] . "' ";
		}
		//
		// winDir
		if ( isset($node->field_wind_direction['und'][0]['value']) ){
		  $values_list[] =  " WIND_DIR = '" . $node->field_wind_direction['und'][0]['value']. "' ";
		}
		//
		//skiAreaPit
		if (isset($node->field_pit_dug_in_a_ski_area['und'][0]['value']) && $node->field_pit_dug_in_a_ski_area['und'][0]['value'] == '1' ) {
			$values_list[] =  " skiAreaPit = '1' ";
			if ( isset($node->field_pit_is_representative_of_b['und'][0]['value'])  && $node->field_pit_is_representative_of_b['und'][0]['value'] == '1' ){
				$values_list[] = " bcPit = '1' ";
			}
		}
		//
		// testpit
		//
		if(	isset($node->field_practice_pit['und'][0]['value']) && ($node->field_practice_pit['und'][0]['value'] == '1' ) ) {
		  $values_list[] =  " TEST_PIT = 1 ";
	  }else {
	  	$values_list[] =  " TEST_PIT = 0 ";
	  }
		//
		// Air Temp
		if(	isset($node->field_air_temp['und'][0]['value'])  ) {
		  $values_list[] =  " AIR_TEMP = '".  $node->field_air_temp['und'][0]['value'] . "' ";
	  }

		//
		//windspeed
		$wind_speed_labels = array('calm'=> 'C', 'moderate'=>'M' , 'light' => 'L', 'strong' => 'S', 'gale' => 'X');
		if ( isset($node->field_wind_speed['und'][0]['value']) ){
		  $values_list[] = " WIND_SPEED = '".  $node->field_wind_speed['und'][0]['value']  . "' " ;
	  }
		//
		// aspect
		if ( isset($node->field_aspect['und'][0]['value'])  ){
		  $values_list[] = " ASPECT = '" . $node->field_aspect['und'][0]['value'] . "' ";
	  }
		//
		// skiBoot   - Surface Penetration  
		// set whether dki or boot penetration is used; and identify the value of each

		if ( !isset($node->field_surface_penetration['und'][0]['value']) ){
			
		}elseif($node->field_surface_penetration['und'][0]['value'] == 'boot' ){
			$values_list[] = " skiBoot = 'foot' ";
			if ( isset($node->field_boot_penetration_depth['und'][0]['value']  ) ){
			  $values_list[] = " surfacePen = ". $node->field_boot_penetration_depth['und'][0]['value'] ." ";
			}
		}elseif($node->field_surface_penetration['und'][0]['value'] == 'ski' ){
			$values_list[] = " skiBoot = 'ski' ";
			
			if (isset($node->field_ski_penetration['und'][0]['value']  ) ){
				$values_list[] =  " surfacePen = " . $node->field_ski_penetration['und'][0]['value']." "  ;
			}
		}
		// surface grain type and size
		if (isset($node->field_surface_grain_type['und'][0]['tid']  ) ){
			$grain_types_vocab = taxonomy_term_load($node->field_surface_grain_type['und'][0]['tid']);
			$values_list[] =  " surfGrainType = '" . $grain_types_vocab->description."' "  ;
		}
		if (isset($node->field_surface_grain_size['und'][0]['value']  ) ){
			$values_list[] =  " surfGrainSize = '" . $node->field_surface_grain_size['und'][0]['value']."' "  ;
		}

		//
		//  measureFrom
		//
				if (isset($node->field_depth_0_from['und'][0]['value']) && $node->field_depth_0_from['und'][0]['value'] == 'top' ) {
			$values_list[] = " measureFrom = 'top' ";
		}else{
			$values_list[] = " measureFrom = 'bottom' ";
			
		}
		
		//
		// Sky coverage
		//
		if (isset($node->field_sky_cover['und'][0]['value'])){
			$values_list[] = " SKY_COVER = '". $node->field_sky_cover['und'][0]['value'] ."' ";
		}
		//
		//  Wind Loading
		//
		if (isset ( $node->field_wind_loading['und'][0]['value'])){
		  $values_list[] = " WINDLOAD = '".  $node->field_wind_loading['und'][0]['value'] ."' ";
		}
		//
		//  heightof Snowpack
		//
		if (isset ( $node->field_total_height_of_snowpack['und'][0]['value'])){
			$values_list[] =  " heightOfSnowpack = '" . $node->field_total_height_of_snowpack['und'][0]['value'] . "' ";
		}
		//
		//  Precipitation
		//
		if ( isset ( $node->field_precipitation['und'][0]['value']) ){
			$values_list[] = " PRECIP = '" . $node->field_precipitation['und'][0]['value']. "' ";
		}

		//
		//  Serial number - must be unique to this pit
		//  To maintain continuity with the desktop app, it should be username + timestamp ( unix, w/ milliseconds) of posting the item
		//  php microtime won't work here; we jsut use a millisecond timestamp padded with 0
		//
		$account = user_load($node->uid);
		$values_list[] = " LOCAL_SERIAL = 'drupal-nid-".$node->nid ."-". $node->created . "000' ";
		//
		//  version - this will include drupal bld number ( starting at 7.5x ) and then also include the snowpilot.module version, and the browser type and version (similar to desktop app)
		//  I don't think browser type is directly supported within drupal, need browsecap module (?)
		//
		$snowpilot_version = '0.1'; // this will need to be read from the module version eventually
		$values_list[] = " PLATFORM = '" .VERSION.'-'.$snowpilot_version."' " ; 
		
		//
		// Pit Notes- a potentially long text field, with wierd foregin characters and illegal characters
		//
		if ( isset( $node->body['und'][0]['safe_value'])){
			$values_list[] =  " pitNotes = '" . $node->body['und'][0]['safe_value'] . "' ";
		}
		// Snowpilot name: User; drupal object: account
		//
		$values_list[] = " USERNAME = '" . str_replace( "'" , "/'", $account->name ) . "' ";
		//
		//  date of node submission becomes node created date.
		//
		$values_list[] = " OBS_DATE = '" . substr(date( 'c', $node->created), 0, 10) ."' ";
		//
	
		$values_list[] = " OBS_DATETIME = '".  	$node->field_date_time['und'][0]['value'] . "'  ";
		
		//
		// TIMESTAMP is node changed date and time, to comply with historical behavior
		$values_list[] =  " TIMESTAMP = '" . substr(date( 'c', $node->changed), 0 , 19). "' ";
		
		$unit_prefs = snowpilot_unit_prefs_get($node, 'node');
		//
		//  share
		//   this needs to become trinary, not just boolean
		$share = ($node->field_snowpit_visibility['und'][0]['value'] == 'public') ? '1' : $node->field_snowpit_visibility['und'][0]['value'];
		$values_list[] = " SHARE = '". $share . "' " ;

		//
		// prof - professional checkbox
		//
		if ( isset( $account->field_professional['und'][0]['value'] ) ){
		  $values_list[] = " prof = '" . $account->field_professional['und'][0]['value'] . "' ";
	  }
		//
		// affil - Affilliation
		//
		if (isset ($account->field_professional_affiliation['und'][0]['tid'])){
		  $values_list[] = " Organization = '" . taxonomy_term_load($unit_prefs['field_org_ownership'])->name . "' " ;
		}

		//  Location

		// whether Lat long is measure N or S of equator; E or W of 0 degrees
		$values_list[] = " NORTH = " . ($unit_prefs['latType'] == 'N' ? '1' : '0');
		$values_list[] = " WEST = " . ($unit_prefs['longType'] == 'W' ? '1' : '0');
		

		//
		// Latitude
		if ( isset( $node->field_latitude['und'][0]['value'] )){
		  $values_list[] =  " LAT = " . $node->field_latitude['und'][0]['value']." ";
		}
		//
		// Longitude
		if ( isset( $node->field_longitude['und'][0]['value'] )){
			$values_list[] = " LONGITUDE = '" . $node->field_longitude['und'][0]['value'] . "' ";
		
			
		}
		//
		// Elevation
		if (isset($node->field_elevation['und'][0]['value'])){
			$values_list[] = " ELEVATION =  '".$node->field_elevation['und'][0]['value'] . "' ";
		}
		//
		// State
		if ( isset( $unit_prefs['state'] )){			
			$values_list[] = " STATE = '". $unit_prefs['state'] . "' ";
		}
			
			
		//
		// Range
		if ( isset( $unit_prefs['range'] )){			
			$values_list[] = " MTN_RANGE = '". $unit_prefs['range'] . "' ";
		}
		//
		// Name
		$values_list[] = " PIT_NAME = '" . str_replace( "'" , "\'", $node->title) . "' ";
	
		//	
    //		Node _ID
		$values_list[] = " node_id = '". $node->nid ."' ";
		//
		//  Additional fields
		//
		
		$values_list[] = " PIT_XML = '". str_replace("'", "\'", snowpilot_node_write_pitxml($node, 'full' )) ."' ";
 
		
		if ( isset( $node->field_wind_loading['und'][0]['value']) && $node->field_wind_loading['und'][0]['value'] == 'yes'){
			$values_list[] = " WINDLOADING = 1 ";
		}		
	
		$values_list[] = " elvUnits = '". $unit_prefs['elvUnits'] ."' ";
		$values_list[] = " tempUnits = '". $unit_prefs['tempUnits'] ."' ";
		$values_list[] = " depthUnits = '". $unit_prefs['depthUnits'] ."' ";
		
		$insert_query = "INSERT INTO PIT_TABLE SET ".implode(',', $values_list);
	  db_set_active('avscience_db');
		$insert_results = db_query($insert_query);
		$extract_serial_query = "SELECT SERIAL FROM PIT_TABLE WHERE LOCAL_SERIAL = 'drupal-nid-".$node->nid ."-". $node->created . "000' ";
		$serial_results = db_query($extract_serial_query)->fetchField();
		db_set_active('default');
	//	watchdog('snowpilot', "Snowpit insert results: ". var_export($insert_results, TRUE ));

		return $serial_results;

}

//
// borrowed from http://php.net/manual/en/function.floatval.php
// $num is a string
function _tofloat($num) {
    $dotPos = strrpos($num, '.');
    $commaPos = strrpos($num, ',');
    $sep = (($dotPos > $commaPos) && $dotPos) ? $dotPos :
        ((($commaPos > $dotPos) && $commaPos) ? $commaPos : false);
  
    if (!$sep) {
        return floatval(preg_replace("/[^0-9]/", "", $num));
    }

    return floatval(
        preg_replace("/[^0-9]/", "", substr($num, 0, $sep)) . '.' .
        preg_replace("/[^0-9]/", "", substr($num, $sep+1, strlen($num)))
    );
}

function ToLL($north, $east, $utmZone)
{ 
	//
	// From: http://stackoverflow.com/questions/9203295/open-source-php-function-for-converting-utm-coordinates-to-latitude-and-longtitu
	//
  // This is the lambda knot value in the reference
  $LngOrigin = Deg2Rad($utmZone * 6 - 183);

  // The following set of class constants define characteristics of the
  // ellipsoid, as defined my the WGS84 datum.  These values need to be
  // changed if a different dataum is used.    

  $FalseNorth = 0;   // South or North?
  //if (lat < 0.) FalseNorth = 10000000.  // South or North?
  //else          FalseNorth = 0.   

  $Ecc = 0.081819190842622;       // Eccentricity
  $EccSq = $Ecc * $Ecc;
  $Ecc2Sq = $EccSq / (1. - $EccSq);
  $Ecc2 = sqrt($Ecc2Sq);      // Secondary eccentricity
  $E1 = ( 1 - sqrt(1-$EccSq) ) / ( 1 + sqrt(1-$EccSq) );
  $E12 = $E1 * $E1;
  $E13 = $E12 * $E1;
  $E14 = $E13 * $E1;

  $SemiMajor = 6378137.0;         // Ellipsoidal semi-major axis (Meters)
  $FalseEast = 500000.0;          // UTM East bias (Meters)
  $ScaleFactor = 0.9996;          // Scale at natural origin

  // Calculate the Cassini projection parameters

  $M1 = ($north - $FalseNorth) / $ScaleFactor;
  $Mu1 = $M1 / ( $SemiMajor * (1 - $EccSq/4.0 - 3.0*$EccSq*$EccSq/64.0 - 5.0*$EccSq*$EccSq*$EccSq/256.0) );

  $Phi1 = $Mu1 + (3.0*$E1/2.0 - 27.0*$E13/32.0) * sin(2.0*$Mu1);
    + (21.0*$E12/16.0 - 55.0*$E14/32.0)           * sin(4.0*$Mu1);
    + (151.0*$E13/96.0)                          * sin(6.0*$Mu1);
    + (1097.0*$E14/512.0)                        * sin(8.0*$Mu1);

  $sin2phi1 = sin($Phi1) * sin($Phi1);
  $Rho1 = ($SemiMajor * (1.0-$EccSq) ) / pow(1.0-$EccSq*$sin2phi1,1.5);
  $Nu1 = $SemiMajor / sqrt(1.0-$EccSq*$sin2phi1);

  // Compute parameters as defined in the POSC specification.  T, C and D

  $T1 = tan($Phi1) * tan($Phi1);
  $T12 = $T1 * $T1;
  $C1 = $Ecc2Sq * cos($Phi1) * cos($Phi1);
  $C12 = $C1 * $C1;
  $D  = ($east - $FalseEast) / ($ScaleFactor * $Nu1);
  $D2 = $D * $D;
  $D3 = $D2 * $D;
  $D4 = $D3 * $D;
  $D5 = $D4 * $D;
  $D6 = $D5 * $D;

  // Compute the Latitude and Longitude and convert to degrees
  $lat = $Phi1 - $Nu1*tan($Phi1)/$Rho1 * ( $D2/2.0 - (5.0 + 3.0*$T1 + 10.0*$C1 - 4.0*$C12 - 9.0*$Ecc2Sq)*$D4/24.0 + (61.0 + 90.0*$T1 + 298.0*$C1 + 45.0*$T12 - 252.0*$Ecc2Sq - 3.0*$C12)*$D6/720.0 );

  $lat = Rad2Deg($lat);

  $lon = $LngOrigin + ($D - (1.0 + 2.0*$T1 + $C1)*$D3/6.0 + (5.0 - 2.0*$C1 + 28.0*$T1 - 3.0*$C12 + 8.0*$Ecc2Sq + 24.0*$T12)*$D5/120.0) / cos($Phi1);

  $lon = Rad2Deg($lon);

  // Create a object to store the calculated Latitude and Longitude values
  $PC_LatLon['lat'] = $lat;
  $PC_LatLon['lon'] = $lon;

  // Returns a PC_LatLon object
  return $PC_LatLon;
}

/**
 * Implements hook_views_api().
 */
function snowpilot_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'snowpilot') . '/views',
  );
}

function snowpilot_modal_data(){
	
	$grain_types_vocab = taxonomy_get_tree('3');				
	//
	//  
	//
	$markup = '';
	$markup .= '<div class = "scotch-modal" id = "grain-types-modal" ><div class = "scotch-content dropdown">';
	$markup .= '<div class = "grain-types-groups dropdown-content" id = "grain-types-groups">';
	foreach( $grain_types_vocab as $grain_type ){
		if ($grain_type->parents[0] == 0 ){
			$grain_type_groups[] = $grain_type;
		}
	}	
	// this adds a 'none' option tothe grain types modal popups
	$grain_type_groups[] = (object) array( 'tid'=> '_none' , 'description' => '_none', 'name' => 'None');
	
		foreach ( $grain_type_groups as $grain_type_parent ){
			$markup .= '<div class = "parent dropdown-item parent-'. $grain_type_parent->tid.' "><a href ="#" class = "parent tid-'. $grain_type_parent->tid .' '. $grain_type_parent->description . ' '. $grain_type_parent->name .'"><div class = "parent-name"> '.$grain_type_parent->name. ' </div><div class ="parent-symbol grain-types">'._tid2snowsymbols($grain_type_parent->tid)."</div></a><div class = 'dropright-content'>";
			foreach ( $grain_types_vocab as $grain_type_child ){
				if ( $grain_type_child->parents[0] ==  $grain_type_parent->tid){
					$markup .= '<a href ="#" class = "child tid-'. $grain_type_child->tid .' '. $grain_type_child->description . ' '. $grain_type_child->name .'"><div class ="child-name"> '. $grain_type_child->name . ' </div><div class = "child-symbol grain-types">'. _tid2snowsymbols($grain_type_child->tid)."</div></a>";
					
				}
			}
			
			$markup .=  "</div>"; // end dropright-content
			$markup .= "</div>";  // end dropdown-item
		}
		$markup .= "</div>"; // end dropdown-content
		
	
	$markup .= "</div> </div>";// end scotch modal wrappers
	
	//
	//  begin secondary grain types dropdown modal
	//
	$markup .= '<div class = "scotch-modal" id = "grain-types-secondary-modal" ><div class = "scotch-content dropdown">';
	$markup .= '<div class = "grain-types-groups dropdown-content" id = "grain-types-groups">';

		foreach ( $grain_type_groups as $grain_type_parent ){
			$markup .= '<div class = "parent dropdown-item parent-'. $grain_type_parent->tid.' "><a href ="#" class = "parent tid-'. $grain_type_parent->tid .' '. $grain_type_parent->description . ' '. $grain_type_parent->name .'"><div class = "parent-name"> '.$grain_type_parent->name. ' </div><div class ="parent-symbol grain-types">'._tid2snowsymbols($grain_type_parent->tid)."</div></a><div class = 'dropright-content'>";
			foreach ( $grain_types_vocab as $grain_type_child ){
				if ( $grain_type_child->parents[0] ==  $grain_type_parent->tid){
					$markup .= '<a href ="#" class = "child tid-'. $grain_type_child->tid .' '. $grain_type_child->description . ' '. $grain_type_child->name .'"><div class ="child-name"> '. $grain_type_child->name . ' </div><div class = "child-symbol grain-types">'. _tid2snowsymbols($grain_type_child->tid)."</div></a>";
					
				}
			}
			
			$markup .=  "</div>"; // end dropright-content
			$markup .= "</div>";  // end dropdown-item
		}
		$markup .= "</div>"; // end dropdown-content
		
	
	$markup .= "</div> </div>";// scotch modal wrappers
	// end secondary grain types modal dropdown
	
	//
	//  begin surface grain types dropdown modal
	//
	$markup .= '<div class = "scotch-modal" id = "grain-types-surface-modal" ><div class = "scotch-content dropdown">';
	$markup .= '<div class = "grain-types-groups dropdown-content" id = "grain-types-groups">';

		foreach ( $grain_type_groups as $grain_type_parent ){
			$markup .= '<div class = "parent dropdown-item parent-'. $grain_type_parent->tid.' "><a href ="#" class = "parent tid-'. $grain_type_parent->tid .' '. $grain_type_parent->description . ' '. $grain_type_parent->name .'"><div class = "parent-name"> '.$grain_type_parent->name. ' </div><div class ="parent-symbol grain-types">'._tid2snowsymbols($grain_type_parent->tid)."</div></a><div class = 'dropright-content'>";
			foreach ( $grain_types_vocab as $grain_type_child ){
				if ( $grain_type_child->parents[0] ==  $grain_type_parent->tid){
					$markup .= '<a href ="#" class = "child tid-'. $grain_type_child->tid .' '. $grain_type_child->description . ' '. $grain_type_child->name .'"><div class ="child-name"> '. $grain_type_child->name . ' </div><div class = "child-symbol grain-types">'. _tid2snowsymbols($grain_type_child->tid)."</div></a>";
					
				}
			}
			
			$markup .=  "</div>"; // end dropright-content
			$markup .= "</div>";  // end dropdown-item
		}
		$markup .= "</div>"; // end dropdown-content
		
	
	$markup .= "</div> </div>";// scotch modal wrappers
	
	return $markup;
	
}

