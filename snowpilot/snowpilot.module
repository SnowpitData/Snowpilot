<?php

include_once('includes/unit_prefs.inc.php');
include_once('includes/graphing_functions.inc.php');


function snowpilot_form_alter(&$form, &$form_state, $form_id){
	// fields that will need to have the suffix changed according to the users prefs. 
	//	
	switch($form_id ){
		case 'snowpit_profile_node_form':
		$node = $form_state['node'];
    if ($node->type == 'snowpit_profile'){ // this might be rendundant for the switch/case above.
			if( !isset($node->nid) || isset($node->is_new) ){ // a new snowpit profile node, find $unit_prefs from $user
				global $user;
				$account = user_load($user->uid);
				$snowpit_unit_prefs = snowpilot_unit_prefs_get($account);  
				if ( snowpilot_user_unit_prefs_check($user->uid)){ // this check function verifies that we have a full set of unit preferences, etc, setup for this user. It redirects to the user /edit page if one or more are lacking
					// set the unit prefs on the snowpit node form.
					snowpilot_snopit_prof_unit_prefs_set($form, $snowpit_unit_prefs);	
				}
			}else{ // not a new node, but an edited one, so load the unit prefs from the existing $node
				$snowpit_unit_prefs = snowpilot_unit_prefs_get($node, 'node');  
			}
			snowpilot_snopit_prof_set_suffices($form, $snowpit_unit_prefs);
			
			drupal_add_js('/sites/all/modules/snowpilot/js/snowpilot.js');
			
			snowpilot_snowpit_set_layer_titles($form, $snowpit_unit_prefs);
			
			//dsm($form_state);
			snowpilot_snowpit_set_temp_coll_titles($form, $snowpit_unit_prefs);
			
			snowpilot_snowpit_set_density_titles($form, $snowpit_unit_prefs);

			snowpilot_snowpit_set_stability_test_titles($form, $snowpit_unit_prefs);
						
			snowpilot_snowpit_set_frac_cat($form, $snowpit_unit_prefs);
			
			$form['#submit'][] = 'snowpilot_snowpit_profile_node_form_submit';
			foreach( $form['field_test']['und'] as $delta => $test_result){
				if (is_numeric($delta)){
					// this hides or shows the shear_quality / fracture_character fields
					//dsm($form['field_fracture_category']);
					if ($form['field_fracture_category']['und']['#default_value'][0] == 'shear_quality' )  {
						$form['field_test']['und'][$delta]['field_fracture_character']['#type'] = 'hidden';
					}else{
						$form['field_test']['und'][$delta]['field_shear_quality']['#type'] = 'hidden';
					}
					// this hides the Score field, which is set by _entity_presave 
					
					$form['field_test']['und'][$delta]['field_stability_test_score']['#type'] ='hidden';
					//dsm($form['field_test']['und'][0]);
				}
				
			}
			//dsm ($form);
			
			//
			//dsm($form_state);
		//}
		} // end if node->type == snowpit prof
	} // end switch
	return;
}


function snowpilot_snowpit_set_frac_cat($form, $snowpit_unit_prefs){
	if ( $snowpit_unit_prefs['field_fracture_category'] != 'fracture_character'){
		$hide_field = 'field_fracture_character';
		
	}else{
		$hide_field = 'field_shear_quality';
	}
	foreach ( $form['field_test']['und'] as $key => $stability_test){
		//$form['field_test']['und'][$key]["$hide_field"]['und']['#type'] = 'hidden';
		//dsm($form['field_test']['und'][$key]["$hide_field"]['und']['#type']);
	}
	//dsm($form['field_test']);
	return $form;
}

function snowpilot_entity_presave($entity, $type){

	if ($type == 'field_collection_item' && $entity->field_name == 'field_test'){
		//if $entity->
		
		// this sets a specific field ( Stability test score ) when the field collection item is saved
		$entity->field_stability_test_score['und'][0]['value'] = _set_test_result_single($entity);
	}elseif ( $type == 'field_collection_item' && $entity->field_name =='field_layer' ){
		//dsm($entity);
		// we can insert other actions in here as necessary, for layers other other field collection items
		
	}
	return $entity;
}

function snowpilot_snowpit_profile_node_form_submit($form,&$form_state){
	//dsm($form['field_test']['und']['field_stability_test_type']['und']['#value']);
	
	
	$x= 0;
	foreach($form_state['values']['field_layer']['und'] as $key => $layer){
		
		// If this is a degenerative layer, (i.e. no bottom_depth and no hardness field set ) then we just delete it
		if ( is_numeric($key) && ( $layer['field_bottom_depth']['und'][0]['value'] == '' ) ){
		  unset($form_state['values']['field_layer']['und'][$key]);  // chop off this layer		
		}else{
			//drupal_set_message( "Not gonna chop.");
		}
		$x++;
	}
	return $form_state;
}

function _set_test_result_single($test_result){
	if (isset($test_result->field_stability_test_type['und'][0])){
	switch ($test_result->field_stability_test_type['und'][0]['value']){
		case 'ECT':	return $test_result->field_stability_test_score_ect['und'][0]['value'];
		break;
		case 'CT':	return $test_result->field_stability_test_score_ct['und'][0]['value'];
		
		break;
		case 'RB':	return $test_result->field_stability_test_score_rb['und'][0]['value'];
		
		break;
		case 'PST':	return '';
		
		break;
		case 'SB':	return $test_result->field_stability_test_score_sb['und'][0]['value'];
		
		break;
		case 'ST': return $test_result->field_stability_test_score_st['und'][0]['value'];
		
		break;
	}
	}
	return;
}


function snowpilot_snowpit_set_density_titles(&$form, $snowpit_unit_prefs){
	$x= 0;
	while (isset($form['field_density_profile']['und'][$x])){
		$next_layer = $x+1;
		if (isset($form['field_density_profile']['und'][$next_layer])){ $collapsed = ' collapsed'; 
		
		$form['field_density_profile']['und'][$x]['#prefix'] = "<div class='collapsible-container density_num_". $x ." '>".
			"<h3 class='collapsible-handle density-title'>Density Measurement " . $next_layer. ": ". 
				$form['field_density_profile']['und'][$x]['field_density_top']['und'][0]['value']['#default_value'] . 
					_density_unit_fix($snowpit_unit_prefs['field_density_units']).
						" @ ". $form['field_density_profile']['und'][$x]['field_depth']['und'][0]['value']['#default_value'].
						" ". $snowpit_unit_prefs['field_depth_units'].
					 "</h3>". '<div class="collapsible-content collapsed" >';
		}else{
			$form['field_density_profile']['und'][$x]['#prefix'] = "<div class='collapsible-container density_num_". $x ." '>".
				"<h3 class='collapsible-handle density-title'>Density Measurement " . $next_layer. ": </h3>"
				.'<div class="collapsible-content" >';
		
		}
		$form['field_density_profile']['und'][$x]['#suffix'] ="</div> </div>";
		$x++;
	}
	return $form;
}

function snowpilot_snowpit_set_stability_test_titles(&$form, $snowpit_unit_prefs){
	// this will be a fancy one, with compiled stab test output
	$form['field_test']['und']['add_more']['#value'] = "New Stability Test";
	

	$x= 0;
	while (isset($form['field_test']['und'][$x])){
		$next_layer = $x+1;
		$form['field_test']['und'][$x]['remove_button']['#value'] = "Remove Test";

		if (isset($form['field_test']['und'][$next_layer])){ 
			$form_test_shorthand = stability_test_score_shorthand_form($form['field_test']['und'][$x]);
			$form['field_test']['und'][$x]['#prefix'] = "<div class='collapsible-container stability_test_num_". $x ." '>".
				"<h3 class='collapsible-handle test-title'>Stability Test " . $next_layer. ": ". $form_test_shorthand ." ".
							 "Depth: ".$form['field_test']['und'][$x]['field_depth']['und'][0]['value']['#default_value'].
							" ". $snowpit_unit_prefs['field_depth_units'].
						 "</h3>". '<div class="collapsible-content collapsed" >';
			
			
			
		}else { // this is the last layer, we don't need any shorthand
			$form['field_test']['und'][$x]['#prefix'] = "<div class='collapsible-container stability_test_num_". $x ." '>".
				"<h3 class='collapsible-handle test-title'>Stability Test " . $next_layer. "</h3>". '<div class="collapsible-content" >';
			//dsm($form['field_test']['und']); // don't put dsm here, it will break the "add another"  functionality with AJAX errors.
		
		// here we will attempt to add a "Duplicate test" button and functionality
		$form['field_test']['und'][$x]['duplicate'] = 
			array(  '#type' => 'button',
							
							'#name' => 'field_test_add_more',
							'#value' => 'Duplicate Test',
							'#attributes' => array('class' => array ( 0 => 'field-add-more-submit'), 'style' => array (0 => 'float: right;')),
							//'#validate' => array(),
							'#submit' => array( 0 => 'snowpilot_duplicate_stability_test' ),
							'#limit_validation_errors' => array( array ( 0=> 'field_test' , 1 => 'und')),
							//'#ajax' => array( 'callback' => 'field_add_more_js', 'effect' => 'fade', 'wrapper' => 'field-test-add-more-wrapper' ),
							'#weight' => 101,
						//	'#delta' => $x, // should be equal to last x val, first unsuccessful one
						//	'_weight' => array('#type' => 'weight', '#delta' => $next_layer , '#weight' => 101 ),
						
						); 
				}
		///
		
		$form['field_test']['und'][$x]['#suffix'] ="</div> </div>";
		$x++;
	}
	
	//dsm($form['field_test']);
	
	//dsm($form['field_test']);
	return $form;
}

function snowpilot_duplicate_stability_test($form){
	//dsm( $form);
	dsm ("Hi");
}


function snowpilot_snowpit_set_temp_coll_titles(&$form, $snowpit_unit_prefs){
	$x= 0;
	while (isset($form['field_temp_collection']['und'][$x])){
		$next_layer = $x+1;
		if (isset($form['field_temp_collection']['und'][$next_layer])){ 	
			$form['field_temp_collection']['und'][$x]['#prefix'] = "<div class='collapsible-container temp_num_". $x ." '>".
			"<h3 class='collapsible-handle temp-title'>Temp Point " . $next_layer. ": ". 
				$form['field_temp_collection']['und'][$x]['field_temp_temp']['und'][0]['value']['#default_value'] . "&#176;". 
					$snowpit_unit_prefs['field_temp_units'].
						" @ ". $form['field_temp_collection']['und'][$x]['field_depth']['und'][0]['value']['#default_value'].
						" ". $snowpit_unit_prefs['field_depth_units'].
					 "</h3>". '<div class="collapsible-content collapsed" >';
		}else {
			$form['field_temp_collection']['und'][$x]['#prefix'] = "<div class='collapsible-container temp_num_". $x ." '>".
			"<h3 class='collapsible-handle temp-title'>Temp Point " . $next_layer.
			": </h3>" . '<div class="collapsible-content" >';
			
		}

		$form['field_temp_collection']['und'][$x]['#suffix'] ="</div> </div>";
		$x++;
	}
	return $form;
}

function snowpilot_snowpit_set_layer_titles(&$form, $snowpit_unit_prefs){
	// Start with the overall title of the group
	$form['field_layer']['und']['#title'] = "Snowpack Layers"; // 
	// Add more button:
	$form['field_layer']['und']['add_more']['#value'] = "New Snowpack Layer";
	$x=0;

	while(isset($form['field_layer']['und'][$x] )){
		// Set remove button text
		$form['field_layer']['und'][$x]['remove_button']['#value'] = "Remove Layer";
		$next_layer = $x+1 ; 
		
		$collapsed = '';
		if (isset($form['field_layer']['und'][$next_layer])) {
	
			$form['field_layer']['und'][$next_layer]['field_height']['und'][0]['value']['#default_value'] = 
				$form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#default_value'];
			$collapsed = ' collapsed';
		}
		if (isset($form['field_layer']['und'][$x]['field_hardness']['und']['#default_value'][0])){ 
			$this_hardness = $form['field_layer']['und'][$x]['field_hardness']['und']['#default_value'][0];
		}
		if ( isset($form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#default_value']) && $form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#default_value'] !='' ){
			$layer_info = 	$form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#default_value'].' ' . $snowpit_unit_prefs['field_depth_units'] . ' - ' . 
				$form['field_layer']['und'][$x]['field_height']['und'][0]['value']['#default_value']. ' ' . $snowpit_unit_prefs['field_depth_units']  . ', '. $this_hardness;
		}else $layer_info = '';
	
		$form['field_layer']['und'][$x]['#prefix'] ="<div class='collapsible-container layer_num_". $x ." '>".
			"<h3 class='collapsible-handle layer-title'>Layer " . $next_layer . ": ". $layer_info . "</h3>".
				'<div class="collapsible-content'. $collapsed .'" >';

		$form['field_layer']['und'][$x]['#suffix'] ="</div> </div>";
		//dsm($form['field_layer']['und'][$x]);
		
		//$form['field_layer']['und'][$x]['#pre_render'][] = 'snowpilot_graintypes_tweak';
		$x++;
	}
}


function snowpilot_node_view($node, $view_mode){
	if ($node->type == 'snowpit_profile'){
	snowpilot_snowpit_graph_header_write($node);	
		$prefs = snowpilot_unit_prefs_get($node, 'node'); 
		//$node->content['field_air_temp'][0]['#markup'] = $node->content['field_air_temp']['#items'][0]['value']. $prefs['field_temp_units'];
	}
	return $node;
}		

function snowpilot_graintypes_tweak($element){
	dsm($element);
	return ;
}

function snowpilot_field_widget_form_alter(&$element, &$form_state, $context) {
  // Add a css class to widget form elements for all fields of type mytype.
  if ($context['field']['type'] == 'taxonomy_term_reference' && $context['field']['field_name'] == 'field_grain_type' ) {
		//dsm($form_state);
		
		
    // Be sure not to overwrite existing attributes.
    $element['#attributes']['class'][] = 'myclass';
  }
}
		
// use a 'favorite locations' node type to store fields that should be prepopulated on the snowpit profile form.



function snowpilot_snopit_prof_set_suffices(&$form, $snowpit_unit_prefs){
	//dsm($form['field_elevation']['und'][0]);
	$form['field_air_temp']['und'][0]['value']['#field_suffix'] = 'º'.$snowpit_unit_prefs['field_temp_units'];
	$form['field_elevation']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_elevation_units'];
	$form['field_surface_penetration']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
	$form['field_boot_penetration_depth']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
	$form['field_ski_penetration']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
  $form['field_total_height_of_snowpack']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
	
	// Repeated per layer
	$x = 0; //count($form['field_layer']['und'] );
	while ( isset($form['field_layer']['und'][$x]) ){
				
				
		$form['field_layer']['und'][$x]['field_height']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units']; //
		$form['field_layer']['und'][$x]['field_bottom_depth']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$form['field_layer']['und'][$x]['field_density_top']['und'][0]['value']['#field_suffix'] = _density_unit_fix($snowpit_unit_prefs['field_density_units']);
		$form['field_layer']['und'][$x]['field_density_bottom']['und'][0]['value']['#field_suffix'] = _density_unit_fix($snowpit_unit_prefs['field_density_units']);
		$form['field_layer']['und'][$x]['field_grain_size']['und'][0]['value']['#field_suffix'] = 'mm';
		$x++;
	}

	// Repeated per test
	$x = 0; //count($form['field_layer']['und'] );
	while ( isset($form['field_test']['und'][$x]) ){
		$form['field_test']['und'][$x]['field_depth']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$form['field_test']['und'][$x]['field_length_of_saw_cut']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$form['field_test']['und'][$x]['field_length_of_isolated_col_pst']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$x++;
	}
	
	// REpeated per temp collection
	$x = 0;
	while (isset ($form['field_temp_collection']['und'][$x])){
		$form['field_temp_collection']['und'][$x]['field_temp_temp']['und'][0]['value']['#field_suffix'] = "&#176;". $snowpit_unit_prefs['field_temp_units'];
		$form['field_temp_collection']['und'][$x]['field_depth']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$x++;
	}
	// Repeated per density measurement
	$x = 0;
	while ( isset( $form['field_density_profile']['und'][$x])){
		$form['field_density_profile']['und'][$x]['field_depth']['und'][0]['value']['#field_suffix'] = $snowpit_unit_prefs['field_depth_units'];
		$form['field_density_profile']['und'][$x]['field_density_top']['und'][0]['value']['#field_suffix'] = _density_unit_fix($snowpit_unit_prefs['field_density_units']);
		
		
		$x++;
	}
	
	return;
}

function _density_unit_fix($units){
	return ($units == 'kg_cubic_m' ? 'kg/m&#xb3;' : 'lb/ft&#xb3;');  // this should be fixed so that metric units would be the default
}


function snowpilot_cardinal_wind_dir($degrees){
	if (!is_numeric($degrees)) return;
	switch (true){
		
		case ($degrees >= 360-22.5 || $degrees < 22.5): $card = 'N'; break; 
		case ($degrees >=22.5 && $degrees < 67.5 ): $card = 'NE'; break;
		case ($degrees >=67.5 && $degrees < 112.5): $card = 'E'; break;
		case ($degrees >=112.5 && $degrees < 157.5): $card = 'SE'; break;
		case ($degrees >=157.5 && $degrees < 202.5): $card = 'S'; break;
		case ($degrees >=202.5 && $degrees < 247.5): $card = 'SW'; break;
		case ($degrees >= 247.5 && $degrees < 292.5): $card = 'W'; break;
		case ($degrees >=292.5 && $degrees < 337.5): $card ='NW'; break;
	
	
	}
	return $card;
}

function _snowpilot_find_pit_depth($node){
	if (isset($node->field_total_height_of_snowpack['und'][0]['value']) && $node->field_depth_0_from['und'][0]['value'] == 'top'){
		return $node->field_total_height_of_snowpack['und'][0]['value'];
	}else{
		$ids = array();
		$max = 0;
		foreach ($node->field_layer['und'] as $lay ){ $ids[] = $lay['value']; }
		$all_layers = field_collection_item_load_multiple($ids);
		foreach ($all_layers as $layer){
			if ($layer->field_height > $max ) $max = $layer->field_height ;
			if ($layer->field_bottom_depth > $max ) $max = $layer->field_bottom_depth ;	
		}
		return $max;
	}
	
}


function depth_val($a,$b){
	$a_depth = isset($a->field_depth['und'][0]['value']) ? $a->field_depth['und'][0]['value'] : 0; 
	$b_depth = isset($b->field_depth['und'][0]['value']) ? $b->field_depth['und'][0]['value'] : 0;
	
	switch (true){
		case $a_depth>$b_depth:
			return -1;
		break;
		case $a_depth<$b_depth:
			return 1;
		break;
		case $a_depth == $b_depth:
		  return 0;
		break;
	}	
	
}

function layer_depth_val( $a , $b){
	return ($a->y_val_top > $b->y_val_top) ? 1 : -1 ;
}


//  Returns a string when give a stability test part of a node, eg. $node->field_test['und'][$x]
//  $test is a fieldCollectionEntityObject

function stability_test_score_shorthand($test, $snowpit_unit_prefs){
	$string = '';
	//dsm($test);
	switch ($test->field_stability_test_type['und'][0]['value']){
		case 'ECT':
			if (in_array( $test->field_stability_test_score['und'][0]['value'], array( 'ECTP','ECTN' ) ) && isset ($test->field_ec_score['und'][0]['value'] )){
				$string = $test->field_stability_test_type['und'][0]['value'] . $test->field_ec_score['und'][0]['value'];		
			}else{
				$string = $test->field_stability_test_score['und'][0]['value'];
			}
		
		break;
		case 'PST':
			$string = 'PST'. $test->field_length_of_saw_cut ['und'][0]['value']."/". $test->field_length_of_isolated_col_pst['und'][0]['value']." (". $test->field_data_code_pst['und'][0]['value']. ")";
		
		
		break;
		case 'CT':
			if (in_array($test->field_stability_test_score_ct['und'][0]['value'], array('CTE','CTM', 'CTH', 'CTN'  )) && isset($test->field_ct_score['und'][0]['value'])){
				$string = 'CT'.$test->field_ct_score['und'][0]['value'];
			}else{
		  	$string = $test->field_stability_test_score_ct['und'][0]['value'];
				
			}
			
			if ( $snowpit_unit_prefs['field_fracture_category'] == 'shear_quality' && isset($test->field_shear_quality['und'][0]['value'])){
				$string .= ", ".$test->field_shear_quality['und'][0]['value'];
			}elseif (isset( $test->field_fracture_character['und'][0]['value'])){
				$string .= ", ".$test->field_fracture_character['und'][0]['value'];
			}
		break;	
		case 'RB':
		case 'ST':
		case 'SB':
		$shear_quality = isset( $test->field_shear_quality['und']) ?  ', '. $test->field_shear_quality['und'][0]['value'] : '';
		  $string = $test->field_stability_test_score['und'][0]['value'] . $shear_quality;
		break;	
	}
	if ( $test->multiple >1){
		$string = $test->multiple.'x '.$string;
	}
	
	if ( isset($test->field_depth['und'][0]['value'])){
		$string .= " @".$test->field_depth['und'][0]['value'].$snowpit_unit_prefs['field_depth_units']; 
	}
	return $string;
}

function stability_test_score_shorthand_form($stab_test){
	$string = '';
	if ( !isset( $stab_test['field_stability_test_type']['und']['#default_value'][0] )) return '';
	$shear_quality = isset($stab_test['field_shear_quality']['und']['#default_value'][0]) ? ", ".$stab_test['field_shear_quality']['und']['#default_value'][0] : '' ;
	switch ($stab_test['field_stability_test_type']['und']['#default_value'][0]){
		case 'ECT':
		  $string = $stab_test['field_stability_test_score_ect']['und']['#default_value'][0];
			if (in_array( $stab_test['field_stability_test_score_ect']['und']['#default_value'][0], array( 'ECTP','ECTN' ) ) && isset ($stab_test['field_ec_score']['und'][0]['value']['#default_value'] )){
				$string .= " ". $stab_test['field_ec_score']['und'][0]['value']['#default_value'];		
			}
		
		break;
		case 'PST':
			$string = 'PST'. $stab_test['field_length_of_saw_cut']['und'][0]['value']['#default_value']."/". $stab_test['field_length_of_isolated_col_pst']['und'][0]['value']['#default_value']." (". $stab_test['field_data_code_pst']['und']['#default_value'][0]. ")";
		
		
		break;
		case 'CT':
	  	$string = $stab_test['field_stability_test_score_ct']['und']['#default_value'][0];
			if (in_array($stab_test['field_stability_test_score_ct']['und']['#default_value'][0], array('CTE','CTM', 'CTH', 'CTN'  )) && isset($stab_test['field_ct_score']['und'][0]['value']['#default_value'])){
				$string .= $stab_test['field_ct_score']['und'][0]['value']['#default_value']. " ". $stab_test['field_shear_quality']['und']['#default_value'][0];
			}
		break;	
		case 'RB':
	  $string = $stab_test['field_stability_test_score_rb']['und']['#default_value'][0]. $shear_quality; break;
		
		case 'ST':
	  $string = $stab_test['field_stability_test_score_st']['und']['#default_value'][0]. $shear_quality; break;
		
		case 'SB':
		  $string = $stab_test['field_stability_test_score_sb']['und']['#default_value'][0]. $shear_quality;		break;	
	}

	return $string;
	
}

?>